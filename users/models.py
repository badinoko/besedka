from django.contrib.auth.models import AbstractUser
from django.db import models
from django.db.models import CharField, TextChoices
from django.urls import reverse, NoReverseMatch
from django.utils.translation import gettext_lazy as _
from django.utils import timezone
from PIL import Image
import os

class User(AbstractUser):
    """
    Custom user model with Telegram integration and roles.
    Enhanced for 2025 with modern social features.
    """

    class Role(TextChoices):
        OWNER = "owner", _("–í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        MODERATOR = "moderator", _("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        STORE_OWNER = "store_owner", _("–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞")
        STORE_ADMIN = "store_admin", _("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞")
        USER = "user", _("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        GUEST = "guest", _("–ì–æ—Å—Ç—å")

    class ExperienceLevel(TextChoices):
        BEGINNER = "beginner", _("üå± –ù–æ–≤–∏—á–æ–∫")
        INTERMEDIATE = "intermediate", _("üåø –û–ø—ã—Ç–Ω—ã–π")
        ADVANCED = "advanced", _("üå≥ –≠–∫—Å–ø–µ—Ä—Ç")
        MASTER = "master", _("üèÜ –ú–∞—Å—Ç–µ—Ä")

    # First and last name do not cover name patterns around the globe
    name = CharField(_("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), blank=True, max_length=255)
    first_name = None  # type: ignore[assignment]
    last_name = None  # type: ignore[assignment]

    # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = CharField(
        _("–†–æ–ª—å"),
        max_length=20,
        choices=Role.choices,
        default=Role.USER,
    )

    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    role_icon = models.CharField(
        _("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫"),
        max_length=10,
        blank=True,
        null=True,
        help_text=_("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏-–∑–Ω–∞—á–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    )

    # Telegram ID - —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç Telegram
    telegram_id = models.BigIntegerField(
        _("Telegram ID"),
        unique=True,
        null=True, # –ú–æ–∂–µ—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–µ —á–µ—Ä–µ–∑ Telegram
        blank=True,
        help_text=_("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram")
    )

    # Telegram Username
    telegram_username = CharField(
        _("Telegram Username"),
        max_length=100,
        blank=True,
        null=True,
        unique=True, # –ú–æ–∂–µ—Ç –±—ã—Ç—å null, –Ω–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, —Ç–æ —É–Ω–∏–∫–∞–ª–µ–Ω
        help_text=_("–í–∞—à username –≤ Telegram (–±–µ–∑ @)")
    )

    # === –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    avatar = models.ImageField(
        _("–ê–≤–∞—Ç–∞—Ä"),
        upload_to='avatars/',
        null=True,
        blank=True,
        help_text=_("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 300x300px")
    )

    bio = models.TextField(
        _("–û —Å–µ–±–µ"),
        blank=True,
        max_length=500,
        help_text=_("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
    )

    location = models.CharField(
        _("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),
        blank=True,
        max_length=100,
        help_text=_("–ì–æ—Ä–æ–¥, —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞")
    )

    experience_level = models.CharField(
        _("–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞"),
        max_length=20,
        choices=ExperienceLevel.choices,
        default=ExperienceLevel.BEGINNER,
        help_text=_("–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏")
    )

    website = models.URLField(
        _("–í–µ–±-—Å–∞–π—Ç"),
        blank=True,
        help_text=_("–í–∞—à –ª–∏—á–Ω—ã–π —Å–∞–π—Ç –∏–ª–∏ –±–ª–æ–≥")
    )

    # === –°–û–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    karma_points = models.IntegerField(
        _("–û—á–∫–∏ –∫–∞—Ä–º—ã"),
        default=0,
        help_text=_("–û—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
    )

    followers_count = models.IntegerField(
        _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"),
        default=0
    )

    following_count = models.IntegerField(
        _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫"),
        default=0
    )

    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
    posts_count = models.IntegerField(
        _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤"),
        default=0
    )

    photos_count = models.IntegerField(
        _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"),
        default=0
    )

    likes_given = models.IntegerField(
        _("–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤"),
        default=0
    )

    likes_received = models.IntegerField(
        _("–ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤"),
        default=0
    )

    comments_count = models.IntegerField(
        _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"),
        default=0
    )

    # === –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–í–ê–¢–ù–û–°–¢–ò ===
    is_profile_public = models.BooleanField(
        _("–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"),
        default=True,
        help_text=_("–†–∞–∑—Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
    )

    show_experience_level = models.BooleanField(
        _("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞"),
        default=True
    )

    show_karma = models.BooleanField(
        _("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä–º—É"),
        default=True
    )

    show_statistics = models.BooleanField(
        _("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        default=True
    )

    allow_direct_messages = models.BooleanField(
        _("–†–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
        default=True
    )

    # === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
    email_notifications = models.BooleanField(
        _("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        default=True
    )

    notify_new_followers = models.BooleanField(
        _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö"),
        default=True
    )

    notify_likes = models.BooleanField(
        _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö"),
        default=True
    )

    notify_comments = models.BooleanField(
        _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö"),
        default=True
    )

    # === –°–ò–°–¢–ï–ú–ù–´–ï –ü–û–õ–Ø ===
    is_banned = models.BooleanField(
        _("–ó–∞–±–∞–Ω–µ–Ω"), default=False,
        help_text=_("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
    )

    last_activity = models.DateTimeField(
        _("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
        auto_now=True
    )

    account_created = models.DateTimeField(
        _("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"),
        auto_now_add=True
    )

    # EMAIL_FIELD = "email"
    # USERNAME_FIELD = "username"
    # REQUIRED_FIELDS = ["email"]

    class Meta:
        verbose_name = _("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        verbose_name_plural = _("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        app_label = 'users'

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
        if self.avatar:
            img = Image.open(self.avatar.path)
            if img.height > 300 or img.width > 300:
                output_size = (300, 300)
                img.thumbnail(output_size)
                img.save(self.avatar.path)

    def get_absolute_url(self) -> str:
        """Get URL for user's detail view."""
        return reverse("users:detail", kwargs={"username": self.username})

    def __str__(self):
        display_name = self.name or self.username
        if self.experience_level and self.experience_level != 'beginner':
            level_emoji = {
                'intermediate': 'üåø',
                'advanced': 'üå≥',
                'master': 'üèÜ'
            }.get(self.experience_level, '')
            return f"{level_emoji} {display_name}"
        return display_name

    # === –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –†–û–õ–ò ===
    def is_owner(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        return self.role == self.Role.OWNER

    def is_platform_admin(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        return self.role == self.Role.MODERATOR

    def is_store_owner(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –º–∞–≥–∞–∑–∏–Ω–∞."""
        return self.role == self.Role.STORE_OWNER

    def is_store_admin(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–∞–≥–∞–∑–∏–Ω–∞."""
        return self.role == self.Role.STORE_ADMIN

    def is_regular_user(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        return self.role == self.Role.USER

    def is_guest(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç–µ–º."""
        return self.role == self.Role.GUEST

    def can_access_vip_chat(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ VIP-—á–∞—Ç—É.
        –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
        """
        return self.role in [self.Role.OWNER, self.Role.MODERATOR]

    @property
    def has_admin_access(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –∞–¥–º–∏–Ω–∫–µ."""
        return self.role in [
            self.Role.OWNER,
            self.Role.MODERATOR,
            self.Role.STORE_OWNER,
            self.Role.STORE_ADMIN,
        ]

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–¶–ò–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ===
    @property
    def avatar_url(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π."""
        if self.avatar and hasattr(self.avatar, 'url'):
            return self.avatar.url
        return '/static/images/default-avatar.png'

    @property
    def experience_badge(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞."""
        return {
            'beginner': 'üå±',
            'intermediate': 'üåø',
            'advanced': 'üå≥',
            'master': 'üèÜ'
        }.get(self.experience_level, 'üå±')

    @property
    def karma_level(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–º—ã."""
        if self.karma_points >= 1000:
            return "üèÜ –õ–µ–≥–µ–Ω–¥–∞"
        elif self.karma_points >= 500:
            return "‚≠ê –ó–≤–µ–∑–¥–∞"
        elif self.karma_points >= 100:
            return "üåü –ü–æ–ø—É–ª—è—Ä–Ω—ã–π"
        elif self.karma_points >= 50:
            return "üëç –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            return "üå± –ù–æ–≤–∏—á–æ–∫"

    def add_karma(self, points, reason=""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∫–∞—Ä–º—ã."""
        self.karma_points += points
        self.save(update_fields=['karma_points'])

    def can_view_profile(self, viewer_user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."""
        if not self.is_profile_public:
            return viewer_user == self or viewer_user.has_admin_access
        return True

    @property
    def display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è."""
        if self.name:
            return self.name
        elif self.username and self.username != f"user_{self.id}":
            return self.username
        else:
            return f"User{self.id}"

    @property
    def get_role_icon(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–æ–∫ —Ä–æ–ª–∏ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫."""
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–Ω–∞—á–∫–∏ —Ä–æ–ª–µ–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        role_icons = {
            'owner': 'üëë',
            'moderator': 'üõ°Ô∏è',
            'store_owner': 'üè™',
            'store_admin': 'üì¶',
            'user': 'üë§'
        }

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –∏ —Ä–æ–ª—å = user
        if self.role == 'user' and self.role_icon:
            return self.role_icon

        return role_icons.get(self.role, 'üë§')

    @property
    def display_name_with_icon(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–æ –∑–Ω–∞—á–∫–æ–º —Ä–æ–ª–∏."""
        return f"{self.get_role_icon} {self.display_name}"

    @property
    def short_bio(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é."""
        if len(self.bio) > 100:
            return self.bio[:100] + "..."
        return self.bio

    @property
    def unread_notifications_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        return self.notifications.filter(is_read=False).count()

    @property
    def recent_notifications(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        return self.notifications.all()[:5]

    def get_short_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.name or self.username

    def get_full_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.name or self.username

    def get_role_display(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏."""
        role_dict = {
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            'store_owner': '–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞',
            'store_admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞',
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'guest': '–ì–æ—Å—Ç—å'
        }
        return role_dict.get(self.role, self.role)

class BanRecord(models.Model):
    """
    Records of user bans.
    """
    # –¢–∏–ø—ã –±–∞–Ω–æ–≤
    BAN_TYPE_GLOBAL = 'global'
    BAN_TYPE_CHAT = 'chat'
    BAN_TYPE_GALLERY = 'gallery'
    BAN_TYPE_GROWLOGS = 'growlogs'

    BAN_TYPE_CHOICES = [
        (BAN_TYPE_GLOBAL, _('Global Ban')),
        (BAN_TYPE_CHAT, _('Chat Ban')),
        (BAN_TYPE_GALLERY, _('Gallery Ban')),
        (BAN_TYPE_GROWLOGS, _('Grow Logs Ban')),
    ]

    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='bans'
    )
    banned_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True, related_name='bans_given'
    )
    ban_type = models.CharField(
        _("Ban Type"), max_length=20, choices=BAN_TYPE_CHOICES, default=BAN_TYPE_GLOBAL
    )
    reason = models.TextField(_("Reason"), blank=True)
    created_at = models.DateTimeField(_("Created at"), auto_now_add=True)
    expires_at = models.DateTimeField(
        _("Expires at"), null=True, blank=True,
        help_text=_("Leave empty for permanent ban")
    )
    is_active = models.BooleanField(_("Active"), default=True)

    class Meta:
        verbose_name = _("Ban Record")
        verbose_name_plural = _("Ban Records")
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user} - {self.get_ban_type_display()} ban"

    def is_expired(self):
        """Check if the ban has expired."""
        if not self.expires_at:
            return False  # Permanent ban never expires
        return timezone.now() > self.expires_at

    def revoke(self, admin_user=None):
        """Revoke the ban."""
        self.is_active = False
        self.save()

        # If this is a global ban, update the user's banned status
        if self.ban_type == self.BAN_TYPE_GLOBAL:
            # Check if there are other active global bans
            other_global_bans = BanRecord.objects.filter(
                user=self.user,
                ban_type=self.BAN_TYPE_GLOBAL,
                is_active=True
            ).exclude(id=self.id).exists()

            # If no other global bans, set user.is_banned to False
            if not other_global_bans:
                self.user.is_banned = False
                self.user.save()

        return True

class UserFollow(models.Model):
    """
    –ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    follower = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='following',
        verbose_name=_("–ü–æ–¥–ø–∏—Å—á–∏–∫")
    )

    followed = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='followers',
        verbose_name=_("–ù–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω")
    )

    created_at = models.DateTimeField(
        _("–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
        auto_now_add=True
    )

    class Meta:
        verbose_name = _("–ü–æ–¥–ø–∏—Å–∫–∞")
        verbose_name_plural = _("–ü–æ–¥–ø–∏—Å–∫–∏")
        unique_together = ['follower', 'followed']
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.follower} ‚Üí {self.followed}"

    def save(self, *args, **kwargs):
        # –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if self.follower == self.followed:
            raise ValueError("–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è")

        super().save(*args, **kwargs)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.follower.following_count = self.follower.following.count()
        self.follower.save(update_fields=['following_count'])

        self.followed.followers_count = self.followed.followers.count()
        self.followed.save(update_fields=['followers_count'])

class Like(models.Model):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∞–π–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    from django.contrib.contenttypes.fields import GenericForeignKey
    from django.contrib.contenttypes.models import ContentType

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='likes_given_new',
        verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    )

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å –ª—é–±–æ–π –º–æ–¥–µ–ª—å—é
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')

    created_at = models.DateTimeField(_("–î–∞—Ç–∞"), auto_now_add=True)

    class Meta:
        verbose_name = _("–õ–∞–π–∫")
        verbose_name_plural = _("–õ–∞–π–∫–∏")
        unique_together = ['user', 'content_type', 'object_id']
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user} ‚Üí {self.content_object}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user.likes_given += 1
        self.user.save(update_fields=['likes_given'])

class Notification(models.Model):
    """
    –ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    from django.contrib.contenttypes.fields import GenericForeignKey
    from django.contrib.contenttypes.models import ContentType

    class NotificationType(models.TextChoices):
        LIKE = 'like', _('üëç –õ–∞–π–∫')
        COMMENT = 'comment', _('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        FOLLOW = 'follow', _('üë• –ü–æ–¥–ø–∏—Å–∫–∞')
        MENTION = 'mention', _('üì¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
        SYSTEM = 'system', _('‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ')
        ORDER = 'order', _('üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑')
        CHAT_MESSAGE = 'chat_message', _('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ')

    recipient = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='notifications',
        verbose_name=_("–ü–æ–ª—É—á–∞—Ç–µ–ª—å")
    )

    sender = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='sent_notifications',
        verbose_name=_("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"),
        null=True,
        blank=True
    )

    notification_type = models.CharField(
        _("–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        max_length=20,
        choices=NotificationType.choices
    )

    title = models.CharField(_("–ó–∞–≥–æ–ª–æ–≤–æ–∫"), max_length=255)
    message = models.TextField(_("–°–æ–æ–±—â–µ–Ω–∏–µ"))

    # –°–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    content_type = models.ForeignKey(
        ContentType,
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )
    object_id = models.PositiveIntegerField(null=True, blank=True)
    content_object = GenericForeignKey('content_type', 'object_id')

    is_read = models.BooleanField(_("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"), default=False)
    created_at = models.DateTimeField(_("–î–∞—Ç–∞"), auto_now_add=True)

    class Meta:
        verbose_name = _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        verbose_name_plural = _("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.get_notification_type_display()}: {self.title} –¥–ª—è {self.recipient.username}"

    @property
    def type_icon(self):
        icons = {
            'like': '<i class="fas fa-thumbs-up text-primary"></i>',
            'comment': '<i class="fas fa-comment-dots text-info"></i>',
            'follow': '<i class="fas fa-user-plus text-success"></i>',
            'mention': '<i class="fas fa-at text-warning"></i>',
            'system': '<i class="fas fa-cog text-secondary"></i>',
            'order': '<i class="fas fa-receipt text-purple"></i>', # –ü—Ä–∏–º–µ—Ä —Ü–≤–µ—Ç–∞
            'chat_message': '<i class="fas fa-comments text-success"></i>', # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —á–∞—Ç–∞
        }
        return icons.get(self.notification_type, '<i class="fas fa-bell"></i>')

    def get_action_url(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.
        –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–∫–∞–∑—É, –ø–æ—Å—Ç—É, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é, –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–∞—Ç—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.
        """
        # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å get_absolute_url() —É content_object
        if self.content_object and hasattr(self.content_object, 'get_absolute_url'):
            try:
                url = self.content_object.get_absolute_url()
                if url: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
                    return url
            except (NoReverseMatch, Exception):
                pass # –û—à–∏–±–∫–∞ —Ä–µ–≤–µ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã

        # 2. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        if self.notification_type == self.NotificationType.ORDER:
            # –î–ª—è –∑–∞–∫–∞–∑–æ–≤
            if hasattr(self.content_object, 'pk'):
                try:
                    if self.recipient.is_store_owner() or self.recipient.is_store_admin():
                        # URL –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
                        return reverse('admin:magicbeans_store_order_change', kwargs={'object_id': self.content_object.pk})
                    else:
                        # URL –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        return reverse('store:order_detail', kwargs={'order_id': self.content_object.pk})
                except NoReverseMatch:
                    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ–¥–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω
                    try:
                        return reverse('store:catalog')
                    except NoReverseMatch:
                        pass

        elif self.notification_type == self.NotificationType.FOLLOW:
            # –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤–µ–¥–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            try:
                return reverse('users:profile')
            except NoReverseMatch:
                return reverse('news:home')  # Fallback

        elif self.notification_type == self.NotificationType.LIKE:
            # –î–ª—è –ª–∞–π–∫–æ–≤ –≤–µ–¥–µ–º –≤ –≥–∞–ª–µ—Ä–µ—é (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ª–∞–π–∫–æ–≤)
            try:
                return reverse('gallery:gallery')
            except NoReverseMatch:
                return reverse('news:home')  # Fallback

        elif self.notification_type == self.NotificationType.COMMENT:
            # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–µ–¥–µ–º –≤ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç—ã (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
            try:
                return reverse('growlogs:list')
            except NoReverseMatch:
                return reverse('news:home')  # Fallback

        elif self.notification_type == self.NotificationType.MENTION:
            # –î–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–µ–¥–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            try:
                return reverse('users:profile')
            except NoReverseMatch:
                return reverse('news:home')  # Fallback

        elif self.notification_type == self.NotificationType.CHAT_MESSAGE:
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –≤–µ–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é (—á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
            try:
                return reverse('news:home')
            except NoReverseMatch:
                pass

        elif self.notification_type == self.NotificationType.SYSTEM:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            try:
                return reverse('users:profile')
            except NoReverseMatch:
                return reverse('news:home')  # Fallback

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–µ –¥–∞–ª URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ fallback
        try:
            return reverse('news:home')
        except:
            return '/'  # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback

    @property
    def is_actionable(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º" (–∏–º–µ–µ—Ç –ª–∏ –æ–Ω–æ URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è).
        –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ä–∞–∑–¥–µ–ª–∞–º.
        """
        action_url = self.get_action_url()
        return action_url is not None and action_url != '#' and action_url != 'None'

    def mark_as_read(self):
        """–ü–æ–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ."""
        if not self.is_read:
            self.is_read = True
            self.save(update_fields=['is_read'])

    @classmethod
    def create_notification(cls, recipient, notification_type, title, message, sender=None, content_object=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.

        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if not cls.can_receive_notification(recipient, notification_type):
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            import logging
            logger = logging.getLogger(__name__)
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ '{notification_type}' "
                f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{recipient.username}' (—Ä–æ–ª—å: {recipient.role})"
            )
            return None

        return cls.objects.create(
            recipient=recipient,
            sender=sender,
            notification_type=notification_type,
            title=title,
            message=message,
            content_object=content_object
        )

    @classmethod
    def can_receive_notification(cls, user, notification_type):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
        """
        # –ì–æ—Å—Ç–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö
        if user.role == 'guest':
            return notification_type == cls.NotificationType.ORDER

        # –ù–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not user.is_authenticated:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_type == cls.NotificationType.LIKE:
            # –õ–∞–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            # –ì–æ—Å—Ç–∏ –Ω–µ –º–æ–≥—É—Ç –ª–∞–π–∫–∞—Ç—å, –∑–Ω–∞—á–∏—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö –Ω–µ –Ω—É–∂–Ω—ã
            return user.role in ['user', 'moderator', 'owner', 'store_owner', 'store_admin']

        elif notification_type == cls.NotificationType.COMMENT:
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            return user.role in ['user', 'moderator', 'owner', 'store_owner', 'store_admin']

        elif notification_type == cls.NotificationType.FOLLOW:
            # –ü–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            return user.role in ['user', 'moderator', 'owner', 'store_owner', 'store_admin']

        elif notification_type == cls.NotificationType.MENTION:
            # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            return user.role in ['user', 'moderator', 'owner', 'store_owner', 'store_admin']

        elif notification_type == cls.NotificationType.CHAT_MESSAGE:
            # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            return user.role in ['user', 'moderator', 'owner', 'store_owner', 'store_admin']

        elif notification_type == cls.NotificationType.ORDER:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π)
            return True

        elif notification_type == cls.NotificationType.SYSTEM:
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return user.role in ['user', 'moderator', 'owner', 'store_owner', 'store_admin']

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–∞–µ–º
        return False

    def get_notification_type_display_verbose(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        type_descriptions = {
            'like': '–õ–∞–π–∫',
            'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            'follow': '–ü–æ–¥–ø–∏—Å–∫–∞',
            'mention': '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
            'system': '–°–∏—Å—Ç–µ–º–Ω–æ–µ',
            'order': '–ó–∞–∫–∞–∑',
            'chat_message': '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
        }
        return type_descriptions.get(self.notification_type, self.get_notification_type_display())

class UserProfile(models.Model):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name='profile_extra',
        verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    )

    # === –ü–û–õ–Ø –î–õ–Ø –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–†–û–õ–ï–ô ===
    temp_password = models.BooleanField(
        _("–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"),
        default=False,
        help_text=_("–û—Ç–º–µ—á–µ–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    )

    password_expires_at = models.DateTimeField(
        _("–ü–∞—Ä–æ–ª—å –∏—Å—Ç–µ–∫–∞–µ—Ç"),
        null=True,
        blank=True,
        help_text=_("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    birth_date = models.DateField(
        _("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"),
        null=True,
        blank=True
    )

    phone = models.CharField(
        _("–¢–µ–ª–µ—Ñ–æ–Ω"),
        max_length=20,
        blank=True
    )

    preferred_language = models.CharField(
        _("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫"),
        max_length=10,
        choices=[
            ('ru', '–†—É—Å—Å–∫–∏–π'),
            ('en', 'English'),
            ('ua', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'),
        ],
        default='ru'
    )

    timezone = models.CharField(
        _("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
        max_length=50,
        default='Europe/Moscow'
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    theme_preference = models.CharField(
        _("–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"),
        max_length=10,
        choices=[
            ('light', _('–°–≤–µ—Ç–ª–∞—è')),
            ('dark', _('–¢–µ–º–Ω–∞—è')),
            ('auto', _('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')),
        ],
        default='light'
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    favorite_strains = models.TextField(
        _("–õ—é–±–∏–º—ã–µ —Å–æ—Ä—Ç–∞"),
        blank=True,
        help_text=_("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Å–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    )

    growing_style = models.CharField(
        _("–°—Ç–∏–ª—å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"),
        max_length=50,
        choices=[
            ('indoor', _('üè† –ò–Ω–¥–æ—Ä')),
            ('outdoor', _('üåû –ê—É—Ç–¥–æ—Ä')),
            ('greenhouse', _('üè° –¢–µ–ø–ª–∏—Ü–∞')),
            ('mixed', _('üîÑ –°–º–µ—à–∞–Ω–Ω—ã–π')),
        ],
        blank=True
    )

    equipment = models.TextField(
        _("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"),
        blank=True,
        help_text=_("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è")
    )

    class Meta:
        verbose_name = _("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        verbose_name_plural = _("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")

    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å {self.user}"

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–†–û–õ–ï–ô ===
    def set_temp_password(self, valid_hours=24):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        from django.utils import timezone
        from datetime import timedelta
        self.temp_password = True
        self.password_expires_at = timezone.now() + timedelta(hours=valid_hours)
        self.save()

    def clear_temp_password(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        self.temp_password = False
        self.password_expires_at = None
        self.save()

    def is_temp_password_expired(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        if not self.temp_password or not self.password_expires_at:
            return False
        from django.utils import timezone
        return self.password_expires_at < timezone.now()
