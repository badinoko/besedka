from django.urls import reverse
from django.contrib.auth import get_user_model

UserModel = get_user_model()

def navigation_context(request):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        user = request.user # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_authenticated = user.is_authenticated # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        navigation_items = []
        admin_navigation_items = []
        user_role_badge = None
        unread_notifications_count = 0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0

        if is_authenticated:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
            navigation_items = get_user_navigation_items(user)
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            admin_navigation_items = get_admin_navigation_items(user)
            # –ü–æ–ª—É—á–∞–µ–º –±–µ–π–¥–∂ —Ä–æ–ª–∏
            user_role_badge = get_role_badge(user)
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –º–æ–¥–µ–ª–∏ User –µ—Å—Ç—å related_name 'notifications'
            # –∏ —É Notification –µ—Å—Ç—å –º–µ—Ç–æ–¥ unread_notifications_count –∏–ª–∏ –ø–æ—Ö–æ–∂–µ–µ —Å–≤–æ–π—Å—Ç–≤–æ
            # –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ user.notifications.filter(is_read=False).count()
            if hasattr(user, 'notifications'): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                try:
                    unread_notifications_count = user.notifications.filter(is_read=False).count()
                except Exception as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ related_name –¥—Ä—É–≥–æ–π –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞)
                    # –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º 0 –∏ –Ω–µ –ª–æ–º–∞–µ–º —Å–∞–π—Ç
                    print(f"Error getting unread notifications count: {e}") # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    unread_notifications_count = 0

        return {
            'navigation_items': navigation_items,
            'admin_navigation_items': admin_navigation_items,
            'user_role_badge': user_role_badge,
            'breadcrumb_context': get_breadcrumb_context(request),
            'unread_notifications_count': unread_notifications_count # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        }
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        print(f"Error in navigation_context: {e}")
        return {
            'navigation_items': [],
            'admin_navigation_items': [],
            'user_role_badge': None,
            'breadcrumb_context': [],
            'unread_notifications_count': 0
        }

def get_user_navigation_items(user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç role
    if not user.is_authenticated or not hasattr(user, 'role'):
        return []

    items = [
        {'title': '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'url': reverse('users:profile'), 'icon': 'fa-user-circle', 'type': 'personal'}
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º "–ú–æ–∏ –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç—ã" –¥–ª—è –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        my_growlogs_url = reverse('growlogs:my_logs')
    except:
        my_growlogs_url = '#'  # Fallback

    items.append(
        {'title': '–ú–æ–∏ –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç—ã', 'url': my_growlogs_url, 'icon': 'fa-seedling', 'type': 'user_activity'}
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–æ–ª–∏ 'user' –ø—É–Ω–∫—Ç—ã (–∑–∞–∫–∞–∑—ã, –≥–∞–ª–µ—Ä–µ—è)
    if user.role == 'user':
        try:
            my_orders_url = reverse('store:my_orders')
        except:
            my_orders_url = '#' # Fallback if URL doesn't exist
        try:
            my_gallery_url = reverse('gallery:my_photos')
        except:
            my_gallery_url = '#' # Fallback

        items.extend([
            {'title': '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'url': my_orders_url, 'icon': 'fa-shopping-bag', 'type': 'user_activity'},
            {'title': '–ú–æ—è –≥–∞–ª–µ—Ä–µ—è', 'url': my_gallery_url, 'icon': 'fa-images', 'type': 'user_activity'},
        ])

    return items

def get_admin_navigation_items(user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç role
    if not user.is_authenticated or not hasattr(user, 'role'):
        return []

    items = []

    if user.role == 'owner':
        items.extend([
            {'title': '–ê–¥–º–∏–Ω–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'url': '/owner_admin/', 'icon': 'fa-crown', 'type': 'admin_primary'},
            {'title': '–ê–¥–º–∏–Ω–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', 'url': '/moderator_admin/', 'icon': 'fa-shield-alt', 'type': 'admin_secondary'},
        ])
    elif user.role == 'admin':
        items.append(
            {'title': '–ê–¥–º–∏–Ω–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'url': '/moderator_admin/', 'icon': 'fa-shield-alt', 'type': 'admin_primary'}
        )
    elif user.role == 'store_owner':
        items.extend([
            {'title': '–ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞', 'url': '/store_owner/', 'icon': 'fa-store', 'type': 'admin_primary'},
            {'title': '–ê–¥–º–∏–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞', 'url': '/store_admin_site/', 'icon': 'fa-cash-register', 'type': 'admin_secondary'},
        ])
    elif user.role == 'store_admin':
        items.append(
            {'title': '–ê–¥–º–∏–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞', 'url': '/store_admin_site/', 'icon': 'fa-cash-register', 'type': 'admin_primary'}
        )

    return items

def get_role_badge(user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–π–¥–∂–∞ —Ä–æ–ª–∏"""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç role
    if not user.is_authenticated or not hasattr(user, 'role'):
        return None

    badges = {
        'owner': {'text': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü', 'class': 'bg-danger text-white', 'priority': 5},
        'admin': {'text': 'üé≠ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 'class': 'bg-warning text-dark', 'priority': 4},
        'store_owner': {'text': 'üè™ –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞', 'class': 'bg-success text-white', 'priority': 3},
        'store_admin': {'text': 'üì¶ –ê–¥–º–∏–Ω –º–∞–≥–∞–∑–∏–Ω–∞', 'class': 'bg-info text-white', 'priority': 2},
        'user': None  # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –±–µ–π–¥–∂–∞
    }
    return badges.get(user.role)

def get_breadcrumb_context(request):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ URL"""
    path = request.path
    breadcrumbs = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –ø–æ –ø—É—Ç–∏
    if path.startswith('/users/cabinet/'):
        breadcrumbs = [{'title': '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'url': reverse('users:profile')}]

        if path.endswith('/edit/'):
            breadcrumbs.append({'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', 'url': None})
        elif path.endswith('/password/'):
            breadcrumbs.append({'title': '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è', 'url': None})

    elif path.startswith('/owner_admin/'):
        breadcrumbs = [{'title': '–ê–¥–º–∏–Ω–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'url': '/owner_admin/'}]

    elif path.startswith('/moderator_admin/'):
        breadcrumbs = [{'title': '–ê–¥–º–∏–Ω–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'url': '/moderator_admin/'}]

    elif path.startswith('/store_owner/'):
        breadcrumbs = [{'title': '–ê–¥–º–∏–Ω–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞', 'url': '/store_owner/'}]

    elif path.startswith('/store_admin_site/'):
        breadcrumbs = [{'title': '–ê–¥–º–∏–Ω–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞', 'url': '/store_admin_site/'}]

    return breadcrumbs
