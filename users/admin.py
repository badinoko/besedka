from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.translation import gettext_lazy as _
from import_export.admin import ImportExportModelAdmin
from import_export import resources
from .models import User, BanRecord
from core.admin_site import owner_admin_site
from django import forms
from core.admin_mixins import UserAdminMixin, ModeratorAdminMixin
from django.contrib import messages

User._meta.verbose_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
User._meta.verbose_name_plural = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'

class UserResource(resources.ModelResource):
    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'telegram_id', 'role', 'name', 'is_active', 'is_banned')

# Inline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class BanRecordInline(admin.TabularInline):
    model = BanRecord
    extra = 0
    fk_name = 'user'  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'user' –∫–∞–∫ –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
    fields = ('ban_type', 'reason', 'created_at', 'expires_at', 'is_active')
    readonly_fields = ('created_at',)
    can_delete = False

    def has_add_permission(self, request, obj=None):
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–Ω—ã
        return request.user.is_superuser or request.user.role in ('owner', 'moderator')

    def has_change_permission(self, request, obj=None):
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –±–∞–Ω—ã
        return request.user.is_superuser or request.user.role in ('owner', 'moderator')

class SimpleRoleForm(forms.ModelForm):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""

    # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ä–æ–ª–µ–π
    is_platform_admin = forms.BooleanField(
        label='üé≠ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        required=False,
        help_text='–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
    )
    is_store_owner = forms.BooleanField(
        label='üè™ –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞',
        required=False,
        help_text='–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º: —Å–∫–ª–∞–¥, –ø–µ—Ä—Å–æ–Ω–∞–ª, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    )
    is_store_admin = forms.BooleanField(
        label='üì¶ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞',
        required=False,
        help_text='–¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º'
    )

    class Meta:
        model = User
        fields = ['username', 'email', 'name', 'is_active', 'is_banned']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.pk:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
            self.fields['is_platform_admin'].initial = (self.instance.role == 'moderator')
            self.fields['is_store_owner'].initial = (self.instance.role == 'store_owner')
            self.fields['is_store_admin'].initial = (self.instance.role == 'store_admin')

        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã
        self.fields['username'].help_text = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)'
        self.fields['email'].help_text = 'Email –∞–¥—Ä–µ—Å'
        self.fields['name'].help_text = '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è'

    def clean(self):
        cleaned_data = super().clean()
        is_platform_admin = cleaned_data.get('is_platform_admin')
        is_store_owner = cleaned_data.get('is_store_owner')
        is_store_admin = cleaned_data.get('is_store_admin')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–æ–ª—å
        roles_selected = sum([is_platform_admin, is_store_owner, is_store_admin])
        if roles_selected > 1:
            raise forms.ValidationError('–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ä–æ–ª—å!')

        return cleaned_data

    def save(self, commit=True):
        user = super().save(commit=False)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–µ–∫–±–æ–∫—Å–æ–≤
        if self.cleaned_data.get('is_platform_admin'):
            user.role = 'moderator'
            user.is_staff = True
        elif self.cleaned_data.get('is_store_owner'):
            user.role = 'store_owner'
            user.is_staff = True
        elif self.cleaned_data.get('is_store_admin'):
            user.role = 'store_admin'
            user.is_staff = True
        else:
            user.role = 'user'
            user.is_staff = False

        if commit:
            user.save()
        return user

class CustomUserAdmin(admin.ModelAdmin, UserAdminMixin):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    list_display = ['username', 'name', 'role', 'telegram_username', 'is_active', 'date_joined']
    list_filter = ['role', 'is_active', 'date_joined']
    search_fields = ['username', 'name', 'telegram_username']
    readonly_fields = ['date_joined', 'last_login']

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('username', 'name', 'telegram_username')
        }),
        ('–†–æ–ª—å –∏ –ø—Ä–∞–≤–∞', {
            'fields': ('role', 'is_active', 'is_staff')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('date_joined', 'last_login'),
            'classes': ('collapse',)
        }),
    )

    def get_readonly_fields(self, request, obj=None):
        """–ó–∞—â–∏—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        readonly = list(self.readonly_fields)

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å
        if obj and obj.username == 'owner_user':
            readonly.extend(['role', 'is_active', 'is_staff', 'username'])

        return readonly

    def has_delete_permission(self, request, obj=None):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if obj and obj.username == 'owner_user':
            return False
        return super().has_delete_permission(request, obj)

    def save_model(self, request, obj, form, change):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if obj.username == 'owner_user':
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            obj.role = 'owner'
            obj.is_active = True
            obj.is_staff = True
            obj.is_superuser = True

            if change:
                messages.warning(
                    request,
                    "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ê–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∑–∞—â–∏—â–µ–Ω –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π. "
                    "–†–æ–ª—å –∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
                )

        super().save_model(request, obj, form, change)

    def delete_model(self, request, obj):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ë–ª–æ–∫–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        if obj.username == 'owner_user':
            messages.error(
                request,
                "üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã! "
                "–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
            return
        super().delete_model(request, obj)

    def delete_queryset(self, request, queryset):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ë–ª–æ–∫–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        owner_in_queryset = queryset.filter(username='owner_user').exists()
        if owner_in_queryset:
            messages.error(
                request,
                "üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í –≤—ã–±–æ—Ä–∫–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã! "
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            )
            return
        super().delete_queryset(request, queryset)

    def get_form(self, request, obj=None, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º—É"""
        form = super().get_form(request, obj, **kwargs)

        if obj and obj.username == 'owner_user':
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ help_text
            if 'role' in form.base_fields:
                form.base_fields['role'].help_text = (
                    "üîí –ó–ê–©–ò–©–ï–ù–û: –†–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞"
                )
            if 'is_active' in form.base_fields:
                form.base_fields['is_active'].help_text = (
                    "üîí –ó–ê–©–ò–©–ï–ù–û: –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
                )

        return form

class BanRecordAdmin(admin.ModelAdmin, ModeratorAdminMixin):
    list_display = ('user', 'get_ban_type_display', 'reason_short', 'get_banned_by_display', 'created_at', 'expires_at', 'is_active')
    list_filter = ('ban_type', 'is_active', 'created_at')
    search_fields = ('user__username', 'user__name', 'reason')
    readonly_fields = ('created_at', 'banned_by')
    actions = ['revoke_selected_bans']

    fieldsets = (
        (None, {
            'fields': ('user', 'ban_type', 'reason')
        }),
        (_('üìÖ –°—Ä–æ–∫–∏'), {
            'fields': ('expires_at',),
            'description': '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –±–∞–Ω–∞'
        }),
        (_('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'), {
            'fields': ('created_at', 'banned_by', 'is_active'),
            'classes': ('collapse',)
        }),
    )

    def get_ban_type_display(self, obj):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –±–∞–Ω–æ–≤ —Å —ç–º–æ–¥–∑–∏"""
        ban_types = {
            'global': 'üö´ –ü–æ–ª–Ω—ã–π –±–∞–Ω',
            'chat': 'üí¨ –ë–∞–Ω —á–∞—Ç–∞',
            'gallery': 'üñºÔ∏è –ë–∞–Ω –≥–∞–ª–µ—Ä–µ–∏',
            'growlogs': 'üìù –ë–∞–Ω grow logs'
        }
        return ban_types.get(obj.ban_type, f'‚ùì {obj.ban_type}')
    get_ban_type_display.short_description = '–¢–∏–ø –±–∞–Ω–∞'

    def reason_short(self, obj):
        """–ö–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏—á–∏–Ω—ã"""
        if len(obj.reason) > 50:
            return obj.reason[:50] + '...'
        return obj.reason
    reason_short.short_description = '–ü—Ä–∏—á–∏–Ω–∞'

    def get_banned_by_display(self, obj):
        """–ö—Ç–æ –≤—ã–¥–∞–ª –±–∞–Ω"""
        if obj.banned_by:
            return f'üë§ {obj.banned_by.username}'
        return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    get_banned_by_display.short_description = '–ó–∞–±–∞–Ω–∏–ª'

    def revoke_selected_bans(self, request, queryset):
        """Action to revoke selected bans."""
        for ban in queryset:
            ban.revoke(request.user)

        self.message_user(request, _("Selected bans have been revoked."))
    revoke_selected_bans.short_description = _("Revoke selected bans")

    def save_model(self, request, obj, form, change):
        if not change:  # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
            obj.banned_by = request.user

        # –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if obj.ban_type == BanRecord.BAN_TYPE_GLOBAL and obj.is_active:
            obj.user.is_banned = True
            obj.user.save()

        super().save_model(request, obj, form, change)

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        # –í–ª–∞–¥–µ–ª–µ—Ü –∏ –∞–¥–º–∏–Ω—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–∏–¥—è—Ç –í–°–ï –±–∞–Ω—ã
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ —ç—Ç—É –∞–¥–º–∏–Ω–∫—É –≤–æ–æ–±—â–µ
        return qs

    def has_add_permission(self, request):
        # –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–Ω—ã
        return request.user.role in ('owner', 'moderator')

    def has_change_permission(self, request, obj=None):
        # –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –±–∞–Ω—ã
        if request.user.role == 'owner':
            return True  # –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ª—é–±—ã–µ –±–∞–Ω—ã
        if request.user.role == 'moderator':
            # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ª—é–±—ã–µ –±–∞–Ω—ã, –ù–û –ù–ï –ú–û–ñ–ï–¢ —Å–Ω—è—Ç—å –±–∞–Ω —Å —Å–µ–±—è
            if obj and obj.user == request.user and obj.banned_by != request.user:
                return False  # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å —Å —Å–µ–±—è –±–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ª–æ–∂–∏–ª owner
            return True  # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –±–∞–Ω—ã
        return False

    def has_delete_permission(self, request, obj=None):
        # –í–ª–∞–¥–µ–ª–µ—Ü –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –±–∞–Ω—ã
        # –ù–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –±–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –Ω–µ–≥–æ –Ω–∞–ª–æ–∂–∏–ª owner
        if request.user.role == 'owner':
            return True
        if request.user.role == 'moderator':
            if obj and obj.user == request.user and obj.banned_by != request.user:
                return False  # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –±–∞–Ω –æ—Ç owner
            return True
        return False

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–¢–û–õ–¨–ö–û —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏)
owner_admin_site.register(User, CustomUserAdmin)
# –£–±–∏—Ä–∞–µ–º –±–∞–Ω—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!
# owner_admin_site.register(BanRecord, BanRecordAdmin)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–±–∞–Ω—ã –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è)
from core.admin_site import moderator_admin_site
moderator_admin_site.register(BanRecord, BanRecordAdmin)

# –í –∞–¥–º–∏–Ω–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏—Ö –º–æ–¥–µ–ª–µ–π
# —Ç–∞–∫ –∫–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
