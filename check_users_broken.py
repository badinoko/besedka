#!/usr/bin/env python
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–õ–û–ú–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.local')
django.setup()

from django.contrib.auth import get_user_model

User = get_user_model()

def diagnose_broken_users():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª–æ–º–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–õ–û–ú–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 60)

    # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users = User.objects.all()
    print(f"üìä –í–°–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: {users.count()}")
    print()

    print("üìã –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
    for user in users:
        print(f"   {user.username}: —Ä–æ–ª—å='{user.role}', staff={user.is_staff}, super={user.is_superuser}, active={user.is_active}")
    print()

    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    expected_users = [
        ('owner', 'owner', True, True),
        ('admin', 'moderator', True, False),
        ('store_owner', 'store_owner', True, False),
        ('store_admin', 'store_admin', True, False),
        ('test_user', 'user', False, False)
    ]

    print("üîç –ü–†–û–í–ï–†–ö–ê –≠–¢–ê–õ–û–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
    problems = []

    for username, expected_role, expected_staff, expected_super in expected_users:
        try:
            user = User.objects.get(username=username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            issues = []
            if user.role != expected_role:
                issues.append(f"—Ä–æ–ª—å '{user.role}' != '{expected_role}'")
            if user.is_staff != expected_staff:
                issues.append(f"staff {user.is_staff} != {expected_staff}")
            if user.is_superuser != expected_super:
                issues.append(f"super {user.is_superuser} != {expected_super}")
            if not user.is_active:
                issues.append("–ù–ï –ê–ö–¢–ò–í–ï–ù")

            if issues:
                print(f"   ‚ùå {username}: {', '.join(issues)}")
                problems.append(username)
            else:
                print(f"   ‚úÖ {username}: –û–ö")

        except User.DoesNotExist:
            print(f"   ‚ùå {username}: –ù–ï –ù–ê–ô–î–ï–ù")
            problems.append(username)

    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π (–ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    print("üîë –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–ï–ô:")
    expected_passwords = [
        ('owner', 'owner123secure'),
        ('admin', 'admin123secure'),
        ('store_owner', 'storeowner123secure'),
        ('store_admin', 'storeadmin123secure'),
        ('test_user', 'user123secure')
    ]

    from django.contrib.auth import authenticate

    for username, password in expected_passwords:
        try:
            user = authenticate(username=username, password=password)
            if user:
                print(f"   ‚úÖ {username}: –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"   ‚ùå {username}: –ø–∞—Ä–æ–ª—å –ù–ï –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                problems.append(f"{username}_password")
        except Exception as e:
            print(f"   ‚ùå {username}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è - {e}")

    print()

    # –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑
    if problems:
        print("üí• –°–ò–°–¢–ï–ú–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –°–õ–û–ú–ê–ù–ê!")
        print(f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(problems)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        extra_users = users.exclude(username__in=[u[0] for u in expected_users])
        if extra_users.exists():
            print(f"üóëÔ∏è  –õ–ò–®–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò: {[u.username for u in extra_users]}")

        return False
    else:
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ü–û–†–Ø–î–ö–ï")
        return True

if __name__ == "__main__":
    diagnose_broken_users()
