from django.db import models
from django.conf import settings
from django.utils.translation import gettext_lazy as _
import uuid
from django.utils import timezone
from django.contrib.auth import get_user_model
from datetime import timedelta

User = get_user_model()


class Room(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞.
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(_("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"), max_length=100, unique=True, default='general')
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), default=timezone.now)
    is_active = models.BooleanField(default=True)

    class Meta:
        verbose_name = _("–ö–æ–º–Ω–∞—Ç–∞ —á–∞—Ç–∞")
        verbose_name_plural = _("–ö–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞")
        ordering = ["created_at"]

    def __str__(self):
        return self.name


class Message(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    room = models.ForeignKey(
        Room,
        on_delete=models.CASCADE,
        related_name="messages",
        verbose_name=_("–ö–æ–º–Ω–∞—Ç–∞")
    )
    author = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="messages",
        verbose_name=_("–ê–≤—Ç–æ—Ä")
    )
    content = models.TextField(_("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"))
    parent = models.ForeignKey(
        'self',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='replies',
        verbose_name=_("–û—Ç–≤–µ—Ç –Ω–∞")
    )
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), default=timezone.now, db_index=True)

    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    is_deleted = models.BooleanField(default=False, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ")
    is_edited = models.BooleanField(default=False, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
    edited_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                 related_name='edited_messages', help_text="–ö—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
    edited_at = models.DateTimeField(null=True, blank=True, help_text="–ö–æ–≥–¥–∞ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")

    is_forwarded = models.BooleanField(default=False, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º")
    original_message_id = models.CharField(max_length=50, null=True, blank=True,
                                         help_text="ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ")

    is_pinned = models.BooleanField(default=False, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ")
    pinned_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                 related_name='pinned_messages', help_text="–ö—Ç–æ –∑–∞–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
    pinned_at = models.DateTimeField(null=True, blank=True, help_text="–ö–æ–≥–¥–∞ –±—ã–ª–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ")

    class Meta:
        verbose_name = _("–°–æ–æ–±—â–µ–Ω–∏–µ")
        verbose_name_plural = _("–°–æ–æ–±—â–µ–Ω–∏—è")
        ordering = ["created_at"]

    def __str__(self):
        return f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {self.author} –≤ {self.room}"

    @property
    def is_reply(self):
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.parent is not None

    @property
    def likes_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        return self.reactions.filter(reaction_type='like').count()

    @property
    def dislikes_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        return self.reactions.filter(reaction_type='dislike').count()

    def get_user_reaction(self, user):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            reaction = self.reactions.get(user=user)
            return reaction.reaction_type
        except MessageReaction.DoesNotExist:
            return None

    def has_user_reacted(self, user):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.reactions.filter(user=user).exists()

    def get_editor_display_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        if not self.edited_by:
            return None
        return self.edited_by.display_name


class MessageReaction(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
    """
    REACTION_CHOICES = [
        ('like', _('–õ–∞–π–∫')),
        ('dislike', _('–î–∏–∑–ª–∞–π–∫')),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    message = models.ForeignKey(
        Message,
        on_delete=models.CASCADE,
        related_name='reactions',
        verbose_name=_("–°–æ–æ–±—â–µ–Ω–∏–µ")
    )
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='chat_reactions',
        verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    )
    reaction_type = models.CharField(
        _("–¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏"),
        max_length=10,
        choices=REACTION_CHOICES
    )
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), default=timezone.now)

    class Meta:
        verbose_name = _("–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        verbose_name_plural = _("–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        unique_together = ('message', 'user')  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–¥–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        indexes = [
            models.Index(fields=['message', 'reaction_type']),
            models.Index(fields=['user', 'created_at']),
        ]

    def __str__(self):
        return f"{self.user.display_name} - {self.get_reaction_type_display()} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {self.message.id}"

    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫–∞—Ä–º—ã"""
        is_new = self.pk is None
        super().save(*args, **kwargs)

        if is_new:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –±—É–¥—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"NEW REACTION: {self.user.username} {self.reaction_type}d message by {self.message.author.username}")


class UserChatPosition(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ –∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='chat_positions',
        verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    )
    room = models.ForeignKey(
        Room,
        on_delete=models.CASCADE,
        related_name='user_positions',
        verbose_name=_("–ö–æ–º–Ω–∞—Ç–∞")
    )
    last_read_at = models.DateTimeField(
        _("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è"),
        null=True,
        blank=True,
        help_text="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ. None –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )
    last_message_id = models.UUIDField(
        _("ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"),
        null=True,
        blank=True,
        help_text="UUID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª"
    )
    unread_count = models.PositiveIntegerField(
        _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"),
        default=0,
        help_text="–ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
    )
    updated_at = models.DateTimeField(
        _("–û–±–Ω–æ–≤–ª–µ–Ω–æ"),
        auto_now=True,
        help_text="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"
    )

    class Meta:
        verbose_name = _("–ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ")
        verbose_name_plural = _("–ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–∞—Ö")
        unique_together = ('user', 'room')  # –û–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç–µ
        indexes = [
            models.Index(fields=['user', 'room']),
            models.Index(fields=['last_read_at']),
            models.Index(fields=['unread_count']),
        ]

    def __str__(self):
        return f"{self.user.display_name} –≤ {self.room.name} (–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {self.unread_count})"

    def get_unread_messages_count(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.last_read_at:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï–¢ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è —á–∞—Ç–∞
            return 0

        return self.room.messages.filter(
            created_at__gt=self.last_read_at,
            is_deleted=False
        ).count()

    def mark_as_read(self, up_to_message=None, up_to_time=None):
        """
        –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
        """
        old_last_read_at = self.last_read_at

        if up_to_message:
            self.last_message_id = up_to_message.id
            self.last_read_at = up_to_message.created_at
        elif up_to_time:
            self.last_read_at = up_to_time
        else:
            self.last_read_at = timezone.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        self.unread_count = self.get_unread_messages_count()
        self.save()

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"Position updated for {self.user.username} in {self.room.name}: "
                   f"last_read_at {old_last_read_at} -> {self.last_read_at}, "
                   f"unread_count: {self.unread_count}")

    def get_first_unread_message(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None"""
        if not self.last_read_at:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï–¢ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è —á–∞—Ç–∞
            return None

        return self.room.messages.filter(
            created_at__gt=self.last_read_at,
            is_deleted=False
        ).order_by('created_at').first()

    @classmethod
    def get_or_create_for_user(cls, user, room):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        position, created = cls.objects.get_or_create(
            user=user,
            room=room,
            defaults={
                'last_read_at': None,
                'unread_count': 0
            }
        )

        return position
