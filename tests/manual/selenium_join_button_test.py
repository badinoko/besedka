#!/usr/bin/env python3
"""
üîç SELENIUM –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Join Channel
–°–æ–∑–¥–∞–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
–î–∞—Ç–∞: 23 –∏—é–Ω—è 2025
"""

import os
import sys
import time
import json
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

class JoinChannelDiagnostic:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8001"
        self.results = []

    def log(self, action, status, details=None):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        entry = {
            'time': timestamp,
            'action': action,
            'status': status,
            'details': details or {}
        }
        self.results.append(entry)

        print(f"üïí [{timestamp}] {action}: {status}")
        if details:
            for key, value in details.items():
                print(f"   ‚îî‚îÄ {key}: {value}")
        print()

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏"""
        chrome_options = Options()
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")

        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        chrome_options.set_capability('goog:loggingPrefs', {'browser': 'ALL'})

        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 15)

        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞", "Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    def take_screenshot(self, name):
        """–°–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"tests/manual/screenshots/{timestamp}_{name}.png"

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs("tests/manual/screenshots", exist_ok=True)

        self.driver.save_screenshot(filename)
        self.log("–°–∫—Ä–∏–Ω—à–æ—Ç", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω: {name}", {"file": filename})
        return filename

    def get_browser_console_logs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏"""
        try:
            logs = self.driver.get_log('browser')
            errors = [log for log in logs if log['level'] in ['SEVERE', 'WARNING']]
            return errors
        except:
            return []

    def login_as_owner(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ owner"""
        self.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")

        self.driver.get(f"{self.base_url}/accounts/login/")
        self.take_screenshot("01_login_page")

        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        username_field = self.wait.until(EC.presence_of_element_located((By.NAME, "login")))
        password_field = self.driver.find_element(By.NAME, "password")

        username_field.send_keys("owner")
        password_field.send_keys("owner123secure")

        self.take_screenshot("02_credentials_filled")

        # –í—Ö–æ–¥
        submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        submit_button.click()

        # –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        self.wait.until(EC.url_contains("/news/"))
        self.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–£–°–ü–ï–®–ù–û", {"url": self.driver.current_url})

    def navigate_to_chat(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç"""
        self.log("–ù–∞–≤–∏–≥–∞—Ü–∏—è", "–ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç")

        self.driver.get(f"{self.base_url}/chat/integrated/")

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ iframe
        time.sleep(5)
        self.take_screenshot("03_chat_page_loaded")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe
        try:
            iframe = self.wait.until(EC.presence_of_element_located((By.ID, "rocketChatFrame")))
            iframe_src = iframe.get_attribute("src")
            self.log("Iframe", "–ù–∞–π–¥–µ–Ω", {"src": iframe_src})
        except:
            self.log("Iframe", "–ù–ï –ù–ê–ô–î–ï–ù")

    def check_join_button_presence(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ Join"""
        try:
            iframe = self.driver.find_element(By.ID, "rocketChatFrame")
            self.driver.switch_to.frame(iframe)

            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Join
            join_elements = []

            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            selectors = [
                "[data-qa='join-channel']",
                "button[aria-label*='Join']",
                ".join-channel",
                "button:contains('Join')",
                "*[contains(text(), 'Join')]",
                "*[contains(text(), 'Channel not joined')]"
            ]

            for selector in selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        join_elements.extend([{
                            'selector': selector,
                            'text': el.text,
                            'visible': el.is_displayed()
                        } for el in elements])
                except:
                    pass

            # –ü–æ–∏—Å–∫ –ø–æ XPath –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            xpath_selectors = [
                "//*[contains(text(), 'Join')]",
                "//*[contains(text(), 'Channel not joined')]",
                "//button[contains(., 'Join')]"
            ]

            for xpath in xpath_selectors:
                try:
                    elements = self.driver.find_elements(By.XPATH, xpath)
                    if elements:
                        join_elements.extend([{
                            'xpath': xpath,
                            'text': el.text,
                            'visible': el.is_displayed(),
                            'tag': el.tag_name
                        } for el in elements])
                except:
                    pass

            self.driver.switch_to.default_content()

            if join_elements:
                self.log("Join Button", "üî¥ –ù–ê–ô–î–ï–ù", {"elements": join_elements})
                return True
            else:
                self.log("Join Button", "‚úÖ –ù–ï –ù–ê–ô–î–ï–ù")
                return False

        except Exception as e:
            self.driver.switch_to.default_content()
            self.log("Join Button", "–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò", {"error": str(e)})
            return False

    def test_channel_switching(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        channels = ["–û–±—â–∏–π", "VIP", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã"]

        for i, channel_name in enumerate(channels):
            self.log("–¢–ï–°–¢ –ö–ê–ù–ê–õ–ê", f"=== {channel_name} ===")

            # –°–∫—Ä–∏–Ω—à–æ—Ç –î–û
            self.take_screenshot(f"04_{i+1}_before_{channel_name}")

            # –õ–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏ –î–û
            console_before = self.get_browser_console_logs()

            try:
                # –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∫–∞–Ω–∞–ª–∞
                channel_button = self.wait.until(
                    EC.element_to_be_clickable((By.XPATH, f"//button[contains(text(), '{channel_name}')]"))
                )

                self.log("–ö–ª–∏–∫", f"–ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É {channel_name}")
                channel_button.click()

                # –ñ–¥–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ auto_join_fix.js
                time.sleep(8)

                # –°–∫—Ä–∏–Ω—à–æ—Ç –ü–û–°–õ–ï –∫–ª–∏–∫–∞
                self.take_screenshot(f"05_{i+1}_after_click_{channel_name}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º iframe URL
                iframe = self.driver.find_element(By.ID, "rocketChatFrame")
                iframe_src = iframe.get_attribute("src")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Join Button
                has_join = self.check_join_button_presence()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è auto_join –ø–æ–ø—ã—Ç–æ–∫ (15 x 1.5 —Å–µ–∫ = 22.5 —Å–µ–∫)
                self.log("–û–∂–∏–¥–∞–Ω–∏–µ", "Auto join –ø–æ–ø—ã—Ç–∫–∏ (22 —Å–µ–∫—É–Ω–¥—ã)")
                time.sleep(22)

                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                self.take_screenshot(f"06_{i+1}_final_{channel_name}")

                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Join Button
                final_has_join = self.check_join_button_presence()

                # –õ–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏ –ü–û–°–õ–ï
                console_after = self.get_browser_console_logs()
                new_errors = [log for log in console_after if log not in console_before]

                self.log("–†–ï–ó–£–õ–¨–¢–ê–¢", f"–ö–∞–Ω–∞–ª {channel_name}", {
                    "iframe_url": iframe_src,
                    "join_button_immediately": has_join,
                    "join_button_after_autojoin": final_has_join,
                    "new_console_errors": len(new_errors),
                    "error_messages": [log['message'][:100] for log in new_errors[:3]]
                })

            except Exception as e:
                self.log("–û–®–ò–ë–ö–ê", f"–ö–∞–Ω–∞–ª {channel_name}", {"exception": str(e)})
                self.take_screenshot(f"error_{i+1}_{channel_name}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"tests/manual/join_button_diagnostic_report_{timestamp}.json"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)

        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        join_button_found = sum(1 for r in self.results
                               if r['action'] == 'Join Button' and 'üî¥ –ù–ê–ô–î–ï–ù' in r['status'])

        total_channel_tests = sum(1 for r in self.results
                                 if r['action'] == '–¢–ï–°–¢ –ö–ê–ù–ê–õ–ê')

        print("="*60)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(self.results)}")
        print(f"üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π Join Button: {join_button_found}")
        print(f"üìÅ –¢–µ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤: {total_channel_tests}")
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: tests/manual/screenshots/")
        print("="*60)

        self.log("–û—Ç—á–µ—Ç", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", {"file": report_file})

    def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            print("üöÄ –ó–ê–ü–£–°–ö SELENIUM –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò JOIN CHANNEL")
            print("üéØ –¶–µ–ª—å: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Join Channel")
            print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: owner")
            print("üîç –ö–∞–Ω–∞–ª—ã: –û–±—â–∏–π, VIP, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã")
            print("-" * 60)

            self.setup_driver()
            self.login_as_owner()
            self.navigate_to_chat()
            self.test_channel_switching()
            self.generate_report()

            print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            return True

        except Exception as e:
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            self.log("–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê", str(e))
            return False

        finally:
            if hasattr(self, 'driver'):
                self.driver.quit()
                print("üîö Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    diagnostic = JoinChannelDiagnostic()
    success = diagnostic.run_full_diagnostic()

    if not success:
        print("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
