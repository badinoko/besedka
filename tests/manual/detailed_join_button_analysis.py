#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Join the Channel" –≤ Rocket.Chat
–î–∞—Ç–∞: 23 –∏—é–Ω—è 2025 –≥.
–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import time
import json
import logging
from datetime import datetime
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
log_dir = Path("tests/logs")
log_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'tests/logs/join_button_analysis_{timestamp}.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class JoinButtonAnalyzer:
    def __init__(self):
        self.timestamp = timestamp
        self.screenshots_dir = Path(f"tests/logs/screenshots_{timestamp}")
        self.screenshots_dir.mkdir(exist_ok=True)
        self.driver = None
        self.analysis_data = {
            "start_time": datetime.now().isoformat(),
            "screenshots": [],
            "join_button_states": [],
            "console_logs": [],
            "network_logs": [],
            "errors": []
        }
        self.screenshot_counter = 0

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞...")

        chrome_options = Options()
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--start-maximized")
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º headless - –Ω—É–∂–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π Chrome)
        chrome_options.add_argument("--enable-logging")
        chrome_options.add_argument("--log-level=0")
        chrome_options.set_capability("goog:loggingPrefs", {
            "browser": "ALL",
            "driver": "ALL",
            "performance": "ALL"
        })

        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            logger.info("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False

    def take_screenshot(self, description=""):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
        self.screenshot_counter += 1
        filename = f"screenshot_{self.screenshot_counter:03d}_{description.replace(' ', '_')}.png"
        filepath = self.screenshots_dir / filename

        try:
            self.driver.save_screenshot(str(filepath))
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

            self.analysis_data["screenshots"].append({
                "timestamp": datetime.now().isoformat(),
                "filename": filename,
                "description": description,
                "url": self.driver.current_url
            })
            return str(filepath)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None

    def collect_console_logs(self):
        """–°–±–æ—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logs = self.driver.get_log("browser")
            for log in logs:
                self.analysis_data["console_logs"].append({
                    "timestamp": datetime.now().isoformat(),
                    "level": log["level"],
                    "message": log["message"],
                    "source": log.get("source", "unknown")
                })
                logger.info(f"üîç Console [{log['level']}]: {log['message']}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏: {e}")

    def check_join_button_state(self, context=""):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Join Channel"""
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ Join Channel - {context}")

        state = {
            "timestamp": datetime.now().isoformat(),
            "context": context,
            "url": self.driver.current_url,
            "join_button_present": False,
            "join_button_visible": False,
            "join_button_text": "",
            "iframe_loaded": False,
            "channel_name": "unknown",
            "user_subscribed": False
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É iframe
            iframe = self.driver.find_element(By.ID, "rocketChatFrame")
            if iframe:
                state["iframe_loaded"] = True
                iframe_src = iframe.get_attribute("src")
                logger.info(f"üì° Iframe URL: {iframe_src}")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
                if "/channel/" in iframe_src:
                    channel_part = iframe_src.split("/channel/")[1].split("?")[0]
                    state["channel_name"] = channel_part

                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ iframe –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ Join
                self.driver.switch_to.frame(iframe)

                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ iframe
                time.sleep(3)

                # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ Join Channel —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                join_button_selectors = [
                    "button:contains('Join')",
                    "[data-qa='join-room']",
                    ".rcx-button--primary:contains('Join')",
                    "button[title*='Join']",
                    "*[class*='join']:contains('Join')",
                    "button"  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                ]

                for selector in join_button_selectors:
                    try:
                        if ":contains" in selector:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
                            buttons = self.driver.execute_script("""
                                return Array.from(document.querySelectorAll('button')).filter(btn =>
                                    btn.textContent.toLowerCase().includes('join')
                                );
                            """)
                            if buttons:
                                state["join_button_present"] = True
                                state["join_button_visible"] = True
                                state["join_button_text"] = buttons[0].text if buttons else ""
                                logger.info(f"üéØ –ù–ê–ô–î–ï–ù–ê –∫–Ω–æ–ø–∫–∞ Join: '{state['join_button_text']}'")
                                break
                        else:
                            elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            if elements:
                                for elem in elements:
                                    text = elem.text.lower()
                                    if "join" in text:
                                        state["join_button_present"] = True
                                        state["join_button_visible"] = elem.is_displayed()
                                        state["join_button_text"] = elem.text
                                        logger.info(f"üéØ –ù–ê–ô–î–ï–ù–ê –∫–Ω–æ–ø–∫–∞ Join: '{elem.text}'")
                                        break
                    except Exception as e:
                        continue

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                all_buttons = self.driver.execute_script("""
                    return Array.from(document.querySelectorAll('button')).map(btn => ({
                        text: btn.textContent.trim(),
                        visible: btn.offsetParent !== null,
                        classes: btn.className
                    }));
                """)

                logger.info(f"üìã –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ iframe: {all_buttons}")

                self.driver.switch_to.default_content()

            else:
                logger.warning("‚ö†Ô∏è Iframe –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ Join: {e}")
            self.driver.switch_to.default_content()

        self.analysis_data["join_button_states"].append(state)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        screenshot_desc = f"join_check_{context}_{state['join_button_present']}"
        self.take_screenshot(screenshot_desc)

        return state

    def login_as_owner(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º owner"""
        logger.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º owner...")

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            self.driver.get("http://127.0.0.1:8001/accounts/login/")
            self.take_screenshot("login_page")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            username_field = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.NAME, "login"))
            )
            username_field.clear()
            username_field.send_keys("owner")

            password_field = self.driver.find_element(By.NAME, "password")
            password_field.clear()
            password_field.send_keys("owner123secure")

            self.take_screenshot("login_form_filled")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            login_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            login_button.click()

            # –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            WebDriverWait(self.driver, 10).until(
                EC.url_contains("127.0.0.1:8001")
            )

            self.take_screenshot("after_login")
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.take_screenshot("login_error")
            return False

    def analyze_chat_behavior(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–∞—Ç–∞"""
        logger.info("üî¨ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–∞—Ç–∞...")

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç
            self.driver.get("http://127.0.0.1:8001/chat/integrated/")
            self.take_screenshot("chat_initial_load")

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(5)
            self.collect_console_logs()

            # –°–µ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
            for i in range(10):  # 10 –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 —Å–µ–∫—É–Ω–¥
                logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ #{i+1}/10")

                state = self.check_join_button_state(f"check_{i+1}")

                if state["join_button_present"]:
                    logger.warning(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Join –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ #{i+1}")
                else:
                    logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∞ Join –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ #{i+1}")

                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏
                if i % 3 == 0 and i > 0:
                    self.test_channel_switching()

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 3 –ø—Ä–æ–≤–µ—Ä–∫–∏
                if i % 3 == 2:
                    logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    self.driver.refresh()
                    time.sleep(3)
                    self.take_screenshot(f"after_refresh_{i+1}")

                self.collect_console_logs()
                time.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.analysis_data["errors"].append({
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "context": "analyze_chat_behavior"
            })

    def test_channel_switching(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤...")

        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            general_btn = self.driver.find_element(By.CSS_SELECTOR, "[data-channel='general']")
            vip_btn = self.driver.find_element(By.CSS_SELECTOR, "[data-channel='vip']")

            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ VIP
            logger.info("üì° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ VIP –∫–∞–Ω–∞–ª...")
            vip_btn.click()
            time.sleep(3)
            self.check_join_button_state("after_vip_switch")

            # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –æ–±—â–∏–π
            logger.info("üì° –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –æ–±—â–∏–π –∫–∞–Ω–∞–ª...")
            general_btn.click()
            time.sleep(3)
            self.check_join_button_state("after_general_switch")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")

    def save_analysis_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        self.analysis_data["end_time"] = datetime.now().isoformat()

        report_file = f"tests/logs/join_button_analysis_report_{self.timestamp}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.analysis_data, f, ensure_ascii=False, indent=2)

        logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        summary = {
            "total_checks": len(self.analysis_data["join_button_states"]),
            "join_button_appeared": sum(1 for state in self.analysis_data["join_button_states"] if state["join_button_present"]),
            "screenshots_taken": len(self.analysis_data["screenshots"]),
            "console_errors": len([log for log in self.analysis_data["console_logs"] if log["level"] == "SEVERE"]),
            "analysis_duration": self.analysis_data["end_time"]
        }

        logger.info(f"üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        logger.info(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {summary['total_checks']}")
        logger.info(f"   - –ü–æ—è–≤–ª–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏ Join: {summary['join_button_appeared']}")
        logger.info(f"   - –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {summary['screenshots_taken']}")
        logger.info(f"   - –û—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏: {summary['console_errors']}")

        return report_file

    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ö–ù–û–ü–ö–ò JOIN CHANNEL")
        logger.info("=" * 80)

        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            if not self.setup_driver():
                return False

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.login_as_owner():
                return False

            # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            self.analyze_chat_behavior()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_file = self.save_analysis_report()

            logger.info("=" * 80)
            logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏: {self.screenshots_dir}")
            logger.info(f"üìÑ –§–∞–π–ª –æ—Ç—á–µ—Ç–∞: {report_file}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {e}")
            return False
        finally:
            if self.driver:
                input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑...")
                self.driver.quit()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = JoinButtonAnalyzer()
    success = analyzer.run_full_analysis()

    if success:
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
