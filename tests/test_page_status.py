#!/usr/bin/env python3
"""
üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç HTTP —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 500 –æ—à–∏–±–æ–∫
"""

import requests
import sys
from urllib.parse import urljoin

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://127.0.0.1:8001"
TIMEOUT = 10

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# 200 = –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# 302 = —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ login)
PAGES_TO_TEST = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    ('/', 200, '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
    ('/news/', 200, '–ù–æ–≤–æ—Å—Ç–∏'),
    ('/gallery/', 200, '–ì–∞–ª–µ—Ä–µ—è'),
    ('/growlogs/', 200, '–ì—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç—ã'),
    ('/store/', 200, '–ú–∞–≥–∞–∑–∏–Ω'),

    # –ß–∞—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    ('/chat/', 302, '–ì–ª–∞–≤–Ω–∞—è —á–∞—Ç–∞'),
    ('/chat/integrated/', 302, '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç'),
    ('/chat/test/', 302, 'üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞'),

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    ('/accounts/login/', 200, '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞'),
]

def test_page_status(url_path, expected_status, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTP —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    full_url = urljoin(BASE_URL, url_path)

    try:
        response = requests.get(full_url, timeout=TIMEOUT, allow_redirects=False)
        actual_status = response.status_code

        if actual_status == expected_status:
            print(f"‚úÖ {description}: {actual_status} - {url_path}")
            return True
        elif actual_status == 500:
            print(f"‚ùå {description}: 500 SERVER ERROR - {url_path}")
            return False
        else:
            print(f"‚ö†Ô∏è {description}: {actual_status} (–æ–∂–∏–¥–∞–ª—Å—è {expected_status}) - {url_path}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –Ω–æ –Ω–µ 500

    except requests.exceptions.ConnectionError:
        print(f"‚ùå {description}: CONNECTION ERROR - –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {url_path}")
        return False
    except requests.exceptions.Timeout:
        print(f"‚ùå {description}: TIMEOUT - {url_path}")
        return False
    except Exception as e:
        print(f"‚ùå {description}: ERROR - {str(e)} - {url_path}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTTP –°–¢–ê–¢–£–°–û–í")
    print("=" * 60)

    success_count = 0
    total_count = len(PAGES_TO_TEST)

    for url_path, expected_status, description in PAGES_TO_TEST:
        if test_page_status(url_path, expected_status, description):
            success_count += 1

    print("=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç")

    if success_count == total_count:
        print("üéâ –í–°–ï –°–¢–†–ê–ù–ò–¶–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        return 0
    else:
        failed_count = total_count - success_count
        print(f"‚ö†Ô∏è {failed_count} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())
