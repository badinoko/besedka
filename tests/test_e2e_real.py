#!/usr/bin/env python
"""
–ù–ê–°–¢–û–Ø–©–ò–ï E2E –¢–ï–°–¢–´ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —á–∞—Ç–∞
"""
import os
import sys
import django
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from django.test.utils import override_settings
from django.db import transaction
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local")
django.setup()

from users.models import Notification
from chat.models import ChatMessage

User = get_user_model()


class NotificationE2ETest(TestCase):
    """–ù–∞—Å—Ç–æ—è—â–∏–µ E2E —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.client = Client()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        self.client.login(username='testuser', password='testpass123')

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notifications = []
        for i in range(5):
            notification = Notification.objects.create(
                recipient=self.user,
                notification_type='test',
                title=f'–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i+1}',
                message=f'–°–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {i+1}',
                is_read=(i == 0)  # –ü–µ—Ä–≤–æ–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ—Ç
            )
            self.notifications.append(notification)

    def test_notification_counter_in_header(self):
        """–¢–µ—Å—Ç: —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —à–∞–ø–∫–µ"""
        print("\nüîî –¢–ï–°–¢: –°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —à–∞–ø–∫–µ")

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        unread_count = response.context.get('unread_notifications_count', 0)
        print(f"   –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {unread_count}")

        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (5 –≤—Å–µ–≥–æ - 1 –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
        expected_unread = 4
        self.assertEqual(unread_count, expected_unread,
                        f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_unread} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–æ {unread_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ HTML –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫
        html_content = response.content.decode('utf-8')
        self.assertIn('badge rounded-pill bg-danger', html_content,
                     "–í HTML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫")
        self.assertIn(str(expected_unread), html_content,
                     f"–í HTML –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞ {expected_unread}")

        print(f"   ‚úÖ –°—á–µ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {expected_unread}")

    def test_notification_list_page(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\nüìã –¢–ï–°–¢: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        url = reverse('users:notification_list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
        notifications_in_context = response.context.get('notifications', [])
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(notifications_in_context)}")
        self.assertEqual(len(notifications_in_context), 5,
                        "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        html_content = response.content.decode('utf-8')
        for notification in self.notifications:
            self.assertIn(notification.title, html_content,
                         f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{notification.title}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ HTML")

        print("   ‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_mark_all_as_read(self):
        """–¢–µ—Å—Ç: –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ'"""
        print("\n‚úÖ –¢–ï–°–¢: –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        unread_before = Notification.objects.filter(recipient=self.user, is_read=False).count()
        print(f"   –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {unread_before}")
        self.assertEqual(unread_before, 4)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–µ—Ç–∫—É –≤—Å–µ—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        url = reverse('users:mark_all_notifications_read')
        response = self.client.post(url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        self.assertEqual(response.status_code, 302)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
        unread_after = Notification.objects.filter(recipient=self.user, is_read=False).count()
        print(f"   –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {unread_after}")
        self.assertEqual(unread_after, 0, "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏")

        print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_delete_notification(self):
        """–¢–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        print("\nüóëÔ∏è –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        notification_to_delete = self.notifications[0]
        total_before = Notification.objects.filter(recipient=self.user).count()
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {total_before}")

        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        url = reverse('users:delete_notification', kwargs={'notification_id': notification_to_delete.pk})
        response = self.client.post(url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.assertEqual(response.status_code, 200)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        total_after = Notification.objects.filter(recipient=self.user).count()
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {total_after}")
        self.assertEqual(total_after, total_before - 1, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        self.assertFalse(
            Notification.objects.filter(pk=notification_to_delete.pk).exists(),
            "–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        )

        print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class ChatE2ETest(TestCase):
    """–ù–∞—Å—Ç–æ—è—â–∏–µ E2E —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞"""

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.client = Client()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User.objects.create_user(
            username='chatuser',
            email='chat@example.com',
            password='testpass123'
        )

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        self.client.login(username='chatuser', password='testpass123')

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages = []
        for i in range(3):
            message = ChatMessage.objects.create(
                author=self.user,
                text=f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} üí¨'
            )
            self.messages.append(message)

    def test_chat_page_loads(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        print("\nüí¨ –¢–ï–°–¢: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–∞")

        # url = reverse('chat:chat')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
        html_content = response.content.decode('utf-8')
        for message in self.messages:
            self.assertIn(message.text, html_content,
                         f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ HTML")

        print(f"   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è {len(self.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    def test_chat_message_creation(self):
        """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        print("\nüìù –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_before = ChatMessage.objects.count()
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {messages_before}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–∏–º–∏—Ç–∏—Ä—É—è WebSocket)
        new_message = ChatMessage.objects.create(
            author=self.user,
            text='–ù–æ–≤–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ E2E —Ç–µ—Å—Ç! üöÄ'
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        messages_after = ChatMessage.objects.count()
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {messages_after}")
        self.assertEqual(messages_after, messages_before + 1, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.assertEqual(new_message.author, self.user, "–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")
        self.assertIn('E2E —Ç–µ—Å—Ç', new_message.text, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'E2E —Ç–µ—Å—Ç'")

        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_chat_messages_display(self):
        """–¢–µ—Å—Ç: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        print("\nüëÄ –¢–ï–°–¢: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ")

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        special_message = ChatMessage.objects.create(
            author=self.user,
            text='–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üéØ'
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
        # url = reverse('chat:chat')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        html_content = response.content.decode('utf-8')
        self.assertIn(special_message.text, html_content,
                     "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        self.assertIn(self.user.username, html_content,
                     "–ò–º—è –∞–≤—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è")

        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —á–∞—Ç–µ")


def run_e2e_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ù–ê–°–¢–û–Ø–©–ò–• E2E –¢–ï–°–¢–û–í")
    print("=" * 50)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django test runner
    from django.test.utils import get_runner
    from django.conf import settings

    # –ü–æ–ª—É—á–∞–µ–º test runner
    TestRunner = get_runner(settings)
    test_runner = TestRunner(verbosity=2, interactive=False, keepdb=False)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    failures = test_runner.run_tests([
        'tests.test_e2e_real.NotificationE2ETest',
        'tests.test_e2e_real.ChatE2ETest'
    ])

    if failures:
        print(f"\n‚ùå –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò: {failures}")
        return False
    else:
        print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_e2e_tests()
    sys.exit(0 if success else 1)
