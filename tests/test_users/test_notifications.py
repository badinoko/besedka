from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth import get_user_model
from users.models import Notification
from core.notification_service import NotificationService

User = get_user_model()

class NotificationSystemTest(TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    @classmethod
    def setUpTestData(cls):
        cls.user = User.objects.create_user(
            username='test_user',
            password='testpass123',
            role='user',
            email='user@test.com'
        )
        cls.admin = User.objects.create_user(
            username='test_admin',
            password='testpass123',
            role='admin',
            email='admin@test.com'
        )

    def setUp(self):
        self.client = Client()

    def test_notification_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification = Notification.objects.create(
            recipient=self.user,
            sender=self.admin,
            notification_type='system',
            title='–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            message='–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        )

        self.assertEqual(notification.recipient, self.user)
        self.assertEqual(notification.sender, self.admin)
        self.assertEqual(notification.title, '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        self.assertFalse(notification.is_read)

    def test_notification_list_view(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Notification.objects.create(
            recipient=self.user,
            notification_type='system',
            title='–¢–µ—Å—Ç',
            message='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        )

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        self.client.login(username='test_user', password='testpass123')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        response = self.client.get(reverse('users:notification_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '–¢–µ—Å—Ç')
        self.assertContains(response, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    def test_mark_notification_read(self):
        """–¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ"""
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = Notification.objects.create(
            recipient=self.user,
            notification_type='system',
            title='–¢–µ—Å—Ç',
            message='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        )

        self.assertFalse(notification.is_read)

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        self.client.login(username='test_user', password='testpass123')

        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        response = self.client.get(
            reverse('users:mark_notification_read', args=[notification.id])
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        self.assertEqual(response.status_code, 302)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        notification.refresh_from_db()
        self.assertTrue(notification.is_read)

    def test_mark_all_notifications_read(self):
        """–¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for i in range(3):
            Notification.objects.create(
                recipient=self.user,
                notification_type='system',
                title=f'–¢–µ—Å—Ç {i}',
                message=f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}'
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        self.assertEqual(
            self.user.notifications.filter(is_read=False).count(), 3
        )

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        self.client.login(username='test_user', password='testpass123')

        # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º POST –≤–º–µ—Å—Ç–æ GET)
        response = self.client.post(reverse('users:mark_all_notifications_read'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        self.assertEqual(response.status_code, 302)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        self.assertEqual(
            self.user.notifications.filter(is_read=False).count(), 0
        )

    def test_notification_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        count = NotificationService.notify_admins(
            title="–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞",
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.assertTrue(count > 0)
        admin_notification = self.admin.notifications.filter(
            title="–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞"
        ).first()
        self.assertIsNotNone(admin_notification)
        self.assertEqual(admin_notification.message, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞")

    def test_unread_notifications_count(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for i in range(5):
            Notification.objects.create(
                recipient=self.user,
                notification_type='system',
                title=f'–¢–µ—Å—Ç {i}',
                message=f'–°–æ–æ–±—â–µ–Ω–∏–µ {i}'
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.assertEqual(self.user.unread_notifications_count, 5)

        # –ü–æ–º–µ—á–∞–µ–º –æ–¥–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        notification = self.user.notifications.first()
        notification.is_read = True
        notification.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        self.assertEqual(self.user.unread_notifications_count, 4)

    def test_notification_type_icon(self):
        """–¢–µ—Å—Ç –∏–∫–æ–Ω–æ–∫ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notification = Notification.objects.create(
            recipient=self.user,
            notification_type='like',
            title='–õ–∞–π–∫',
            message='–í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫'
        )

        self.assertEqual(notification.type_icon, 'üëç')

        notification.notification_type = 'comment'
        self.assertEqual(notification.type_icon, 'üí¨')

        notification.notification_type = 'system'
        self.assertEqual(notification.type_icon, '‚öôÔ∏è')
