from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from core.notification_service import NotificationService, AdminAlertService

User = get_user_model()


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--mode',
            type=str,
            default='basic',
            choices=['basic', 'security', 'performance', 'all'],
            help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: basic, security, performance, all'
        )

    def handle(self, *args, **options):
        mode = options['mode']

        self.stdout.write(
            self.style.SUCCESS(f'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ä–µ–∂–∏–º: {mode})')
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_count = User.objects.filter(
            role__in=['owner', 'admin', 'store_owner', 'store_admin'],
            is_active=True
        ).count()

        if admin_count == 0:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!')
            )
            return

        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {admin_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
        )

        if mode in ['basic', 'all']:
            self._test_basic_notifications()

        if mode in ['security', 'all']:
            self._test_security_alerts()

        if mode in ['performance', 'all']:
            self._test_performance_alerts()

        self.stdout.write(
            self.style.SUCCESS('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        )

    def _test_basic_notifications(self):
        self.stdout.write('\nüìÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')

        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        result = NotificationService.test_notification_system()
        self.stdout.write(f'  ‚úÖ {result}')

        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
        count = NotificationService.notify_store_admins(
            title="üè™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞"
        )
        self.stdout.write(f'  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')

        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        count = NotificationService.notify_platform_admins(
            title="‚öôÔ∏è –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        )
        self.stdout.write(f'  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')

    def _test_security_alerts(self):
        self.stdout.write('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')

        # –¢–µ—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        severities = ['low', 'medium', 'high', 'critical']

        for severity in severities:
            count = AdminAlertService.security_alert(
                message=f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è {severity}",
                severity=severity
            )
            self.stdout.write(f'  ‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ {severity} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')

    def _test_performance_alerts(self):
        self.stdout.write('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')

        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        test_metrics = [
            ("CPU Usage", "85%", "80%"),
            ("Memory Usage", "92%", "90%"),
            ("Database Response Time", "2.5s", "2.0s"),
            ("API Response Time", "1.8s", "1.5s"),
        ]

        for metric, value, threshold in test_metrics:
            count = AdminAlertService.performance_alert(metric, value, threshold)
            self.stdout.write(f'  ‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ "{metric}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')

        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏
        count = AdminAlertService.system_error_alert(
            error_details="–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            component="Database"
        )
        self.stdout.write(f'  ‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
