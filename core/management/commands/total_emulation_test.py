#!/usr/bin/env python
"""
üöÄ TOTAL EMULATION TEST - –¢–æ—Ç–∞–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–∞—Ö

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è:
- –í–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ store_owner –∞–¥–º–∏–Ω–∫–µ
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ store_admin –∞–¥–º–∏–Ω–∫–µ
- –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã, –∫–ª–∏–∫–∏, —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
- –ü—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏ —Ñ–æ—Ä–º
- –°–±–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫

–ó–∞–ø—É—Å–∫: python manage.py total_emulation_test
"""

import os
import sys
import time
import json
import logging
from datetime import datetime
from django.core.management.base import BaseCommand
from django.test import Client, override_settings
from django.contrib.auth import get_user_model
from django.urls import reverse
from django.conf import settings
from django.db import transaction
from django.core.management import call_command
from django.apps import apps

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_formatter = logging.Formatter(
    '[%(asctime)s] [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

class Command(BaseCommand):
    help = 'üöÄ TOTAL EMULATION TEST - –¢–æ—Ç–∞–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–∞—Ö'

    def __init__(self):
        super().__init__()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django Test Client —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–æ—Å—Ç–æ–º
        self.client = Client(SERVER_NAME='127.0.0.1')

        self.test_results = {
            'start_time': datetime.now().isoformat(),
            'store_owner_tests': [],
            'store_admin_tests': [],
            'errors': [],
            'summary': {}
        }
        self.setup_logging()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        log_dir = os.path.join(settings.BASE_DIR, 'logs')
        os.makedirs(log_dir, exist_ok=True)

        log_file = os.path.join(log_dir, f'total_emulation_test_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger('emulation_test')
        self.logger.setLevel(logging.DEBUG)

        # –§–∞–π–ª-—Ö–µ–Ω–¥–ª–µ—Ä
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(log_formatter)
        self.logger.addHandler(file_handler)

        # –ö–æ–Ω—Å–æ–ª—å-—Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(log_formatter)
        self.logger.addHandler(console_handler)

        self.log_file = log_file

    def add_arguments(self, parser):
        parser.add_argument(
            '--role',
            type=str,
            choices=['store_owner', 'store_admin', 'all'],
            default='all',
            help='–ö–∞–∫—É—é —Ä–æ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (default: all)'
        )
        parser.add_argument(
            '--create-test-data',
            action='store_true',
            help='–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º'
        )

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        self.logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú TOTAL EMULATION TEST")
        self.logger.info("=" * 80)

        role_to_test = options.get('role', 'all')
        create_test_data = options.get('create_test_data', False)

        try:
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
            if create_test_data:
                self.create_test_data()

            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self.get_test_users()

            # 3. –≠–º—É–ª—è—Ü–∏—è –¥–ª—è store_owner
            if role_to_test in ['store_owner', 'all']:
                self.logger.info("\nüè™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù–ö–ò –í–õ–ê–î–ï–õ–¨–¶–ê –ú–ê–ì–ê–ó–ò–ù–ê")
                self.logger.info("-" * 60)
                self.emulate_store_owner(users['store_owner'])

            # 4. –≠–º—É–ª—è—Ü–∏—è –¥–ª—è store_admin
            if role_to_test in ['store_admin', 'all']:
                self.logger.info("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ú–ê–ì–ê–ó–ò–ù–ê")
                self.logger.info("-" * 60)
                self.emulate_store_admin(users['store_admin'])

            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.generate_report()

        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –≠–ú–£–õ–Ø–¶–ò–ò: {e}", exc_info=True)
            self.test_results['errors'].append({
                'type': 'CRITICAL_ERROR',
                'message': str(e),
                'time': datetime.now().isoformat()
            })

        finally:
            self.logger.info(f"\nüìÑ –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò –°–û–•–†–ê–ù–ï–ù–´ –í: {self.log_file}")
            self.logger.info("üèÅ TOTAL EMULATION TEST –ó–ê–í–ï–†–®–ï–ù")

    def create_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏"""
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        User = get_user_model()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            with transaction.atomic():
                # –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞
                store_owner, created = User.objects.get_or_create(
                    username='test_store_owner',
                    defaults={
                        'name': '–¢–µ—Å—Ç–æ–≤—ã–π –í–ª–∞–¥–µ–ª–µ—Ü –ú–∞–≥–∞–∑–∏–Ω–∞',
                        'role': 'store_owner',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '11111111'
                    }
                )
                if created:
                    self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞")

                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
                store_admin, created = User.objects.get_or_create(
                    username='test_store_admin',
                    defaults={
                        'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ú–∞–≥–∞–∑–∏–Ω–∞',
                        'role': 'store_admin',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '22222222'
                    }
                )
                if created:
                    self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞")

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
                self.create_store_test_data()

                # –ù–∞–∑–Ω–∞—á–∞–µ–º permissions –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                self.assign_store_permissions(store_owner, store_admin)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def create_store_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞
            SeedBank = apps.get_model('magicbeans_store', 'SeedBank')
            Strain = apps.get_model('magicbeans_store', 'Strain')
            StockItem = apps.get_model('magicbeans_store', 'StockItem')

            # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–¥–±–∞–Ω–∫
            seedbank, created = SeedBank.objects.get_or_create(
                name='Test SeedBank',
                defaults={
                    'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–¥–±–∞–Ω–∫ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏',
                    'website': 'https://test-seedbank.com'
                }
            )
            if created:
                self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–¥–±–∞–Ω–∫")

            # –¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç
            strain, created = Strain.objects.get_or_create(
                name='Test Strain',
                defaults={
                    'seedbank': seedbank,
                    'strain_type': 'indica',
                    'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏'
                }
            )
            if created:
                self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç")

            # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            stock_item, created = StockItem.objects.get_or_create(
                strain=strain,
                defaults={
                    'quantity': 100,
                    'price': 1000.00,
                    'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏'
                }
            )
            if created:
                self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞: {e}")

    def assign_store_permissions(self, store_owner, store_admin):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ permissions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º"""
        from django.contrib.auth.models import Permission
        from django.contrib.contenttypes.models import ContentType

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ permissions –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è magicbeans_store
            store_permissions = Permission.objects.filter(
                content_type__app_label='magicbeans_store'
            )

            # –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç –í–°–ï permissions
            store_owner.user_permissions.set(store_permissions)
            self.logger.info(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ {store_permissions.count()} permissions –≤–ª–∞–¥–µ–ª—å—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞")

            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç permissions –∫—Ä–æ–º–µ delete
            admin_permissions = store_permissions.exclude(
                codename__startswith='delete_'
            )
            store_admin.user_permissions.set(admin_permissions)
            self.logger.info(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ {admin_permissions.count()} permissions –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è permissions: {e}")

    def get_test_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        User = get_user_model()

        try:
            users = {
                'store_owner': User.objects.get(username='test_store_owner'),
                'store_admin': User.objects.get(username='test_store_admin')
            }
            self.logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")
            return users
        except User.DoesNotExist as e:
            self.logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
            self.logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Ñ–ª–∞–≥–æ–º --create-test-data")
            sys.exit(1)

    def emulate_store_owner(self, user):
        """–≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.logger.info(f"üîë –í—Ö–æ–¥–∏–º –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞: {user.username}")

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self.client.force_login(user)

        # –°–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –¢–û–õ–¨–ö–û —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        test_urls = [
            {'url': '/store_owner/', 'name': '–ì–ª–∞–≤–Ω–∞—è store_owner', 'expected_status': 200},
            {'url': '/users/manage-admins/', 'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', 'expected_status': 200},
            # –£–±–∏—Ä–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ URL - –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤ store_admin
        ]

        for test_case in test_urls:
            self.test_url_access(test_case, 'store_owner')

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
        self.test_creation_forms('store_owner', user)

    def emulate_store_admin(self, user):
        """–≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.logger.info(f"üîë –í—Ö–æ–¥–∏–º –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞: {user.username}")

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self.client.force_login(user)

        # –°–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_urls = [
            {'url': '/store_admin/', 'name': '–ì–ª–∞–≤–Ω–∞—è store_admin', 'expected_status': 200},
            {'url': '/store_admin/magicbeans_store/seedbank/', 'name': '–°–ø–∏—Å–æ–∫ —Å–∏–¥–±–∞–Ω–∫–æ–≤', 'expected_status': 200},
            {'url': '/store_admin/magicbeans_store/strain/', 'name': '–°–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤', 'expected_status': 200},
            {'url': '/store_admin/magicbeans_store/stockitem/', 'name': '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', 'expected_status': 200},
        ]

        for test_case in test_urls:
            self.test_url_access(test_case, 'store_admin')

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        self.test_creation_forms('store_admin', user)

    def test_url_access(self, test_case, role):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ URL"""
        url = test_case['url']
        name = test_case['name']
        expected_status = test_case['expected_status']

        self.logger.info(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {name} ({url})")

        try:
            start_time = time.time()
            response = self.client.get(url)
            end_time = time.time()
            response_time = round((end_time - start_time) * 1000, 2)

            result = {
                'url': url,
                'name': name,
                'expected_status': expected_status,
                'actual_status': response.status_code,
                'response_time_ms': response_time,
                'success': response.status_code == expected_status,
                'time': datetime.now().isoformat()
            }

            if response.status_code == expected_status:
                self.logger.info(f"   ‚úÖ –£–°–ü–ï–•: {response.status_code} ({response_time}ms)")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if hasattr(response, 'content'):
                    content = response.content.decode('utf-8', errors='ignore')
                    self.check_page_elements(content, result)

            else:
                self.logger.error(f"   ‚ùå –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                if hasattr(response, 'content'):
                    error_content = response.content.decode('utf-8', errors='ignore')[:500]
                    result['error_content'] = error_content

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if role == 'store_owner':
                self.test_results['store_owner_tests'].append(result)
            else:
                self.test_results['store_admin_tests'].append(result)

        except Exception as e:
            self.logger.error(f"   üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            error_result = {
                'url': url,
                'name': name,
                'error': str(e),
                'time': datetime.now().isoformat()
            }
            self.test_results['errors'].append(error_result)

    def check_page_elements(self, content, result):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        checks = {
            'has_title': '<title>' in content,
            'has_navigation': 'nav' in content.lower(),
            'has_user_menu': 'user-menu' in content or 'user-dropdown' in content,
            'has_error_500': '500' in content and 'error' in content.lower(),
            'has_error_404': '404' in content and 'not found' in content.lower(),
            'has_form_errors': 'errorlist' in content,
        }

        result['page_checks'] = checks

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        if checks['has_error_500']:
            self.logger.warning("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ 500 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        if checks['has_error_404']:
            self.logger.warning("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ 404 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        if checks['has_form_errors']:
            self.logger.warning("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

    def test_creation_forms(self, role, user):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π"""
        self.logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è {role}")

        if role == 'store_owner':
            admin_prefix = '/store_owner'
            # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
            creation_urls = [
                # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∑–∂–µ
            ]
        else:  # store_admin
            admin_prefix = '/store_admin'
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        creation_urls = [
            f'{admin_prefix}/magicbeans_store/seedbank/add/',
            f'{admin_prefix}/magicbeans_store/strain/add/',
            f'{admin_prefix}/magicbeans_store/stockitem/add/',
        ]

        for url in creation_urls:
            self.logger.info(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è: {url}")
            try:
                response = self.client.get(url)
                if response.status_code == 200:
                    self.logger.info(f"   ‚úÖ –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
                    content = response.content.decode('utf-8', errors='ignore')
                    if 'csrfmiddlewaretoken' in content:
                        self.logger.info(f"   ‚úÖ CSRF —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
                    else:
                        self.logger.warning(f"   ‚ö†Ô∏è  CSRF —Ç–æ–∫–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω")

                else:
                    self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã: {response.status_code}")

            except Exception as e:
                self.logger.error(f"   üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã: {e}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.logger.info("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–ï–¢–ê")
        self.logger.info("=" * 60)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        store_owner_success = sum(1 for test in self.test_results['store_owner_tests'] if test.get('success', False))
        store_owner_total = len(self.test_results['store_owner_tests'])

        store_admin_success = sum(1 for test in self.test_results['store_admin_tests'] if test.get('success', False))
        store_admin_total = len(self.test_results['store_admin_tests'])

        total_errors = len(self.test_results['errors'])

        summary = {
            'store_owner': {
                'success': store_owner_success,
                'total': store_owner_total,
                'success_rate': round((store_owner_success / store_owner_total * 100) if store_owner_total > 0 else 0, 2)
            },
            'store_admin': {
                'success': store_admin_success,
                'total': store_admin_total,
                'success_rate': round((store_admin_success / store_admin_total * 100) if store_admin_total > 0 else 0, 2)
            },
            'errors': total_errors,
            'end_time': datetime.now().isoformat()
        }

        self.test_results['summary'] = summary

        # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        self.logger.info(f"üè™ –í–õ–ê–î–ï–õ–ï–¶ –ú–ê–ì–ê–ó–ò–ù–ê: {store_owner_success}/{store_owner_total} —É—Å–ø–µ—à–Ω–æ ({summary['store_owner']['success_rate']}%)")
        self.logger.info(f"üì¶ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –ú–ê–ì–ê–ó–ò–ù–ê: {store_admin_success}/{store_admin_total} —É—Å–ø–µ—à–Ω–æ ({summary['store_admin']['success_rate']}%)")
        self.logger.info(f"‚ùå –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –û–®–ò–ë–û–ö: {total_errors}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
        report_file = os.path.join(settings.BASE_DIR, 'logs', f'emulation_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2)
            self.logger.info(f"üíæ JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –æ—Ç—á–µ—Ç–∞: {e}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if total_errors > 0:
            self.logger.info("   üîß –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
        if summary['store_owner']['success_rate'] < 100:
            self.logger.info("   üè™ –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞–¥–º–∏–Ω–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞")
        if summary['store_admin']['success_rate'] < 100:
            self.logger.info("   üì¶ –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞–¥–º–∏–Ω–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞")
        if summary['store_owner']['success_rate'] == 100 and summary['store_admin']['success_rate'] == 100 and total_errors == 0:
            self.logger.info("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
