#!/usr/bin/env python
"""
üé≠ –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–†–ê–£–ó–ï–†–ê

–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–ª–æ–≥–∏–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∫–∏

–ó–∞–ø—É—Å–∫: python manage.py simple_browser_demo
"""

import os
import time
import webbrowser
import logging
from datetime import datetime
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.conf import settings
from django.db import transaction
import random

class Command(BaseCommand):
    help = 'üé≠ –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–æ–º'

    def __init__(self):
        super().__init__()
        self.setup_logging()
        self.base_url = 'http://127.0.0.1:8000'

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger('browser_demo')
        self.logger.setLevel(logging.INFO)

        formatter = logging.Formatter('[%(asctime)s] %(message)s', datefmt='%H:%M:%S')
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

    def add_arguments(self, parser):
        parser.add_argument('--delay', type=int, default=5, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏')

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        self.delay = options.get('delay', 5)

        self.logger.info("üé≠ –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–†–ê–£–ó–ï–†–ê")
        self.logger.info("=" * 50)

        try:
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.enable_test_mode()

            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin = self.create_test_admin()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü
            self.demo_admin_workflow(admin)

            # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.disable_test_mode()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def enable_test_mode(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.info("üîß –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª-—Ñ–ª–∞–≥
        test_flag = os.path.join(settings.BASE_DIR, '.test_mode')
        with open(test_flag, 'w') as f:
            f.write('browser_demo_active')

        self.logger.info("‚úÖ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")

    def disable_test_mode(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.info("üîß –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        test_flag = os.path.join(settings.BASE_DIR, '.test_mode')
        if os.path.exists(test_flag):
            os.remove(test_flag)

        self.logger.info("‚úÖ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω")

    def create_test_admin(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        User = get_user_model()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π telegram_id
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        unique_telegram_id = f"demo_{timestamp}_{random.randint(1000, 9999)}"

        with transaction.atomic():
            user, created = User.objects.get_or_create(
                username='demo_admin',
                defaults={
                    'name': '–î–µ–º–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'role': 'store_admin',
                    'is_staff': True,
                    'is_active': True,
                    'telegram_id': unique_telegram_id
                }
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not created:
                user.telegram_id = unique_telegram_id
                user.save()

            from django.contrib.auth.models import Permission
            store_permissions = Permission.objects.filter(
                content_type__app_label='magicbeans_store'
            )
            user.user_permissions.set(store_permissions)

            action = "—Å–æ–∑–¥–∞–Ω" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω"
            self.logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {action}: {user.username}")
            self.logger.info(f"   üÜî Telegram ID: {user.telegram_id}")

            return user

    def demo_admin_workflow(self, admin):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.logger.info("\nüé¨ –ù–ê–ß–ò–ù–ê–ï–ú –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Æ –†–ê–ë–û–ß–ï–ì–û –ü–†–û–¶–ï–°–°–ê")
        self.logger.info("-" * 50)

        # –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_steps = [
            {
                'url': '/admin/login/',
                'title': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ Django Admin',
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ Django'
            },
            {
                'url': '/store_admin/',
                'title': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞',
                'description': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º'
            },
            {
                'url': '/store_admin/magicbeans_store/',
                'title': '–†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º',
                'description': '–í—Å–µ –º–æ–¥–µ–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞'
            },
            {
                'url': '/store_admin/magicbeans_store/strain/',
                'title': '–°–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∞–º–∏'
            },
            {
                'url': '/store_admin/magicbeans_store/strain/add/',
                'title': '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞',
                'description': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ä—Ç–∞'
            }
        ]

        # –°–æ–∑–¥–∞–µ–º —Å–æ—Ä—Ç –∑–∞—Ä–∞–Ω–µ–µ
        new_strain = self.create_demo_strain()

        if new_strain:
            demo_steps.append({
                'url': f'/store_admin/magicbeans_store/strain/{new_strain.id}/change/',
                'title': f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ #{new_strain.id}',
                'description': f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞: {new_strain.name}'
            })

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        for i, step in enumerate(demo_steps, 1):
            self.logger.info(f"\nüéØ –®–ê–ì {i}/{len(demo_steps)}: {step['title']}")
            self.logger.info(f"   üìã {step['description']}")

            full_url = f"{self.base_url}{step['url']}"
            self.logger.info(f"   üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º: {full_url}")

            webbrowser.open(full_url)

            if i < len(demo_steps):
                self.logger.info(f"   ‚è±Ô∏è –ñ–¥–µ–º {self.delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞...")
                time.sleep(self.delay)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.show_final_stats(new_strain)

    def create_demo_strain(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞"""
        self.logger.info("üåø –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ—Ä—Ç...")

        try:
            from magicbeans_store.models import SeedBank, Strain

            seedbank = SeedBank.objects.first()
            if not seedbank:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–¥–±–∞–Ω–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞")
                return None

            timestamp = datetime.now().strftime("%H%M%S")
            strain_name = f"Demo Strain {timestamp}"

            strain = Strain.objects.create(
                name=strain_name,
                seedbank=seedbank,
                strain_type='regular',
                description=f'–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ—Ä—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π {datetime.now().strftime("%H:%M:%S")}',
                thc_content='15-20',
                cbd_content='0.5-1',
                flowering_time='8-10',
                genetics='Demo Genetics',
                is_active=True
            )

            self.logger.info(f"‚úÖ –°–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {strain.name} (ID: {strain.id})")
            return strain

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞: {e}")
            return None

    def show_final_stats(self, new_strain):
        """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        self.logger.info("-" * 50)

        try:
            from magicbeans_store.models import SeedBank, Strain

            seedbanks_count = SeedBank.objects.count()
            strains_count = Strain.objects.count()

            self.logger.info(f"üè™ –°–∏–¥–±–∞–Ω–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {seedbanks_count}")
            self.logger.info(f"üåø –°–æ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {strains_count}")

            if new_strain:
                self.logger.info(f"üÜï –ù–æ–≤—ã–π —Å–æ—Ä—Ç: {new_strain.name}")
                self.logger.info(f"üÜî ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ä—Ç–∞: {new_strain.id}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        self.logger.info("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        self.logger.info("üí° –í –±—Ä–∞—É–∑–µ—Ä–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω–∫–∏")
        self.logger.info("üí° –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ")
        self.logger.info("üí° –í—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∫–∏")
