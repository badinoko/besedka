#!/usr/bin/env python
"""
üåê BROWSER EMULATION - –†–µ–∞–ª—å–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –∞–¥–º–∏–Ω–æ–∫

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
- –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
- –≠–º—É–ª–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
- –î–æ–±–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç/—É–¥–∞–ª—è–µ—Ç —Å–∏–¥–±–∞–Ω–∫–∏, —Å–æ—Ä—Ç–∞, —Ç–æ–≤–∞—Ä—ã
- –í–µ–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
- –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–ª–∞–∑–∞–º–∏

–ó–∞–ø—É—Å–∫: python manage.py browser_emulation
"""

import os
import sys
import time
import json
import logging
import webbrowser
import requests
from datetime import datetime
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.test import Client
from django.conf import settings
from django.db import transaction
from django.apps import apps

class Command(BaseCommand):
    help = 'üåê –†–µ–∞–ª—å–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –∞–¥–º–∏–Ω–æ–∫ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –≤–∫–ª–∞–¥–æ–∫'

    def __init__(self):
        super().__init__()
        self.setup_logging()
        self.test_results = {
            'start_time': datetime.now().isoformat(),
            'actions': [],
            'browser_tabs': [],
            'errors': []
        }
        self.base_url = 'http://127.0.0.1:8000'
        self.session = requests.Session()

    def setup_logging(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        log_dir = os.path.join(settings.BASE_DIR, 'logs')
        os.makedirs(log_dir, exist_ok=True)

        log_file = os.path.join(log_dir, f'browser_emulation_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

        self.logger = logging.getLogger('browser_emulation')
        self.logger.setLevel(logging.DEBUG)

        formatter = logging.Formatter(
            '[%(asctime)s] [%(levelname)s] %(message)s',
            datefmt='%H:%M:%S'
        )

        # –§–∞–π–ª
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        # –ö–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

        self.log_file = log_file

    def add_arguments(self, parser):
        parser.add_argument(
            '--role',
            type=str,
            choices=['store_owner', 'store_admin'],
            default='store_admin',
            help='–†–æ–ª—å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ (default: store_admin)'
        )
        parser.add_argument(
            '--delay',
            type=int,
            default=2,
            help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (default: 2)'
        )
        parser.add_argument(
            '--full-scenario',
            action='store_true',
            help='–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ'
        )

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        self.logger.info("üåê –ù–ê–ß–ò–ù–ê–ï–ú –ë–†–ê–£–ó–ï–†–ù–£–Æ –≠–ú–£–õ–Ø–¶–ò–Æ")
        self.logger.info("=" * 80)

        role = options.get('role', 'store_admin')
        self.delay = options.get('delay', 2)
        full_scenario = options.get('full_scenario', False)

        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.create_test_data()

            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.get_test_user(role)

            # 3. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            self.authenticate_user(user)

            # 4. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏
            if role == 'store_admin':
                self.emulate_store_admin(full_scenario)
            elif role == 'store_owner':
                self.emulate_store_owner(full_scenario)

            # 5. –û—Ç—á–µ—Ç
            self.generate_report()

        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        finally:
            self.logger.info(f"üìÑ –õ–û–ì–ò –°–û–•–†–ê–ù–ï–ù–´: {self.log_file}")

    def create_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        User = get_user_model()

        try:
            with transaction.atomic():
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
                store_admin, created = User.objects.get_or_create(
                    username='browser_store_admin',
                    defaults={
                        'name': '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'role': 'store_admin',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '99999999'
                    }
                )
                if created:
                    self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞")

                # –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞
                store_owner, created = User.objects.get_or_create(
                    username='browser_store_owner',
                    defaults={
                        'name': '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –í–ª–∞–¥–µ–ª–µ—Ü',
                        'role': 'store_owner',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '88888888'
                    }
                )
                if created:
                    self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞")

                # –ù–∞–∑–Ω–∞—á–∞–µ–º permissions
                self.assign_permissions(store_admin, store_owner)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def assign_permissions(self, store_admin, store_owner):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ permissions"""
        from django.contrib.auth.models import Permission

        try:
            store_permissions = Permission.objects.filter(
                content_type__app_label='magicbeans_store'
            )

            store_owner.user_permissions.set(store_permissions)
            store_admin.user_permissions.set(store_permissions.exclude(codename__startswith='delete_'))

            self.logger.info("‚úÖ Permissions –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ permissions: {e}")

    def get_test_user(self, role):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        User = get_user_model()

        username = f'browser_{role}'

        try:
            user = User.objects.get(username=username)
            self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω")
            return user
        except User.DoesNotExist:
            self.logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)

    def authenticate_user(self, user):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.logger.info(f"üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django Client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è session
        client = Client()
        client.force_login(user)

        # –ü–æ–ª—É—á–∞–µ–º sessionid –∏–∑ Django Client
        session_key = client.session.session_key

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –≤ requests session
        self.session.cookies.set('sessionid', session_key, domain='127.0.0.1')

        self.logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    def open_browser_tab(self, url, description):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        full_url = f"{self.base_url}{url}"

        self.logger.info(f"üåê –û–¢–ö–†–´–í–ê–ï–ú –í–ö–õ–ê–î–ö–£: {description}")
        self.logger.info(f"   URL: {full_url}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tab_info = {
            'url': full_url,
            'description': description,
            'time': datetime.now().isoformat()
        }
        self.test_results['browser_tabs'].append(tab_info)

        # –†–ï–ê–õ–¨–ù–û –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        webbrowser.open_new_tab(full_url)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        time.sleep(self.delay)

        return full_url

    def emulate_store_admin(self, full_scenario=False):
        """–≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.logger.info("üì¶ –≠–ú–£–õ–Ø–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –ú–ê–ì–ê–ó–ò–ù–ê")
        self.logger.info("-" * 60)

        # 1. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
        self.open_browser_tab('/store_admin/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞')

        # 2. –°–∏–¥–±–∞–Ω–∫–∏
        self.logger.info("üå± –†–ê–ë–û–¢–ê –° –°–ò–î–ë–ê–ù–ö–ê–ú–ò")
        self.open_browser_tab('/store_admin/magicbeans_store/seedbank/', '–°–ø–∏—Å–æ–∫ —Å–∏–¥–±–∞–Ω–∫–æ–≤')
        self.open_browser_tab('/store_admin/magicbeans_store/seedbank/add/', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–¥–±–∞–Ω–∫–∞')

        if full_scenario:
            self.create_seedbank_scenario()

        # 3. –°–æ—Ä—Ç–∞
        self.logger.info("üåø –†–ê–ë–û–¢–ê –° –°–û–†–¢–ê–ú–ò")
        self.open_browser_tab('/store_admin/magicbeans_store/strain/', '–°–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤')
        self.open_browser_tab('/store_admin/magicbeans_store/strain/add/', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ä—Ç–∞')

        if full_scenario:
            self.create_strain_scenario()

        # 4. –¢–æ–≤–∞—Ä—ã
        self.logger.info("üìã –†–ê–ë–û–¢–ê –° –¢–û–í–ê–†–ê–ú–ò")
        self.open_browser_tab('/store_admin/magicbeans_store/stockitem/', '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')
        self.open_browser_tab('/store_admin/magicbeans_store/stockitem/add/', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')

        if full_scenario:
            self.create_stock_scenario()

        # 5. –ó–∞–∫–∞–∑—ã
        self.logger.info("üõí –†–ê–ë–û–¢–ê –° –ó–ê–ö–ê–ó–ê–ú–ò")
        self.open_browser_tab('/store_admin/magicbeans_store/order/', '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤')

    def emulate_store_owner(self, full_scenario=False):
        """–≠–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.logger.info("üè™ –≠–ú–£–õ–Ø–¶–ò–Ø –í–õ–ê–î–ï–õ–¨–¶–ê –ú–ê–ì–ê–ó–ò–ù–ê")
        self.logger.info("-" * 60)

        # 1. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        self.open_browser_tab('/store_owner/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞')

        # 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        self.logger.info("üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–û–ú")
        self.open_browser_tab('/store_owner/users/user/', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏')

        # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
        self.logger.info("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ú–ê–ì–ê–ó–ò–ù–ê")
        self.open_browser_tab('/store_owner/magicbeans_store/storesettings/', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞')

        # 4. –û—Ç—á–µ—Ç—ã
        self.logger.info("üìä –û–¢–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê")
        self.open_browser_tab('/store_owner/magicbeans_store/salesreport/', '–û—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º')
        self.open_browser_tab('/store_owner/magicbeans_store/inventoryreport/', '–°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã')

        # 5. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –∞–¥–º–∏–Ω–∫—É
        self.logger.info("üì¶ –ü–ï–†–ï–•–û–î –í –û–ü–ï–†–ê–¶–ò–û–ù–ù–£–Æ –ê–î–ú–ò–ù–ö–£")
        self.open_browser_tab('/store_admin/', '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º')

    def create_seedbank_scenario(self):
        """–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å —Å–∏–¥–±–∞–Ω–∫–æ–º"""
        self.logger.info("üé¨ –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô: –°–ò–î–ë–ê–ù–ö")

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        seedbank_data = {
            'name': f'Test SeedBank {datetime.now().strftime("%H%M%S")}',
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–¥–±–∞–Ω–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π',
            'website': 'https://test-seedbank.example.com',
            'is_active': True
        }

        self.logger.info(f"   üìù –°–æ–∑–¥–∞–µ–º —Å–∏–¥–±–∞–Ω–∫: {seedbank_data['name']}")

        # –°–∏–º—É–ª—è—Ü–∏—è POST –∑–∞–ø—Ä–æ—Å–∞
        try:
            response = self.session.post(
                f"{self.base_url}/store_admin/magicbeans_store/seedbank/add/",
                data=seedbank_data
            )

            if response.status_code in [200, 302]:
                self.logger.info("   ‚úÖ –°–∏–¥–±–∞–Ω–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                self.test_results['actions'].append({
                    'action': 'create_seedbank',
                    'data': seedbank_data,
                    'status': 'success',
                    'time': datetime.now().isoformat()
                })
            else:
                self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–¥–±–∞–Ω–∫–∞: {response.status_code}")

        except Exception as e:
            self.logger.error(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–¥–±–∞–Ω–∫–∞: {e}")

    def create_strain_scenario(self):
        """–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ä—Ç–æ–º"""
        self.logger.info("üé¨ –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô: –°–û–†–¢")

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∏–¥–±–∞–Ω–∫
        try:
            SeedBank = apps.get_model('magicbeans_store', 'SeedBank')
            seedbank = SeedBank.objects.first()

            if not seedbank:
                self.logger.warning("   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–¥–±–∞–Ω–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞")
                return

            strain_data = {
                'name': f'Test Strain {datetime.now().strftime("%H%M%S")}',
                'seedbank': seedbank.id,
                'strain_type': 'indica',
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π',
                'thc_content': 20.5,
                'cbd_content': 1.2,
                'flowering_time': 65,
                'is_active': True
            }

            self.logger.info(f"   üìù –°–æ–∑–¥–∞–µ–º —Å–æ—Ä—Ç: {strain_data['name']}")

            response = self.session.post(
                f"{self.base_url}/store_admin/magicbeans_store/strain/add/",
                data=strain_data
            )

            if response.status_code in [200, 302]:
                self.logger.info("   ‚úÖ –°–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                self.test_results['actions'].append({
                    'action': 'create_strain',
                    'data': strain_data,
                    'status': 'success',
                    'time': datetime.now().isoformat()
                })
            else:
                self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞: {response.status_code}")

        except Exception as e:
            self.logger.error(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ä—Ç–∞: {e}")

    def create_stock_scenario(self):
        """–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–æ–º"""
        self.logger.info("üé¨ –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô: –¢–û–í–ê–†")

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–æ—Ä—Ç
        try:
            Strain = apps.get_model('magicbeans_store', 'Strain')
            strain = Strain.objects.first()

            if not strain:
                self.logger.warning("   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
                return

            stock_data = {
                'strain': strain.id,
                'seeds_count': 5,
                'price': 1500.00,
                'quantity': 10,
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π',
                'is_active': True
            }

            self.logger.info(f"   üìù –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä: {strain.name} ({stock_data['seeds_count']} —Å–µ–º—è–Ω)")

            response = self.session.post(
                f"{self.base_url}/store_admin/magicbeans_store/stockitem/add/",
                data=stock_data
            )

            if response.status_code in [200, 302]:
                self.logger.info("   ‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                self.test_results['actions'].append({
                    'action': 'create_stock',
                    'data': stock_data,
                    'status': 'success',
                    'time': datetime.now().isoformat()
                })
            else:
                self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {response.status_code}")

        except Exception as e:
            self.logger.error(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.logger.info("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–†–ê–£–ó–ï–†–ù–û–ô –≠–ú–£–õ–Ø–¶–ò–ò")
        self.logger.info("=" * 60)

        total_tabs = len(self.test_results['browser_tabs'])
        total_actions = len(self.test_results['actions'])
        total_errors = len(self.test_results['errors'])

        self.logger.info(f"üåê –û—Ç–∫—Ä—ã—Ç–æ –≤–∫–ª–∞–¥–æ–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {total_tabs}")
        self.logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}")
        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫: {total_errors}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
        report_file = os.path.join(settings.BASE_DIR, 'logs', f'browser_emulation_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2)
            self.logger.info(f"üíæ JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

        self.logger.info("\nüí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
        self.logger.info("   üñ•Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        self.logger.info("   üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—Ä—É—á–Ω—É—é")
        self.logger.info("   üìù –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö")

        self.test_results['end_time'] = datetime.now().isoformat()
