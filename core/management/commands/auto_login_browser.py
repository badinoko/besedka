#!/usr/bin/env python
"""
üåê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–•–û–î –í –ë–†–ê–£–ó–ï–†

–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä
—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π

–ó–∞–ø—É—Å–∫: python manage.py auto_login_browser
"""

import os
import time
import webbrowser
import logging
from datetime import datetime
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import transaction
from django.contrib.sessions.models import Session
from django.contrib.auth import SESSION_KEY, BACKEND_SESSION_KEY, HASH_SESSION_KEY
from django.utils import timezone
import hashlib

class Command(BaseCommand):
    help = 'üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–∞–≥–∞–∑–∏–Ω–∞'

    def __init__(self):
        super().__init__()
        self.setup_logging()
        self.base_url = 'http://127.0.0.1:8000'

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger('auto_browser')
        self.logger.setLevel(logging.INFO)

        formatter = logging.Formatter('[%(asctime)s] %(message)s', datefmt='%H:%M:%S')
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

    def add_arguments(self, parser):
        parser.add_argument('--role', choices=['store_admin', 'store_owner'], default='store_admin', help='–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        parser.add_argument('--delay', type=int, default=3, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏')

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        self.role = options.get('role', 'store_admin')
        self.delay = options.get('delay', 3)

        self.logger.info("üåê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–•–û–î –í –ë–†–ê–£–ó–ï–†")
        self.logger.info("=" * 50)
        self.logger.info(f"üé≠ –†–æ–ª—å: {self.role}")

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.create_user()

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_id = self.create_session(user)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Å–µ—Å—Å–∏–µ–π
            self.open_browser_with_session(session_id)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def create_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é {self.role}...")

        User = get_user_model()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        import random
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        unique_telegram_id = f"auto_{timestamp}_{random.randint(1000, 9999)}"

        username = f'auto_{self.role}_{timestamp}'

        with transaction.atomic():
            user = User.objects.create(
                username=username,
                name=f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π {self.role}',
                role=self.role,
                is_staff=True,
                is_active=True,
                telegram_id=unique_telegram_id
            )

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞
            if self.role == 'store_admin':
                from django.contrib.auth.models import Permission
                store_permissions = Permission.objects.filter(
                    content_type__app_label='magicbeans_store'
                )
                user.user_permissions.set(store_permissions)

            self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.username}")
            self.logger.info(f"   üé≠ –†–æ–ª—å: {user.role}")
            self.logger.info(f"   üÜî Telegram ID: {user.telegram_id}")

            return user

    def create_session(self, user):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.logger.info("üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞...")

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session = Session()
            session.session_key = Session.objects._get_or_create_session_key()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = {
                SESSION_KEY: str(user.pk),
                BACKEND_SESSION_KEY: 'django.contrib.auth.backends.ModelBackend',
                HASH_SESSION_KEY: hashlib.md5(user.password.encode()).hexdigest()[:32] if user.password else 'no_password'
            }

            session.session_data = Session.objects.encode(session_data)
            session.expire_date = timezone.now() + timezone.timedelta(hours=1)
            session.save()

            self.logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session.session_key[:20]}...")
            return session.session_key

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None

    def open_browser_with_session(self, session_id):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Å–µ—Å—Å–∏–µ–π"""
        self.logger.info("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º...")

        if not session_id:
            self.logger.error("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if self.role == 'store_admin':
            urls = [
                ('/store_admin/', '–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞'),
                ('/store_admin/magicbeans_store/strain/', '–°–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤'),
                ('/store_admin/magicbeans_store/strain/add/', '–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∞'),
            ]
        else:
            urls = [
                ('/store_owner/', '–ì–ª–∞–≤–Ω–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞'),
            ]

        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ—Ä—Ç
        if self.role == 'store_admin':
            demo_strain = self.create_demo_strain()
            if demo_strain:
                urls.append((
                    f'/store_admin/magicbeans_store/strain/{demo_strain.id}/change/',
                    f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ #{demo_strain.id}'
                ))

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º URLs —Å –∫—É–∫–∞–º–∏
        for i, (url, description) in enumerate(urls, 1):
            # –î–æ–±–∞–≤–ª—è–µ–º session cookie –≤ URL (—Ö–∞–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            full_url = f"{self.base_url}{url}"

            self.logger.info(f"üéØ –®–ê–ì {i}/{len(urls)}: {description}")
            self.logger.info(f"   üìç URL: {full_url}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            webbrowser.open(full_url)

            if i < len(urls):
                self.logger.info(f"   ‚è±Ô∏è –ñ–¥–µ–º {self.delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(self.delay)

        self.show_final_instructions(session_id)

    def create_demo_strain(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞"""
        self.logger.info("üåø –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ—Ä—Ç...")

        try:
            from magicbeans_store.models import SeedBank, Strain

            seedbank = SeedBank.objects.first()
            if not seedbank:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–¥–±–∞–Ω–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞")
                return None

            timestamp = datetime.now().strftime("%H%M%S")
            strain_name = f"Auto Browser Strain {timestamp}"

            strain = Strain.objects.create(
                name=strain_name,
                seedbank=seedbank,
                strain_type='feminized',
                description=f'–°–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º –≤ {datetime.now().strftime("%H:%M:%S")}',
                thc_content='20-25',
                cbd_content='1-1.5',
                flowering_time='8-10',
                genetics='Auto Browser Genetics',
                is_active=True
            )

            self.logger.info(f"‚úÖ –°–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {strain.name} (ID: {strain.id})")
            return strain

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞: {e}")
            return None

    def show_final_instructions(self, session_id):
        """–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        self.logger.info("\nüéâ –ë–†–ê–£–ó–ï–† –û–¢–ö–†–´–¢!")
        self.logger.info("=" * 50)

        self.logger.info("üìã –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:")
        self.logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é {self.role}")
        self.logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id[:20]}...")
        self.logger.info("   ‚úÖ –û—Ç–∫—Ä—ã—Ç –±—Ä–∞—É–∑–µ—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏")

        if self.role == 'store_admin':
            self.logger.info("   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ—Ä—Ç")

        self.logger.info("\nüí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:")
        self.logger.info("   üîê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã–ª—Å—è –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞")
        self.logger.info("   üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –≤—Ä—É—á–Ω—É—é")
        self.logger.info("   üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –∞–¥–º–∏–Ω–∫—É")

        self.logger.info(f"\nüè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: {self.base_url}/store_admin/" if self.role == 'store_admin' else f"{self.base_url}/store_owner/")
