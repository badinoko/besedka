from django.core.management.base import BaseCommand
from django.test.client import Client
from django.contrib.auth import get_user_model

class Command(BaseCommand):
    help = 'Test growlogs functionality'

    def handle(self, *args, **options):
        User = get_user_model()
        client = Client()

        self.stdout.write("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç–æ–≤...")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.stdout.write("\n1. –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")

        tests = [
            ('–°–ø–∏—Å–æ–∫ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç–æ–≤', '/growlogs/'),
            ('–î–µ—Ç–∞–ª–∏ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç–∞ 1', '/growlogs/1/'),
            ('–î–µ—Ç–∞–ª–∏ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç–∞ 2', '/growlogs/2/'),
        ]

        for test_name, url in tests:
            try:
                response = client.get(url)
                if response.status_code == 200:
                    self.stdout.write(f"‚úÖ {test_name}: OK ({response.status_code})")
                elif response.status_code == 404:
                    self.stdout.write(f"‚ö†Ô∏è {test_name}: –ù–µ –Ω–∞–π–¥–µ–Ω ({response.status_code})")
                else:
                    self.stdout.write(f"‚ùå {test_name}: –û—à–∏–±–∫–∞ ({response.status_code})")

            except Exception as e:
                self.stdout.write(f"‚ùå {test_name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        self.stdout.write("\n2. –¢–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_users = ['regular_user', 'user', 'alice_grower', 'bob_botanist']
        user = None

        for username in test_users:
            try:
                user = User.objects.get(username=username)
                self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                break
            except User.DoesNotExist:
                continue

        if not user:
            self.stdout.write("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            return

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        client.force_login(user)

        auth_tests = [
            ('–ú–æ–∏ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç—ã', '/growlogs/my-logs/'),
            ('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–æ—É-—Ä–µ–ø–æ—Ä—Ç–∞', '/growlogs/create/'),
        ]

        for test_name, url in auth_tests:
            try:
                response = client.get(url)
                if response.status_code == 200:
                    self.stdout.write(f"‚úÖ {test_name}: OK ({response.status_code})")
                elif response.status_code == 302:
                    self.stdout.write(f"‚ö†Ô∏è {test_name}: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ({response.status_code})")
                else:
                    self.stdout.write(f"‚ùå {test_name}: –û—à–∏–±–∫–∞ ({response.status_code})")

            except Exception as e:
                self.stdout.write(f"‚ùå {test_name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")

        self.stdout.write("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
