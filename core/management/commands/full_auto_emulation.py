#!/usr/bin/env python
"""
üöÄ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –≠–ú–£–õ–Ø–¶–ò–Ø

–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç–º—É–ª—è—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è:
- –°–∞–º–∞ –ª–æ–≥–∏–Ω–∏—Ç—Å—è
- –°–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –°–æ–∑–¥–∞–µ—Ç –ú–ù–û–ì–û —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –í—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

–ó–∞–ø—É—Å–∫: python manage.py full_auto_emulation
"""

import os
import time
import webbrowser
import logging
import random
import requests
from datetime import datetime
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import transaction
from django.urls import reverse
import threading
from magicbeans_store.models import SeedBank, Strain

class Command(BaseCommand):
    help = 'üöÄ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç–º—É–ª—è—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏'

    def __init__(self):
        super().__init__()
        self.setup_logging()
        self.base_url = 'http://127.0.0.1:8000'
        self.session = requests.Session()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests.Session –≤–º–µ—Å—Ç–æ Django Test Client
        self.current_step = 0
        self.results = {
            'seedbanks_created': 0,
            'strains_created': 0,
            'stock_items_created': 0,
            'total_operations': 0
        }

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger('auto_emulation')
        self.logger.setLevel(logging.INFO)

        formatter = logging.Formatter('[%(asctime)s] %(message)s', datefmt='%H:%M:%S')
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

    def add_arguments(self, parser):
        parser.add_argument('--delay', type=int, default=2, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)')
        parser.add_argument('--count', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞')

    def create_test_admin(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        User = get_user_model()
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")

        with transaction.atomic():
            user, created = User.objects.get_or_create(
                username='auto_admin',
                defaults={
                    'name': 'Auto Test Admin',
                    'role': 'store_admin',
                    'is_staff': True,
                    'is_active': True,
                    'telegram_id': f"auto_{timestamp}"
                }
            )

            user.set_password('admin123')
            user.save()

            if created:
                self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
            else:
                self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")

            return user

    def auto_login(self, user):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
        self.logger.info("üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞ –¥–ª—è CSRF —Ç–æ–∫–µ–Ω–∞
        login_page = self.session.get(f"{self.base_url}/accounts/login/")
        if login_page.status_code != 200:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞: {login_page.status_code}")
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = None
        if 'csrfmiddlewaretoken' in login_page.text:
            import re
            csrf_match = re.search(r'csrfmiddlewaretoken.*?value="([^"]*)"', login_page.text)
            if csrf_match:
                csrf_token = csrf_match.group(1)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞
        login_data = {
            'username': user.username,
            'password': 'admin123',
        }

        if csrf_token:
            login_data['csrfmiddlewaretoken'] = csrf_token

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
        login_response = self.session.post(
            f"{self.base_url}/accounts/login/",
            data=login_data,
            allow_redirects=False
        )

        if login_response.status_code == 302:
            self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return True
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            return False

    def show_browser_page(self, url, title, delay=1):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        self.current_step += 1

        self.logger.info(f"\nüéØ –®–ê–ì {self.current_step}: {title}")
        self.logger.info(f"   üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º: {url}")

        webbrowser.open(url)

        self.logger.info(f"   ‚è±Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥...")
        time.sleep(delay)

    def create_seedbank_auto(self, name, delay=1):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–¥–±–∞–Ω–∫–∞"""
        self.logger.info(f"üå± –°–æ–∑–¥–∞–µ–º —Å–∏–¥–±–∞–Ω–∫: {name}")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_url = f"{self.base_url}/store_admin/magicbeans_store/seedbank/add/"
        response = self.session.get(add_url)

        if response.status_code != 200:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {response.status_code}")
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = None
        if 'csrfmiddlewaretoken' in response.content.decode():
            import re
            csrf_match = re.search(r'csrfmiddlewaretoken.*?value="([^"]*)"', response.content.decode())
            if csrf_match:
                csrf_token = csrf_match.group(1)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–¥–±–∞–Ω–∫–∞
        data = {
            'name': name,
            'description': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∏–¥–±–∞–Ω–∫ {name}',
            'website': f'https://{name.lower().replace(" ", "")}.com',
            'email': f'info@{name.lower().replace(" ", "")}.com',
            'is_active': True,
        }

        if csrf_token:
            data['csrfmiddlewaretoken'] = csrf_token

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = self.session.post(add_url, data)

        if response.status_code == 302:  # –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            self.logger.info(f"‚úÖ –°–∏–¥–±–∞–Ω–∫ '{name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.results['seedbanks_created'] += 1
            self.results['total_operations'] += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            self.show_browser_page(f"{self.base_url}/store_admin/magicbeans_store/seedbank/",
                                 f"–†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–∑–¥–∞–Ω —Å–∏–¥–±–∞–Ω–∫ {name}", delay)
            return True
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–¥–±–∞–Ω–∫–∞: {response.status_code}")
            return False

    def create_strain_auto(self, name, seedbank_id, delay=1):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞"""
        self.logger.info(f"üåø –°–æ–∑–¥–∞–µ–º —Å–æ—Ä—Ç: {name}")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_url = f"{self.base_url}/store_admin/magicbeans_store/strain/add/"
        response = self.session.get(add_url)

        if response.status_code != 200:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {response.status_code}")
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = None
        if 'csrfmiddlewaretoken' in response.content.decode():
            import re
            csrf_match = re.search(r'csrfmiddlewaretoken.*?value="([^"]*)"', response.content.decode())
            if csrf_match:
                csrf_token = csrf_match.group(1)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ choices)
        strain_types = ["regular", "feminized", "autoflowering"]

        data = {
            'name': name,
            'seedbank': seedbank_id,
            'strain_type': random.choice(strain_types),
            'indica_percentage': random.randint(30, 70),
            'sativa_percentage': random.randint(30, 70),
            'thc_content': f"{random.randint(15, 25)}-{random.randint(26, 30)}%",
            'cbd_content': f"{random.randint(0, 2)}-{random.randint(3, 5)}%",
            'flowering_time': random.randint(7, 12),
            'yield_indoor': f"{random.randint(400, 600)}–≥/–º¬≤",
            'yield_outdoor': f"{random.randint(600, 1000)}–≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ",
            'description': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–æ—Ä—Ç {name}',
            'is_active': True,
        }

        if csrf_token:
            data['csrfmiddlewaretoken'] = csrf_token

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = self.session.post(add_url, data)

        if response.status_code == 302:  # –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            self.logger.info(f"‚úÖ –°–æ—Ä—Ç '{name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.results['strains_created'] += 1
            self.results['total_operations'] += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            self.show_browser_page(f"{self.base_url}/store_admin/magicbeans_store/strain/",
                                 f"–†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–∑–¥–∞–Ω —Å–æ—Ä—Ç {name}", delay)
            return True
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞: {response.status_code}")
            return False

    def create_stock_item_auto(self, strain_id, delay=1):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        self.logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Å–æ—Ä—Ç–∞ ID: {strain_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_url = f"{self.base_url}/store_admin/magicbeans_store/stockitem/add/"
        response = self.session.get(add_url)

        if response.status_code != 200:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {response.status_code}")
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token = None
        if 'csrfmiddlewaretoken' in response.content.decode():
            import re
            csrf_match = re.search(r'csrfmiddlewaretoken.*?value="([^"]*)"', response.content.decode())
            if csrf_match:
                csrf_token = csrf_match.group(1)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        pack_sizes = [1, 3, 5, 10]
        pack_size = random.choice(pack_sizes)

        data = {
            'strain': strain_id,
            'pack_size': pack_size,
            'price': f"{random.randint(20, 100)}.00",
            'quantity_in_stock': random.randint(50, 200),
            'is_available': True,
        }

        if csrf_token:
            data['csrfmiddlewaretoken'] = csrf_token

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = self.session.post(add_url, data)

        if response.status_code == 302:  # –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            self.logger.info(f"‚úÖ –¢–æ–≤–∞—Ä (–ø–∞–∫–µ—Ç {pack_size} —Å–µ–º—è–Ω) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.results['stock_items_created'] += 1
            self.results['total_operations'] += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            self.show_browser_page(f"{self.base_url}/store_admin/magicbeans_store/stockitem/",
                                 f"–†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä –ø–∞–∫–µ—Ç {pack_size} —Å–µ–º—è–Ω", delay)
            return True
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {response.status_code}")
            return False

    def run_full_emulation(self, delay, count):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —ç–º—É–ª—è—Ü–∏–∏"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –≠–ú–£–õ–Ø–¶–ò–ò")
        self.logger.info("=" * 60)
        self.logger.info(f"üéØ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:")
        self.logger.info(f"   üå± –°–∏–¥–±–∞–Ω–∫–æ–≤: {count}")
        self.logger.info(f"   üåø –°–æ—Ä—Ç–æ–≤: {count * 2}")  # –ü–æ 2 —Å–æ—Ä—Ç–∞ –Ω–∞ —Å–∏–¥–±–∞–Ω–∫
        self.logger.info(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {count * 4}")  # –ü–æ 2 —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–æ—Ä—Ç
        self.logger.info(f"   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
        self.logger.info("-" * 60)

        # –°–æ–∑–¥–∞–µ–º –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_user = self.create_test_admin()
        if not self.auto_login(admin_user):
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.show_browser_page(f"{self.base_url}/store_admin/",
                              "–ù–∞—á–∞–ª–æ: –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏", delay)

        # –§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–¥–±–∞–Ω–∫–æ–≤
        self.logger.info("\nüå± –§–ê–ó–ê 1: –°–û–ó–î–ê–ù–ò–ï –°–ò–î–ë–ê–ù–ö–û–í")
        timestamp = datetime.now().strftime("%H%M")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∏–¥–±–∞–Ω–∫–æ–≤
        initial_seedbank_count = SeedBank.objects.count()

        for i in range(1, count + 1):
            seedbank_name = f"AutoBank {timestamp}_{i:02d}"
            success = self.create_seedbank_auto(seedbank_name, delay)

        # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∏–¥–±–∞–Ω–∫–æ–≤
        created_seedbanks = SeedBank.objects.filter(
            name__startswith=f"AutoBank {timestamp}_"
        ).values_list('id', flat=True)

        # –§–ê–ó–ê 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä—Ç–æ–≤
        self.logger.info("\nüåø –§–ê–ó–ê 2: –°–û–ó–î–ê–ù–ò–ï –°–û–†–¢–û–í")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤
        initial_strain_count = Strain.objects.count()

        for seedbank_id in created_seedbanks:
            for j in range(1, 3):  # –ü–æ 2 —Å–æ—Ä—Ç–∞ –Ω–∞ —Å–∏–¥–±–∞–Ω–∫
                strain_name = f"AutoStrain {timestamp}_{seedbank_id}_{j}"
                success = self.create_strain_auto(strain_name, seedbank_id, delay)

        # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤
        created_strains = Strain.objects.filter(
            name__startswith=f"AutoStrain {timestamp}_"
        ).values_list('id', flat=True)

        # –§–ê–ó–ê 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
        self.logger.info("\nüì¶ –§–ê–ó–ê 3: –°–û–ó–î–ê–ù–ò–ï –¢–û–í–ê–†–û–í –ù–ê –°–ö–õ–ê–î–ï")

        for strain_id in created_strains:
            for k in range(1, 3):  # –ü–æ 2 —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–æ—Ä—Ç
                success = self.create_stock_item_auto(strain_id, delay)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info("\nüéâ –≠–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        self.logger.info("=" * 60)
        self.logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   üå± –°–æ–∑–¥–∞–Ω–æ —Å–∏–¥–±–∞–Ω–∫–æ–≤: {self.results['seedbanks_created']}")
        self.logger.info(f"   üåø –°–æ–∑–¥–∞–Ω–æ —Å–æ—Ä—Ç–æ–≤: {self.results['strains_created']}")
        self.logger.info(f"   üì¶ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.results['stock_items_created']}")
        self.logger.info(f"   üéØ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {self.results['total_operations']}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.show_browser_page(f"{self.base_url}/store_admin/",
                              "–§–∏–Ω–∞–ª: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", delay * 2)

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        delay = options.get('delay', 2)
        count = options.get('count', 10)

        self.logger.info("üöÄ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –≠–ú–£–õ–Ø–¶–ò–Ø –ê–î–ú–ò–ù–ö–ò")
        self.logger.info("üé≠ –í–°–ï –ü–†–û–ò–°–•–û–î–ò–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò - –ü–†–û–°–¢–û –ù–ê–ë–õ–Æ–î–ê–ô–¢–ï!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        emulation_thread = threading.Thread(
            target=self.run_full_emulation,
            args=(delay, count)
        )
        emulation_thread.start()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        emulation_thread.join()

        self.logger.info("\nüéâ –í–°–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –≠–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        self.logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞–¥–º–∏–Ω–∫–µ")
