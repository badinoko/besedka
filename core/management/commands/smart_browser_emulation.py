#!/usr/bin/env python
"""
ü§ñ SMART BROWSER EMULATION - –£–º–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ "—Å—É–º–∞—Å—à–µ–¥—à–µ–≥–æ" –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
- –†–∞–±–æ—Ç–∞–µ—Ç –≤ –û–î–ù–û–ô –≤–∫–ª–∞–¥–∫–µ (–Ω–µ —Å–ø–∞–º–∏—Ç –±—Ä–∞—É–∑–µ—Ä)
- –í—ã–ø–æ–ª–Ω—è–µ—Ç –†–ï–ê–õ–¨–ù–´–ï CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
- –°–æ–∑–¥–∞–µ—Ç —Å–∏–¥–±–∞–Ω–∫–∏, —Å–æ—Ä—Ç–∞, —Ç–æ–≤–∞—Ä—ã
- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç, —É–¥–∞–ª—è–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç
- –ö–ª–∏–∫–∞–µ—Ç –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
- –ü–æ–¥—Ä–æ–±–Ω–µ–π—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–ó–∞–ø—É—Å–∫: python manage.py smart_browser_emulation
"""

import os
import sys
import time
import json
import logging
import webbrowser
import requests
from datetime import datetime
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.test import Client
from django.conf import settings
from django.db import transaction
from django.apps import apps
from bs4 import BeautifulSoup
import re

class Command(BaseCommand):
    help = 'ü§ñ –£–º–Ω–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏'

    def __init__(self):
        super().__init__()
        self.setup_logging()
        self.test_results = {
            'start_time': datetime.now().isoformat(),
            'actions': [],
            'crud_operations': [],
            'errors': [],
            'created_objects': []
        }
        self.base_url = 'http://127.0.0.1:8000'
        self.session = requests.Session()
        self.csrf_token = None

    def setup_logging(self):
        """–î–µ—Ç–∞–ª—å–Ω–µ–π—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        log_dir = os.path.join(settings.BASE_DIR, 'logs')
        os.makedirs(log_dir, exist_ok=True)

        log_file = os.path.join(log_dir, f'smart_emulation_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

        self.logger = logging.getLogger('smart_emulation')
        self.logger.setLevel(logging.DEBUG)

        formatter = logging.Formatter(
            '[%(asctime)s] [%(levelname)s] %(message)s',
            datefmt='%H:%M:%S'
        )

        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

        self.log_file = log_file

    def add_arguments(self, parser):
        parser.add_argument(
            '--role',
            type=str,
            choices=['store_owner', 'store_admin'],
            default='store_admin',
            help='–†–æ–ª—å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏'
        )
        parser.add_argument(
            '--delay',
            type=int,
            default=3,
            help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
        )
        parser.add_argument(
            '--crazy-mode',
            action='store_true',
            help='–†–µ–∂–∏–º —Å—É–º–∞—Å—à–µ–¥—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π'
        )

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        self.logger.info("ü§ñ –ù–ê–ß–ò–ù–ê–ï–ú –£–ú–ù–£–Æ –ë–†–ê–£–ó–ï–†–ù–£–Æ –≠–ú–£–õ–Ø–¶–ò–Æ")
        self.logger.info("=" * 80)

        role = options.get('role', 'store_admin')
        self.delay = options.get('delay', 3)
        crazy_mode = options.get('crazy_mode', False)

        try:
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            self.create_test_data()
            user = self.get_test_user(role)
            self.authenticate_user(user)
            self.get_csrf_token()

            # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –û–î–ù–£ –≤–∫–ª–∞–¥–∫—É
            self.open_main_tab(role)

            # 3. –≠–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            if role == 'store_admin':
                self.emulate_crazy_store_admin(crazy_mode)
            elif role == 'store_owner':
                self.emulate_store_owner_scenarios()

            # 4. –û—Ç—á–µ—Ç
            self.generate_detailed_report()

        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        finally:
            self.logger.info(f"üìÑ –õ–û–ì–ò: {self.log_file}")

    def create_test_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        User = get_user_model()

        try:
            with transaction.atomic():
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
                store_admin, created = User.objects.get_or_create(
                    username='smart_store_admin',
                    defaults={
                        'name': '–£–º–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'role': 'store_admin',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '77777777'
                    }
                )

                # –í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞
                store_owner, created = User.objects.get_or_create(
                    username='smart_store_owner',
                    defaults={
                        'name': '–£–º–Ω—ã–π –í–ª–∞–¥–µ–ª–µ—Ü',
                        'role': 'store_owner',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '66666666'
                    }
                )

                self.assign_permissions(store_admin, store_owner)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def assign_permissions(self, store_admin, store_owner):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ permissions"""
        from django.contrib.auth.models import Permission

        try:
            store_permissions = Permission.objects.filter(
                content_type__app_label='magicbeans_store'
            )

            store_owner.user_permissions.set(store_permissions)
            store_admin.user_permissions.set(store_permissions)

            self.logger.info("‚úÖ Permissions –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ permissions: {e}")

    def get_test_user(self, role):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        User = get_user_model()
        username = f'smart_{role}'

        try:
            user = User.objects.get(username=username)
            self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω")
            return user
        except User.DoesNotExist:
            self.logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)

    def authenticate_user(self, user):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        self.logger.info(f"üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {user.username}")

        client = Client()
        client.force_login(user)
        session_key = client.session.session_key
        self.session.cookies.set('sessionid', session_key)

        self.logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    def get_csrf_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞"""
        try:
            response = self.session.get(f"{self.base_url}/store_admin/")
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                csrf_input = soup.find('input', {'name': 'csrfmiddlewaretoken'})
                if csrf_input:
                    self.csrf_token = csrf_input.get('value')
                    self.logger.info("‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ cookie
                    csrf_cookie = self.session.cookies.get('csrftoken')
                    if csrf_cookie:
                        self.csrf_token = csrf_cookie
                        self.logger.info("‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ cookie")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF: {e}")

    def open_main_tab(self, role):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –û–î–ù–£ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É"""
        url = f"/{role}/"
        full_url = f"{self.base_url}{url}"

        self.logger.info(f"üåê –û–¢–ö–†–´–í–ê–ï–ú –ì–õ–ê–í–ù–£–Æ –í–ö–õ–ê–î–ö–£: {full_url}")
        webbrowser.open(full_url)
        time.sleep(self.delay)

    def emulate_crazy_store_admin(self, crazy_mode=False):
        """–≠–º—É–ª—è—Ü–∏—è —Å—É–º–∞—Å—à–µ–¥—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.logger.info("ü§™ –≠–ú–£–õ–Ø–¶–ò–Ø –°–£–ú–ê–°–®–ï–î–®–ï–ì–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê!")
        self.logger.info("-" * 60)

        scenarios = [
            self.scenario_create_multiple_seedbanks,
            self.scenario_create_strains_with_errors,
            self.scenario_mass_stock_operations,
            self.scenario_delete_and_restore,
            self.scenario_bulk_edit_operations
        ]

        if crazy_mode:
            # –í —Å—É–º–∞—Å—à–µ–¥—à–µ–º —Ä–µ–∂–∏–º–µ –¥–µ–ª–∞–µ–º –í–°–Å
            for scenario in scenarios:
                try:
                    scenario()
                    time.sleep(self.delay)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {scenario.__name__}: {e}")
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                self.scenario_create_multiple_seedbanks()
                time.sleep(self.delay)
                self.scenario_create_strains_with_errors()
                time.sleep(self.delay)
                self.scenario_mass_stock_operations()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö: {e}")

    def scenario_create_multiple_seedbanks(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–¥–±–∞–Ω–∫–æ–≤"""
        self.logger.info("üé¨ –°–¶–ï–ù–ê–†–ò–ô: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–¥–±–∞–Ω–∫–æ–≤")

        seedbanks = [
            {
                'name': f'Premium Seeds {datetime.now().strftime("%H%M%S")}',
                'description': '–ü—Ä–µ–º–∏—É–º —Å–µ–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤',
                'website': 'https://premium-seeds.com',
                'is_active': True
            },
            {
                'name': f'Budget Seeds {datetime.now().strftime("%H%M%S")}',
                'description': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–º–µ–Ω–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                'website': 'https://budget-seeds.com',
                'is_active': True
            },
            {
                'name': f'Exotic Seeds {datetime.now().strftime("%H%M%S")}',
                'description': '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Ä–µ–¥–∫–∏–µ —Å–æ—Ä—Ç–∞',
                'website': 'https://exotic-seeds.com',
                'is_active': False  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            }
        ]

        for i, seedbank_data in enumerate(seedbanks, 1):
            self.logger.info(f"   üìù –°–æ–∑–¥–∞–µ–º —Å–∏–¥–±–∞–Ω–∫ {i}/{len(seedbanks)}: {seedbank_data['name']}")

            success = self.perform_crud_operation(
                'CREATE',
                'SeedBank',
                '/store_admin/magicbeans_store/seedbank/add/',
                seedbank_data
            )

            if success:
                self.test_results['created_objects'].append({
                    'type': 'SeedBank',
                    'name': seedbank_data['name'],
                    'data': seedbank_data
                })

            time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏

    def scenario_create_strains_with_errors(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä—Ç–æ–≤ —Å –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏"""
        self.logger.info("üé¨ –°–¶–ï–ù–ê–†–ò–ô: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä—Ç–æ–≤ (—Å –æ—à–∏–±–∫–∞–º–∏)")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–¥–±–∞–Ω–∫–∏
        try:
            SeedBank = apps.get_model('magicbeans_store', 'SeedBank')
            seedbanks = list(SeedBank.objects.all())

            if not seedbanks:
                self.logger.warning("   ‚ö†Ô∏è –ù–µ—Ç —Å–∏–¥–±–∞–Ω–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–æ–≤")
                return

            strains = [
                {
                    'name': f'White Widow {datetime.now().strftime("%H%M%S")}',
                    'seedbank': seedbanks[0].id,
                    'strain_type': 'hybrid',
                    'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–∏–±—Ä–∏–¥ —Å –≤—ã—Å–æ–∫–∏–º –¢–ì–ö',
                    'thc_content': 22.5,
                    'cbd_content': 0.8,
                    'flowering_time': 60,
                    'is_active': True
                },
                {
                    'name': '',  # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–µ –∏–º—è - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
                    'seedbank': seedbanks[0].id,
                    'strain_type': 'indica',
                    'description': '–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º',
                    'is_active': True
                },
                {
                    'name': f'Northern Lights {datetime.now().strftime("%H%M%S")}',
                    'seedbank': 999999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–¥–±–∞–Ω–∫
                    'strain_type': 'indica',
                    'description': '–¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–¥–±–∞–Ω–∫–æ–º',
                    'is_active': True
                }
            ]

            for i, strain_data in enumerate(strains, 1):
                name = strain_data.get('name', '–ü–£–°–¢–û–ï –ò–ú–Ø')
                self.logger.info(f"   üìù –°–æ–∑–¥–∞–µ–º —Å–æ—Ä—Ç {i}/{len(strains)}: {name}")

                success = self.perform_crud_operation(
                    'CREATE',
                    'Strain',
                    '/store_admin/magicbeans_store/strain/add/',
                    strain_data
                )

                if success:
                    self.test_results['created_objects'].append({
                        'type': 'Strain',
                        'name': strain_data.get('name', 'unnamed'),
                        'data': strain_data
                    })

                time.sleep(1)

        except Exception as e:
            self.logger.error(f"   üí• –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ—Ä—Ç–æ–≤: {e}")

    def scenario_mass_stock_operations(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        self.logger.info("üé¨ –°–¶–ï–ù–ê–†–ò–ô: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏")

        try:
            Strain = apps.get_model('magicbeans_store', 'Strain')
            strains = list(Strain.objects.filter(is_active=True))

            if not strains:
                self.logger.warning("   ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
                return

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ñ–∞—Å–æ–≤–æ–∫
            seed_counts = [1, 3, 5, 10, 25]

            for strain in strains[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ—Ä—Ç–∞
                for seed_count in seed_counts:
                    stock_data = {
                        'strain': strain.id,
                        'seeds_count': seed_count,
                        'price': 500 + (seed_count * 200),  # –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∞—Å–æ–≤–∫–∏
                        'quantity': 50 - (seed_count * 2),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                        'description': f'{strain.name} - {seed_count} —Å–µ–º—è–Ω',
                        'is_active': True
                    }

                    self.logger.info(f"   üì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä: {strain.name} ({seed_count} —Å–µ–º—è–Ω)")

                    success = self.perform_crud_operation(
                        'CREATE',
                        'StockItem',
                        '/store_admin/magicbeans_store/stockitem/add/',
                        stock_data
                    )

                    if success:
                        self.test_results['created_objects'].append({
                            'type': 'StockItem',
                            'name': f"{strain.name} ({seed_count} —Å–µ–º—è–Ω)",
                            'data': stock_data
                        })

                    time.sleep(0.5)  # –ë—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

        except Exception as e:
            self.logger.error(f"   üí• –û—à–∏–±–∫–∞ –≤ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: {e}")

    def scenario_delete_and_restore(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –£–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.logger.info("üé¨ –°–¶–ï–ù–ê–†–ò–ô: –£–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        # –≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–º
        self.logger.info("   ‚è≠Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω")

    def scenario_bulk_edit_operations(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.info("üé¨ –°–¶–ï–ù–ê–†–ò–ô: –ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        # –≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–º
        self.logger.info("   ‚è≠Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω")

    def perform_crud_operation(self, operation, model_name, url, data):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        full_url = f"{self.base_url}{url}"

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω
            if self.csrf_token:
                data['csrfmiddlewaretoken'] = self.csrf_token

            # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
            response = self.session.post(full_url, data=data)

            operation_info = {
                'operation': operation,
                'model': model_name,
                'url': url,
                'data': data,
                'status_code': response.status_code,
                'timestamp': datetime.now().isoformat()
            }

            if response.status_code in [200, 201, 302]:
                self.logger.info(f"   ‚úÖ {operation} {model_name} —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                operation_info['success'] = True
                self.test_results['crud_operations'].append(operation_info)
                return True
            else:
                self.logger.error(f"   ‚ùå {operation} {model_name} –æ—à–∏–±–∫–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                operation_info['success'] = False
                operation_info['error'] = f"HTTP {response.status_code}"

                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –æ—à–∏–±–∫–∏ –∏–∑ HTML
                if response.text:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    errors = soup.find_all(class_='errorlist')
                    if errors:
                        error_texts = [error.get_text(strip=True) for error in errors]
                        operation_info['form_errors'] = error_texts
                        self.logger.error(f"   üìù –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã: {', '.join(error_texts)}")

                self.test_results['crud_operations'].append(operation_info)
                return False

        except Exception as e:
            self.logger.error(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ {operation} {model_name}: {e}")
            self.test_results['errors'].append({
                'operation': operation,
                'model': model_name,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            return False

    def emulate_store_owner_scenarios(self):
        """–≠–º—É–ª—è—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        self.logger.info("üè™ –≠–ú–£–õ–Ø–¶–ò–Ø –í–õ–ê–î–ï–õ–¨–¶–ê –ú–ê–ì–ê–ó–ò–ù–ê")
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        self.logger.info("   ‚è≠Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def generate_detailed_report(self):
        """–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
        self.logger.info("\nüìä –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –£–ú–ù–û–ô –≠–ú–£–õ–Ø–¶–ò–ò")
        self.logger.info("=" * 60)

        total_operations = len(self.test_results['crud_operations'])
        successful_operations = len([op for op in self.test_results['crud_operations'] if op.get('success')])
        total_errors = len(self.test_results['errors'])
        created_objects = len(self.test_results['created_objects'])

        self.logger.info(f"‚ö° CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_operations}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {successful_operations}")
        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations - successful_operations}")
        self.logger.info(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {total_errors}")
        self.logger.info(f"üéØ –û–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {created_objects}")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
        model_stats = {}
        for op in self.test_results['crud_operations']:
            model = op['model']
            if model not in model_stats:
                model_stats[model] = {'total': 0, 'success': 0}
            model_stats[model]['total'] += 1
            if op.get('success'):
                model_stats[model]['success'] += 1

        self.logger.info("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–û–î–ï–õ–Ø–ú:")
        for model, stats in model_stats.items():
            success_rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
            self.logger.info(f"   {model}: {stats['success']}/{stats['total']} ({success_rate:.1f}%)")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = os.path.join(settings.BASE_DIR, 'logs', f'smart_emulation_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2)
            self.logger.info(f"\nüíæ –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢: {report_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

        self.logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if total_errors > 0:
            self.logger.info("   üîß –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        if successful_operations < total_operations:
            self.logger.info("   üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        if successful_operations == total_operations and total_errors == 0:
            self.logger.info("   üéâ –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")

        self.test_results['end_time'] = datetime.now().isoformat()
