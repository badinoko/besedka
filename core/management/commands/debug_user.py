from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.utils.translation import gettext_lazy as _

User = get_user_model()

class Command(BaseCommand):
    help = _('–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º')

    def add_arguments(self, parser):
        parser.add_argument('username', type=str, help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')

    def handle(self, *args, **options):
        username = options['username']

        try:
            user = User.objects.get(username=username)

            self.stdout.write(self.style.SUCCESS(f'\nüîç –û–¢–õ–ê–î–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {username}'))
            self.stdout.write('=' * 50)

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.stdout.write(f'üë§ Username: {user.username}')
            self.stdout.write(f'üìß Email: {user.email}')
            self.stdout.write(f'üé≠ Role: {getattr(user, "role", "–ù–ï–¢ –ê–¢–†–ò–ë–£–¢–ê ROLE!")}')
            self.stdout.write(f'‚öôÔ∏è is_staff: {user.is_staff}')
            self.stdout.write(f'üëë is_superuser: {user.is_superuser}')
            self.stdout.write(f'‚úÖ is_active: {user.is_active}')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.stdout.write('\nüìä –í–°–ï –ê–¢–†–ò–ë–£–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:')
            for attr in dir(user):
                if not attr.startswith('_') and not callable(getattr(user, attr)):
                    try:
                        value = getattr(user, attr)
                        self.stdout.write(f'   {attr}: {value}')
                    except:
                        pass

            # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.stdout.write('\nüéØ –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:')

            if not user.is_staff:
                self.stdout.write(self.style.ERROR('   ‚ùå –ù–ï–¢ –ü–†–ê–í STAFF ‚Üí –û–¢–ö–ê–ó –í –î–û–°–¢–£–ü–ï'))
            elif user.is_superuser:
                self.stdout.write(self.style.WARNING('   üèõÔ∏è SUPERUSER ‚Üí /standard-admin/'))
            elif getattr(user, 'role', None) in ['owner', 'admin']:
                self.stdout.write(self.style.SUCCESS('   üëë –í–õ–ê–î–ï–õ–ï–¶/–ê–î–ú–ò–ù –ü–õ–ê–¢–§–û–†–ú–´ ‚Üí /owner-admin/'))
            elif getattr(user, 'role', None) in ['store_owner', 'store_admin']:
                self.stdout.write(self.style.SUCCESS('   üõçÔ∏è –í–õ–ê–î–ï–õ–ï–¶/–ê–î–ú–ò–ù –ú–ê–ì–ê–ó–ò–ù–ê ‚Üí /store-admin/'))
            elif user.is_staff:
                self.stdout.write(self.style.HTTP_INFO('   ‚öôÔ∏è STAFF –ë–ï–ó –†–û–õ–ò ‚Üí /admin-selector/'))
            else:
                self.stdout.write(self.style.ERROR('   ‚ùå –ù–ï –ü–û–î–•–û–î–ò–¢ –ù–ò –û–î–ò–ù –í–ê–†–ò–ê–ù–¢'))

        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω'))
