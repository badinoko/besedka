#!/usr/bin/env python
"""
üéØ REAL ADMIN EMULATION - –†–µ–∞–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ –ë–î

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–ê–°–¢–û–Ø–©–ò–ï –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
- –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å permissions
- –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
- –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ

–ó–∞–ø—É—Å–∫: python manage.py real_admin_emulation
"""

import os
import time
import json
import logging
import webbrowser
import requests
from datetime import datetime
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.test import Client
from django.conf import settings
from django.db import transaction
from django.apps import apps
from bs4 import BeautifulSoup

class Command(BaseCommand):
    help = 'üéØ –†–µ–∞–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ –ë–î'

    def __init__(self):
        super().__init__()
        self.setup_logging()
        self.base_url = 'http://127.0.0.1:8000'
        self.session = requests.Session()
        self.csrf_token = None
        self.operations = []

    def setup_logging(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        log_dir = os.path.join(settings.BASE_DIR, 'logs')
        os.makedirs(log_dir, exist_ok=True)

        log_file = os.path.join(log_dir, f'real_emulation_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

        self.logger = logging.getLogger('real_emulation')
        self.logger.setLevel(logging.INFO)

        formatter = logging.Formatter(
            '[%(asctime)s] %(message)s',
            datefmt='%H:%M:%S'
        )

        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

        self.log_file = log_file

    def add_arguments(self, parser):
        parser.add_argument(
            '--delay',
            type=int,
            default=3,
            help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
        )

    def handle(self, *args, **options):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        self.delay = options.get('delay', 3)

        self.logger.info("üéØ –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –≠–ú–£–õ–Ø–¶–ò–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
        self.logger.info("=" * 80)
        self.logger.info("üî• –≠–¢–ê –≠–ú–£–õ–Ø–¶–ò–Ø –°–û–ó–î–ê–ï–¢ –ù–ê–°–¢–û–Ø–©–ò–ï –û–ë–™–ï–ö–¢–´ –í –ë–î!")

        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.create_admin_user()

            # 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            self.authenticate_user(user)

            # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
            self.get_csrf_token()

            # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–¥–±–∞–Ω–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            seedbank_id = self.ensure_seedbank_exists()

            # 5. –†–ï–ê–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –°–û–†–¢–ê
            strain_data = self.create_real_strain(seedbank_id)

            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
            self.verify_strain_in_database(strain_data)

            # 7. –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            self.show_results_in_browser()

            # 8. –û—Ç—á–µ—Ç
            self.generate_report()

        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        finally:
            self.logger.info(f"üìÑ –õ–û–ì–ò: {self.log_file}")

    def create_admin_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏"""
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞...")

        User = get_user_model()

        try:
            with transaction.atomic():
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user, created = User.objects.get_or_create(
                    username='real_store_admin',
                    defaults={
                        'name': '–†–µ–∞–ª—å–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'role': 'store_admin',
                        'is_staff': True,
                        'is_active': True,
                        'telegram_id': '12345678'
                    }
                )

                # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
                from django.contrib.auth.models import Permission
                store_permissions = Permission.objects.filter(
                    content_type__app_label='magicbeans_store'
                )
                user.user_permissions.set(store_permissions)

                if created:
                    self.logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
                else:
                    self.logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω")

                self.logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
                self.logger.info(f"   üé≠ –†–æ–ª—å: {user.role}")
                self.logger.info(f"   üîê Staff: {user.is_staff}")
                self.logger.info(f"   üìú Permissions: {user.user_permissions.count()}")

                return user

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise

    def authenticate_user(self, user):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.logger.info("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django Test Client –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è session
        client = Client()
        client.force_login(user)
        session_key = client.session.session_key

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –≤ requests session
        self.session.cookies.set('sessionid', session_key, domain='127.0.0.1')

        self.logger.info(f"‚úÖ Session ID: {session_key[:20]}...")

    def get_csrf_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞"""
        self.logger.info("üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞...")

        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª—é–±—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF
            response = self.session.get(f"{self.base_url}/store_admin/")

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                csrf_input = soup.find('input', {'name': 'csrfmiddlewaretoken'})

                if csrf_input:
                    self.csrf_token = csrf_input.get('value')
                    self.logger.info(f"‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.csrf_token[:20]}...")
                else:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ cookies
                    csrf_cookie = self.session.cookies.get('csrftoken')
                    if csrf_cookie:
                        self.csrf_token = csrf_cookie
                        self.logger.info("‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ cookie")
                    else:
                        self.logger.warning("‚ö†Ô∏è CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ: {response.status_code}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF: {e}")

    def ensure_seedbank_exists(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –µ—Å—Ç—å —Å–∏–¥–±–∞–Ω–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞"""
        self.logger.info("üå± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏–¥–±–∞–Ω–∫–∞...")

        try:
            SeedBank = apps.get_model('magicbeans_store', 'SeedBank')

            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–¥–±–∞–Ω–∫
            seedbank = SeedBank.objects.first()

            if seedbank:
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–¥–±–∞–Ω–∫: {seedbank.name} (ID: {seedbank.id})")
                return seedbank.id

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–¥–±–∞–Ω–∫
            self.logger.info("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–¥–±–∞–Ω–∫...")

            seedbank_data = {
                'name': f'Test SeedBank {datetime.now().strftime("%H%M%S")}',
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∏–¥–±–∞–Ω–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                'website': 'https://test-seedbank.com',
                'is_active': True,
                'csrfmiddlewaretoken': self.csrf_token
            }

            response = self.session.post(
                f"{self.base_url}/store_admin/magicbeans_store/seedbank/add/",
                data=seedbank_data
            )

            if response.status_code in [200, 302]:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∏–¥–±–∞–Ω–∫
                seedbank = SeedBank.objects.filter(name=seedbank_data['name']).first()
                if seedbank:
                    self.logger.info(f"‚úÖ –°–∏–¥–±–∞–Ω–∫ —Å–æ–∑–¥–∞–Ω: {seedbank.name} (ID: {seedbank.id})")
                    return seedbank.id
                else:
                    self.logger.error("‚ùå –°–∏–¥–±–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–¥–±–∞–Ω–∫–∞: {response.status_code}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å —Å–∏–¥–±–∞–Ω–∫–æ–º: {e}")

        return None

    def create_real_strain(self, seedbank_id):
        """–†–ï–ê–õ–¨–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
        self.logger.info("üåø –°–û–ó–î–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô –°–û–†–¢ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
        self.logger.info("-" * 50)

        if not seedbank_id:
            self.logger.error("‚ùå –ù–µ—Ç —Å–∏–¥–±–∞–Ω–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ä—Ç–∞")
            return None

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö choices
        timestamp = datetime.now().strftime("%H%M%S")
        strain_names = ["White Widow", "Northern Lights", "AK-47", "Blueberry", "Amnesia Haze"]

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ–ª–∏
        strain_types = ["regular", "feminized", "autoflowering"]
        thc_contents = ["15-20", "20-25", "10-15", "25-30", "5-10"]
        cbd_contents = ["0-0.5", "0.5-1", "1-1.5", "1.5-2", "2-2.5"]
        flowering_times = ["8-10", "10-12", "6-8", "auto", "12+"]

        import random
        strain_name = f"{random.choice(strain_names)} {timestamp}"
        strain_type = random.choice(strain_types)

        strain_data = {
            'seedbank': seedbank_id,
            'name': strain_name,
            'strain_type': strain_type,
            'description': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. '
                          f'–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {strain_type} —Å–æ—Ä—Ç —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. '
                          f'–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –≥—Ä–æ–≤–µ—Ä–æ–≤.',
            'thc_content': random.choice(thc_contents),
            'cbd_content': random.choice(cbd_contents),
            'flowering_time': random.choice(flowering_times),
            'is_active': True,
            'csrfmiddlewaretoken': self.csrf_token
        }

        self.logger.info("üìù –ó–ê–ü–û–õ–ù–Ø–ï–ú –§–û–†–ú–£ –°–û–ó–î–ê–ù–ò–Ø –°–û–†–¢–ê:")
        self.logger.info(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {strain_data['name']}")
        self.logger.info(f"   ‚Ä¢ –°–∏–¥–±–∞–Ω–∫: ID {strain_data['seedbank']}")
        self.logger.info(f"   ‚Ä¢ –¢–∏–ø: {strain_data['strain_type']}")
        self.logger.info(f"   ‚Ä¢ –¢–ì–ö: {strain_data['thc_content']}")
        self.logger.info(f"   ‚Ä¢ –ö–ë–î: {strain_data['cbd_content']}")
        self.logger.info(f"   ‚Ä¢ –¶–≤–µ—Ç–µ–Ω–∏–µ: {strain_data['flowering_time']}")
        self.logger.info(f"   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {strain_data['description'][:50]}...")
        self.logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {strain_data['is_active']}")

        time.sleep(self.delay)  # –ü–∞—É–∑–∞ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è

        try:
            self.logger.info("üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú POST –ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï...")

            response = self.session.post(
                f"{self.base_url}/store_admin/magicbeans_store/strain/add/",
                data=strain_data
            )

            self.logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

            if response.status_code == 302:
                # 302 = —Ä–µ–¥–∏—Ä–µ–∫—Ç = —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                self.logger.info("‚úÖ –†–ï–î–ò–†–ï–ö–¢! –°–û–†–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")

                self.operations.append({
                    'action': 'create_strain',
                    'data': strain_data,
                    'status_code': response.status_code,
                    'timestamp': datetime.now().isoformat(),
                    'success': True
                })

                return strain_data

            elif response.status_code == 200:
                # 200 = —Ñ–æ—Ä–º–∞ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å —Å–Ω–æ–≤–∞ = –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                self.logger.error("‚ùå –°–¢–ê–¢–£–° 200 = –û–®–ò–ë–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò –í –§–û–†–ú–ï!")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ HTML
                soup = BeautifulSoup(response.text, 'html.parser')
                errors = soup.find_all(class_='errorlist')

                if errors:
                    self.logger.error("üìù –û–®–ò–ë–ö–ò –§–û–†–ú–´:")
                    for error in errors:
                        error_text = error.get_text(strip=True)
                        self.logger.error(f"   ‚Ä¢ {error_text}")
                else:
                    self.logger.error("üìù –û–®–ò–ë–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´ –í HTML, –ü–†–û–í–ï–†–Ø–ï–ú –î–†–£–ì–ò–ï –ú–ï–°–¢–ê...")

                    # –ò—â–µ–º –ª—é–±—ã–µ div —Å –∫–ª–∞—Å—Å–æ–º error
                    error_divs = soup.find_all('div', class_=lambda x: x and 'error' in x.lower())
                    for div in error_divs:
                        self.logger.error(f"   ‚Ä¢ {div.get_text(strip=True)}")

                    # –ò—â–µ–º ul —Å –æ—à–∏–±–∫–∞–º–∏
                    error_lists = soup.find_all('ul', class_=lambda x: x and 'error' in x.lower())
                    for ul in error_lists:
                        self.logger.error(f"   ‚Ä¢ {ul.get_text(strip=True)}")

                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å HTML
                    if not error_divs and not error_lists:
                        form_html = soup.find('form')
                        if form_html:
                            self.logger.error("üìù –ß–ê–°–¢–¨ HTML –§–û–†–ú–´:")
                            self.logger.error(f"   {str(form_html)[:500]}...")

                self.operations.append({
                    'action': 'create_strain',
                    'data': strain_data,
                    'status_code': response.status_code,
                    'timestamp': datetime.now().isoformat(),
                    'success': False,
                    'error': 'Form validation errors'
                })

                return None

            else:
                self.logger.error(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô HTTP –°–¢–ê–¢–£–°: {response.status_code}")

                self.operations.append({
                    'action': 'create_strain',
                    'data': strain_data,
                    'status_code': response.status_code,
                    'timestamp': datetime.now().isoformat(),
                    'success': False,
                    'error': f"HTTP {response.status_code}"
                })

                return None

        except Exception as e:
            self.logger.error(f"üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –°–û–†–¢–ê: {e}")
            return None

    def verify_strain_in_database(self, strain_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è –≤ –ë–î"""
        if not strain_data:
            return False

        self.logger.info("üîç –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–ó–£ –î–ê–ù–ù–´–•...")

        try:
            Strain = apps.get_model('magicbeans_store', 'Strain')

            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–æ—Ä—Ç
            strain = Strain.objects.filter(name=strain_data['name']).first()

            if strain:
                self.logger.info("üéâ –°–û–†–¢ –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
                self.logger.info(f"   üÜî ID: {strain.id}")
                self.logger.info(f"   üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {strain.name}")
                self.logger.info(f"   üè™ –°–∏–¥–±–∞–Ω–∫: {strain.seedbank.name}")
                self.logger.info(f"   üî¨ –¢–∏–ø: {strain.strain_type}")
                self.logger.info(f"   üåø –¢–ì–ö: {strain.thc_content}%")
                self.logger.info(f"   üíö –ö–ë–î: {strain.cbd_content}%")
                self.logger.info(f"   ‚è∞ –¶–≤–µ—Ç–µ–Ω–∏–µ: {strain.flowering_time} –¥–Ω–µ–π")
                self.logger.info(f"   ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {strain.is_active}")
                self.logger.info(f"   üìÖ –°–æ–∑–¥–∞–Ω: {strain.created_at}")

                # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ä—Ç–æ–≤
                total_strains = Strain.objects.count()
                self.logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ—Ä—Ç–æ–≤ –≤ –ë–î: {total_strains}")

                return True
            else:
                self.logger.error("‚ùå –°–û–†–¢ –ù–ï –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False

    def show_results_in_browser(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        self.logger.info("üåê –û–¢–ö–†–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í –ë–†–ê–£–ó–ï–†–ï...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤
        strains_url = f"{self.base_url}/store_admin/magicbeans_store/strain/"

        self.logger.info(f"üìã –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ä—Ç–æ–≤: {strains_url}")
        webbrowser.open(strains_url)

        time.sleep(self.delay)

        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        main_url = f"{self.base_url}/store_admin/"
        self.logger.info(f"üè† –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {main_url}")
        webbrowser.open(main_url)

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.logger.info("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–ï–ê–õ–¨–ù–û–ô –≠–ú–£–õ–Ø–¶–ò–ò")
        self.logger.info("=" * 60)

        total_operations = len(self.operations)
        successful_operations = len([op for op in self.operations if op.get('success')])

        self.logger.info(f"‚ö° –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_operations}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {successful_operations}")
        self.logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations - successful_operations}")

        if successful_operations > 0:
            self.logger.info("\nüéØ –£–°–ü–ï–®–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:")
            for op in self.operations:
                if op.get('success'):
                    action = op['action']
                    data = op['data']
                    if action == 'create_strain':
                        self.logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ä—Ç: {data['name']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
        report_file = os.path.join(settings.BASE_DIR, 'logs', f'real_emulation_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json')
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.operations, f, ensure_ascii=False, indent=2)
            self.logger.info(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

        if successful_operations == total_operations and total_operations > 0:
            self.logger.info("\nüéâ –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            self.logger.info("   üåø –°–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self.logger.info("   üåê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            self.logger.info("   üìã –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π —Å–æ—Ä—Ç –≤ —Å–ø–∏—Å–∫–µ")
        else:
            self.logger.warning("\n‚ö†Ô∏è –ù–ï –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û")
            self.logger.info("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

        self.logger.info(f"\nüìÑ –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò: {self.log_file}")
