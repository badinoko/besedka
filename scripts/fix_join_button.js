// –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ JOIN CHANNEL
print('üö´ –£–ë–ò–†–ê–Æ –ö–ù–û–ü–ö–£ JOIN CHANNEL...');

// 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
db.rocketchat_settings.updateOne(
    {_id: 'Accounts_Default_User_Preferences_joinDefaultChannels'},
    {$set: {value: true, _updatedAt: new Date()}},
    {upsert: true}
);
print('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ');

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ owner –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
const owner = db.users.findOne({username: 'owner'});
if (owner) {
    const channels = ['GENERAL', 'vip', 'moderators'];

    channels.forEach(channelId => {
        const room = db.rocketchat_room.findOne({_id: channelId});
        if (room) {
            const subscription = db.rocketchat_subscription.findOne({
                'u._id': owner._id,
                rid: channelId
            });

            if (!subscription) {
                print('üìù –°–æ–∑–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞: ' + room.name);
                db.rocketchat_subscription.insertOne({
                    _id: owner._id + channelId,
                    u: {_id: owner._id, username: owner.username},
                    rid: channelId,
                    name: room.name,
                    fname: room.fname || room.name,
                    t: room.t,
                    ts: new Date(),
                    ls: new Date(),
                    lr: new Date(),
                    f: false,
                    open: true,
                    alert: false,
                    roles: ['owner'],
                    unread: 0,
                    _updatedAt: new Date()
                });
                print('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ' + room.name);
            } else {
                print('‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å: ' + room.name);
            }
        }
    });
}

print('üéâ –ì–û–¢–û–í–û! –ö–Ω–æ–ø–∫–∞ Join channel –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è!');
