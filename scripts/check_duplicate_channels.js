// –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ö–ê–ù–ê–õ–û–í

print('üîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ö–ê–ù–ê–õ–û–í...');

// –ò—â–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å –∏–º–µ–Ω–µ–º "general"
const generalChannels = db.rocketchat_room.find({ name: 'general' }).toArray();

print(`–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏–º–µ–Ω–µ–º "general": ${generalChannels.length}`);
print('');

generalChannels.forEach((channel, index) => {
    print(`–ö–∞–Ω–∞–ª ${index + 1}:`);
    print(`  –ò–º—è: ${channel.name}`);
    print(`  ID: ${channel._id}`);
    print(`  –¢–∏–ø: ${channel.t}`);
    print(`  –°–æ–∑–¥–∞–Ω: ${channel.ts}`);
    print(`  –°–æ–æ–±—â–µ–Ω–∏–π: ${channel.msgs || 0}`);
    print(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${channel.usersCount || 0}`);
    print('---');
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã
print('\nüìã –ü–û–î–ü–ò–°–ö–ò –ù–ê –ö–ê–ù–ê–õ–´:');
generalChannels.forEach((channel, index) => {
    const subscriptions = db.rocketchat_subscription.find({ rid: channel._id }).toArray();
    print(`–ö–∞–Ω–∞–ª ${channel._id}: ${subscriptions.length} –ø–æ–¥–ø–∏—Å–æ–∫`);
    subscriptions.forEach(sub => {
        print(`  - ${sub.u.username}`);
    });
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
print('\nüí¨ –°–û–û–ë–©–ï–ù–ò–Ø –í –ö–ê–ù–ê–õ–ê–•:');
generalChannels.forEach((channel, index) => {
    const messages = db.rocketchat_message.countDocuments({ rid: channel._id });
    print(`–ö–∞–Ω–∞–ª ${channel._id}: ${messages} —Å–æ–æ–±—â–µ–Ω–∏–π`);
});

print('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
if (generalChannels.length > 1) {
    print('‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –ö–ê–ù–ê–õ–´!');
    print('   –ù—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–π
    const mainChannel = generalChannels.find(c => c._id === 'GENERAL') || generalChannels[0];
    const duplicateChannels = generalChannels.filter(c => c._id !== mainChannel._id);

    print(`   –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: ${mainChannel._id}`);
    duplicateChannels.forEach(dup => {
        print(`   –î—É–±–ª–∏—Ä—É—é—â–∏–π –∫–∞–Ω–∞–ª: ${dup._id}`);
    });
}

print('\n–ì–û–¢–û–í–û!');
