// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∫–∞–Ω–∞–ª–∞–º
// –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∫–Ω–æ–ø–∫–æ–π "Join the Channel"
// –î–∞—Ç–∞: 23 –∏—é–Ω—è 2025

print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º...");

const db = db.getSiblingDB('rocketchat');

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è owner
const ownerUser = db.users.findOne({username: "owner"});
if (!ownerUser) {
    print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    quit();
}
print("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner:", ownerUser.username, ownerUser._id);

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
const channels = db.rocketchat_room.find({
    name: {$in: ["general", "vip", "moderators"]}
}, {
    name: 1,
    _id: 1,
    joinCodeRequired: 1,
    broadcast: 1,
    default: 1,
    t: 1
}).toArray();

print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:");
channels.forEach(channel => {
    print(`   - ${channel.name} (${channel._id})`);
    print(`     Type: ${channel.t}, JoinCode: ${channel.joinCodeRequired}, Default: ${channel.default}`);
});

// –†–ï–®–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
print("\nüîß –†–ï–®–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º joinCodeRequired –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤");
const result1 = db.rocketchat_room.updateMany(
    {name: {$in: ["general", "vip", "moderators"]}},
    {$unset: {joinCodeRequired: 1}}
);
print(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${result1.modifiedCount}`);

// –†–ï–®–ï–ù–ò–ï 2: –î–µ–ª–∞–µ–º general –∫–∞–Ω–∞–ª –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
print("\nüîß –†–ï–®–ï–ù–ò–ï 2: –î–µ–ª–∞–µ–º general –∫–∞–Ω–∞–ª –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º");
const result2 = db.rocketchat_room.updateOne(
    {name: "general"},
    {$set: {default: true}}
);
print(`‚úÖ General –∫–∞–Ω–∞–ª —Å–¥–µ–ª–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º: ${result2.modifiedCount > 0}`);

// –†–ï–®–ï–ù–ò–ï 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è owner –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
print("\nüîß –†–ï–®–ï–ù–ò–ï 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è owner");

channels.forEach(channel => {
    const existingSub = db.rocketchat_subscription.findOne({
        "u._id": ownerUser._id,
        rid: channel._id
    });

    if (!existingSub) {
        const subscription = {
            _id: `${channel._id}${ownerUser._id}`,
            t: channel.t || "p",
            ts: new Date(),
            name: channel.name,
            fname: channel.name,
            rid: channel._id,
            open: true,
            alert: false,
            unread: 0,
            userMentions: 0,
            groupMentions: 0,
            u: {
                _id: ownerUser._id,
                username: ownerUser.username
            },
            roles: getChannelRoles(channel.name)
        };

        db.rocketchat_subscription.insertOne(subscription);
        print(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è owner –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name}`);
    } else {
        print(`‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ
function getChannelRoles(channelName) {
    switch(channelName) {
        case "general":
            return ["owner"];
        case "vip":
            return ["owner", "vip"];
        case "moderators":
            return ["owner", "moderator"];
        default:
            return [];
    }
}

// –†–ï–®–ï–ù–ò–ï 4: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OAuth –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
print("\nüîß –†–ï–®–ï–ù–ò–ï 4: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OAuth –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º");

const oauthSettings = [
    {
        _id: "Accounts_OAuth_Custom-BesedkaRocketChat2025-map_channels",
        value: true,
        type: "boolean"
    },
    {
        _id: "Accounts_OAuth_Custom-BesedkaRocketChat2025-channels_default",
        value: "general",
        type: "string"
    }
];

oauthSettings.forEach(setting => {
    const result = db.rocketchat_settings.updateOne(
        {_id: setting._id},
        {$set: {value: setting.value, type: setting.type}},
        {upsert: true}
    );
    print(`‚úÖ OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ${setting._id}: ${setting.value}`);
});

print("\nüéØ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
const updatedChannels = db.rocketchat_room.find({
    name: {$in: ["general", "vip", "moderators"]}
}, {
    name: 1,
    _id: 1,
    joinCodeRequired: 1,
    default: 1
}).toArray();

updatedChannels.forEach(channel => {
    print(`üìã ${channel.name}:`);
    print(`   - ID: ${channel._id}`);
    print(`   - Join Code Required: ${channel.joinCodeRequired || "–ù–ï–¢"}`);
    print(`   - Default: ${channel.default || false}`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ owner
const ownerSubscriptions = db.rocketchat_subscription.find({
    "u._id": ownerUser._id
}, {
    name: 1,
    rid: 1,
    roles: 1
}).toArray();

print(`\nüë§ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è owner (–≤—Å–µ–≥–æ: ${ownerSubscriptions.length}):`);
ownerSubscriptions.forEach(sub => {
    print(`   - ${sub.name}: —Ä–æ–ª–∏ [${(sub.roles || []).join(", ")}]`);
});

print("\n‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ù–û!");
print("üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:");
print("   1. –£–±—Ä–∞–Ω –∫–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤");
print("   2. General —Å–¥–µ–ª–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º");
print("   3. –°–æ–∑–¥–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏");
print("   4. –ù–∞—Å—Ç—Ä–æ–µ–Ω OAuth –º–∞–ø–ø–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤");
print("\nüéâ –ö–Ω–æ–ø–∫–∞ 'Join the Channel' –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è!");
