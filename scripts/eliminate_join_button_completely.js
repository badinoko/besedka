// –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Join the Channel"
// –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è –¥–∞–∂–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
// –î–∞—Ç–∞: 23 –∏—é–Ω—è 2025

print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Join the Channel...");

const db = db.getSiblingDB('rocketchat');

// –†–ï–®–ï–ù–ò–ï 1: –î–µ–ª–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
print("\nüîß –†–ï–®–ï–ù–ò–ï 1: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");

const channels = ['general', 'vip', 'moderators'];
channels.forEach(channelName => {
    const result = db.rocketchat_room.updateOne(
        {name: channelName},
        {
            $set: {
                joinCodeRequired: false,
                default: channelName === 'general',
                // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                broadcast: false,
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
                autoJoin: true,
                // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–∏—Ç–∞—Ç—å
                sysMes: false
            }
        }
    );
    print(`‚úÖ –ö–∞–Ω–∞–ª ${channelName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${result.modifiedCount > 0}`);
});

// –†–ï–®–ï–ù–ò–ï 2: –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Rocket.Chat
print("\nüîß –†–ï–®–ï–ù–ò–ï 2: –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Rocket.Chat");

const usersToCreate = [
    {
        username: 'admin',
        name: 'Admin User',
        emails: [{address: 'admin@besedka.com', verified: true}],
        roles: ['user'],
        active: true,
        type: 'user'
    },
    {
        username: 'store_owner',
        name: 'Store Owner',
        emails: [{address: 'store.owner@magicbeans.com', verified: true}],
        roles: ['user'],
        active: true,
        type: 'user'
    },
    {
        username: 'store_admin',
        name: 'Store Admin',
        emails: [{address: 'store.admin@magicbeans.com', verified: true}],
        roles: ['user'],
        active: true,
        type: 'user'
    },
    {
        username: 'test_user',
        name: 'Test User',
        emails: [{address: 'test.user@besedka.com', verified: true}],
        roles: ['user'],
        active: true,
        type: 'user'
    }
];

usersToCreate.forEach(userData => {
    const existingUser = db.users.findOne({username: userData.username});
    if (!existingUser) {
        userData._id = userData.username + '_' + new Date().getTime();
        userData.createdAt = new Date();
        userData.services = {};
        userData.status = 'online';

        const result = db.users.insertOne(userData);
        print(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.username}`);
    } else {
        print(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
});

// –†–ï–®–ï–ù–ò–ï 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
print("\nüîß –†–ï–®–ï–ù–ò–ï 3: –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");

const allUsers = db.users.find({type: 'user'}).toArray();
const allChannels = db.rocketchat_room.find({name: {$in: channels}}).toArray();

allUsers.forEach(user => {
    print(`üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);

    allChannels.forEach(channel => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        const shouldHaveAccess = getChannelAccess(user.username, channel.name);

        if (shouldHaveAccess) {
            const existingSub = db.rocketchat_subscription.findOne({
                "u._id": user._id,
                rid: channel._id
            });

            if (!existingSub) {
                const subscription = {
                    _id: `${channel._id}${user._id}`,
                    t: channel.t || "c",
                    ts: new Date(),
                    name: channel.name,
                    fname: channel.name,
                    rid: channel._id,
                    open: true,
                    alert: false,
                    unread: 0,
                    userMentions: 0,
                    groupMentions: 0,
                    u: {
                        _id: user._id,
                        username: user.username
                    },
                    roles: getUserRolesInChannel(user.username, channel.name),
                    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    autoJoin: true,
                    joined: true
                };

                db.rocketchat_subscription.insertOne(subscription);
                print(`  ‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${channel.name}`);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                db.rocketchat_subscription.updateOne(
                    {"u._id": user._id, rid: channel._id},
                    {$set: {autoJoin: true, joined: true}}
                );
                print(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${channel.name}`);
            }
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
function getChannelAccess(username, channelName) {
    switch(channelName) {
        case 'general':
            return true; // –í—Å–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–µ–º—É —á–∞—Ç—É
        case 'vip':
            return username === 'owner'; // –¢–æ–ª—å–∫–æ owner
        case 'moderators':
            return username === 'owner' || username === 'admin'; // Owner + admin
        default:
            return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ
function getUserRolesInChannel(username, channelName) {
    switch(channelName) {
        case 'general':
            return username === 'owner' ? ['owner'] : [];
        case 'vip':
            return username === 'owner' ? ['owner', 'vip'] : [];
        case 'moderators':
            return username === 'owner' ? ['owner', 'moderator'] :
                   username === 'admin' ? ['moderator'] : [];
        default:
            return [];
    }
}

// –†–ï–®–ï–ù–ò–ï 4: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
print("\nüîß –†–ï–®–ï–ù–ò–ï 4: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Rocket.Chat");

const globalSettings = [
    {
        _id: "UI_Allow_room_names_with_special_chars",
        value: true,
        type: "boolean"
    },
    {
        _id: "Accounts_RegistrationForm_SecretURL",
        value: "",
        type: "string"
    },
    {
        _id: "UI_Use_Name_Avatar",
        value: true,
        type: "boolean"
    },
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    {
        _id: "Accounts_Default_User_Preferences_autoChannelJoin",
        value: true,
        type: "boolean"
    }
];

globalSettings.forEach(setting => {
    const result = db.rocketchat_settings.updateOne(
        {_id: setting._id},
        {$set: {value: setting.value, type: setting.type}},
        {upsert: true}
    );
    print(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${setting._id}: ${setting.value}`);
});

print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏
const finalUsers = db.users.find({type: 'user'}, {username: 1, _id: 1}).toArray();
print(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Rocket.Chat: ${finalUsers.length}`);

finalUsers.forEach(user => {
    const subs = db.rocketchat_subscription.find({"u._id": user._id}, {name: 1, autoJoin: 1, joined: 1}).toArray();
    print(`   ${user.username}: ${subs.length} –ø–æ–¥–ø–∏—Å–æ–∫`);
    subs.forEach(sub => {
        print(`     - ${sub.name}: autoJoin=${sub.autoJoin}, joined=${sub.joined}`);
    });
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
const finalChannels = db.rocketchat_room.find({name: {$in: channels}}, {name: 1, autoJoin: 1, default: 1, joinCodeRequired: 1}).toArray();
finalChannels.forEach(channel => {
    print(`üìã ${channel.name}: autoJoin=${channel.autoJoin}, default=${channel.default}, joinCode=${channel.joinCodeRequired}`);
});

print("\nüéâ –§–ò–ù–ê–õ–¨–ù–û–ï –£–°–¢–†–ê–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
print("üìù –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:");
print("   1. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ –Ω—É–∂–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º");
print("   2. –ö–Ω–æ–ø–∫–∞ Join the Channel –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ù–ò–ö–û–ì–î–ê");
print("   3. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏");
print("   4. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –¥–æ—Å—Ç—É–ø–æ–≤");
print("\nüöÄ ROCKET.CHAT –ì–û–¢–û–í –ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!");
