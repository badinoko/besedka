#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Rocket.Chat
–≠—Ç–æ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏!
"""

import subprocess
import json
import os
from datetime import datetime

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    return result.stdout.strip()

def backup_rocketchat():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Rocket.Chat"""
    print("üîµ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ Rocket.Chat...")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    backup_dir = "rocketchat_backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"{backup_dir}/rocketchat_backup_{timestamp}.json"

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB
    collections = [
        "rocketchat_settings",
        "users",
        "rocketchat_room",
        "rocketchat_oauth_apps"
    ]

    backup_data = {}

    for collection in collections:
        print(f"  üì¶ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é {collection}...")
        cmd = f'docker exec magic_beans_new-mongo-1 mongosh rocketchat --quiet --eval "JSON.stringify(db.{collection}.find().toArray())"'
        data = run_command(cmd)
        if data:
            try:
                backup_data[collection] = json.loads(data)
                print(f"  ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(backup_data[collection])} –∑–∞–ø–∏—Å–µ–π –∏–∑ {collection}")
            except json.JSONDecodeError:
                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {collection}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump(backup_data, f, ensure_ascii=False, indent=2)

    print(f"\n‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup_file}")

    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ø–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    latest_file = f"{backup_dir}/rocketchat_latest.json"
    with open(latest_file, 'w', encoding='utf-8') as f:
        json.dump(backup_data, f, ensure_ascii=False, indent=2)

    return backup_file

def restore_rocketchat(backup_file=None):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Rocket.Chat –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if not backup_file:
        backup_file = "rocketchat_backups/rocketchat_latest.json"

    if not os.path.exists(backup_file):
        print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
        return False

    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑: {backup_file}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(backup_file, 'r', encoding='utf-8') as f:
        backup_data = json.load(f)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JS —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    restore_script = """
// –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Rocket.Chat
const backup_data = %s;

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
Object.keys(backup_data).forEach(collection => {
    print(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é ${collection}...`);
    const data = backup_data[collection];

    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    db[collection].deleteMany({});

    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (data && data.length > 0) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        data.forEach(doc => {
            Object.keys(doc).forEach(key => {
                if (typeof doc[key] === 'string' && doc[key].match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/)) {
                    doc[key] = new Date(doc[key]);
                }
            });
        });

        db[collection].insertMany(data);
        print(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –≤ ${collection}`);
    }
});

print('\\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
""" % json.dumps(backup_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
    with open('restore_temp.js', 'w', encoding='utf-8') as f:
        f.write(restore_script)

    # –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
    run_command("docker cp restore_temp.js magic_beans_new-mongo-1:/tmp/")
    result = run_command("docker exec magic_beans_new-mongo-1 mongosh rocketchat /tmp/restore_temp.js")
    print(result)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove('restore_temp.js')

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Rocket.Chat
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é Rocket.Chat...")
    run_command("docker restart magic_beans_new-rocketchat-1")

    print("\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! Rocket.Chat –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys

    if len(sys.argv) > 1:
        if sys.argv[1] == "backup":
            backup_rocketchat()
        elif sys.argv[1] == "restore":
            restore_rocketchat()
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python scripts/backup_rocketchat.py backup   - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            print("  python scripts/backup_rocketchat.py restore  - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ø–∏–∏")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–ª–∞–µ–º –±—ç–∫–∞–ø
        backup_rocketchat()

if __name__ == "__main__":
    main()
