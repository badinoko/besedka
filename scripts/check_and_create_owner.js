// –ü–†–û–í–ï–†–ö–ê –ò –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø OWNER –í ROCKET.CHAT

print('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í ROCKET.CHAT');

// –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const allUsers = db.rocketchat_users.find({}, {username: 1, name: 1, active: 1}).toArray();
print(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Rocket.Chat: ${allUsers.length}`);

if (allUsers.length > 0) {
    print('\nüë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    allUsers.forEach(user => {
        print(`  - ${user.username} (${user.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}) - ${user.active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ owner
const ownerUser = db.rocketchat_users.findOne({username: 'owner'});
if (ownerUser) {
    print(`\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner –Ω–∞–π–¥–µ–Ω: ${ownerUser._id}`);
} else {
    print('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner –ù–ï –ù–ê–ô–î–ï–ù! –°–æ–∑–¥–∞—é...');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è owner
    const newUser = {
        _id: 'owner_' + new Date().getTime(),
        username: 'owner',
        name: '–í–ª–∞–¥–µ–ª–µ—Ü',
        emails: [{
            address: 'owner@besedka.local',
            verified: true
        }],
        active: true,
        type: 'user',
        roles: ['user', 'admin'],
        avatarOrigin: 'none',
        settings: {
            preferences: {
                language: 'ru'
            }
        },
        createdAt: new Date(),
        _updatedAt: new Date()
    };

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.rocketchat_users.insertOne(newUser);
    print(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner —Å–æ–∑–¥–∞–Ω —Å ID: ${newUser._id}`);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    const channels = db.rocketchat_room.find({t: 'c'}).toArray();
    print(`\nüìß –°–æ–∑–¥–∞—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤:`);

    channels.forEach(channel => {
        const subscription = {
            _id: newUser._id + channel._id,
            u: {
                _id: newUser._id,
                username: newUser.username,
                name: newUser.name
            },
            rid: channel._id,
            name: channel.name,
            fname: channel.fname || channel.name,
            t: channel.t,
            open: true,
            alert: false,
            unread: 0,
            roles: ['owner'],
            _updatedAt: new Date(),
            ts: new Date()
        };

        db.rocketchat_subscription.insertOne(subscription);
        print(`  ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name} —Å–æ–∑–¥–∞–Ω–∞`);
    });
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
print('\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
const finalOwner = db.rocketchat_users.findOne({username: 'owner'});
if (finalOwner) {
    print(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${finalOwner._id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptions = db.rocketchat_subscription.find({
        'u.username': 'owner'
    }).toArray();
    print(`‚úÖ –ü–æ–¥–ø–∏—Å–æ–∫ —É owner: ${subscriptions.length}`);

    subscriptions.forEach(sub => {
        print(`  - ${sub.name} (${sub.rid})`);
    });
} else {
    print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner –í–°–ï –ï–©–ï –ù–ï –ù–ê–ô–î–ï–ù!');
}

print('\n–ì–û–¢–û–í–û!');
