// –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Rocket.Chat —á–µ—Ä–µ–∑ mongosh
print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Rocket.Chat...");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const updates = [
    { _id: 'Site_Url', value: 'http://127.0.0.1:3000' },
    { _id: 'Accounts_Default_User_Preferences_joinDefaultChannels', value: true },
    { _id: 'Accounts_Default_User_Preferences_joinDefaultChannelsSilenced', value: false },
    { _id: 'Accounts_Default_User_Preferences_openChannelsOnLogin', value: 'general' },
    { _id: 'Show_Setup_Wizard', value: false },
    { _id: 'First_Channel_After_Login', value: false },
    { _id: 'Accounts_TwoFactorAuthentication_Enabled', value: false },
    { _id: 'Accounts_RequirePasswordConfirmation', value: false },
    { _id: 'Restrict_access_inside_any_Iframe', value: false }
];

// –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updates.forEach(update => {
    const result = db.rocketchat_settings.updateOne(
        { _id: update._id },
        {
            $set: {
                value: update.value,
                _updatedAt: new Date()
            }
        },
        { upsert: true }
    );

    if (result.acknowledged) {
        print(`‚úÖ ${update._id}: ${update.value}`);
    } else {
        print(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${update._id}`);
    }
});

print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Rocket.Chat –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:");
print("   docker-compose -f docker-compose.local.yml restart rocketchat");
