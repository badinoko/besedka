#!/usr/bin/env python3
"""
üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï - –°–û–ó–î–ê–ù–ò–ï –ö–ê–ù–ê–õ–û–í ROCKET.CHAT
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –†–ê–ë–û–¢–ê–ï–¢! –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ 3 –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Setup Wizard –≤ Rocket.Chat.
"""

import subprocess
import time
import os

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    return result.stdout.strip()

def create_channels_final():
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ö–ê–ù–ê–õ–û–í ROCKET.CHAT")

    # JavaScript —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫
    channels_script = """
// üèÜ –†–ê–ë–û–ß–ò–ô –°–ö–†–ò–ü–¢ –°–û–ó–î–ê–ù–ò–Ø –ö–ê–ù–ê–õ–û–í

print('üöÄ –°–æ–∑–¥–∞—é –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏...');

const owner = db.users.findOne({ username: 'owner' });
if (!owner) {
    print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å owner –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    quit();
}

print('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + owner.username);

// 1. –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "Join the Channel"
print('üîß –û—Ç–∫–ª—é—á–∞—é –∫–Ω–æ–ø–∫—É Join the Channel...');
db.rocketchat_settings.updateOne(
    { _id: 'Accounts_Default_User_Preferences_joinDefaultChannels' },
    { $set: { value: true } }
);

// 2. –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
const channelsToCreate = [
    { _id: 'vip', name: 'vip', fname: 'VIP', description: 'VIP –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { _id: 'moderators', name: 'moderators', fname: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã', description: '–ö–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤' }
];

channelsToCreate.forEach(channelData => {
    const existingChannel = db.rocketchat_room.findOne({ _id: channelData._id });
    if (!existingChannel) {
        print('üìù –°–æ–∑–¥–∞—é –∫–∞–Ω–∞–ª: ' + channelData.name);

        db.rocketchat_room.insertOne({
            _id: channelData._id,
            name: channelData.name,
            fname: channelData.fname,
            description: channelData.description,
            t: 'c',
            msgs: 0,
            u: {
                _id: owner._id,
                username: owner.username
            },
            ts: new Date(),
            ro: false,
            sysMes: true,
            _updatedAt: new Date()
        });

        print('‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: ' + channelData.name);
    } else {
        print('‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ' + channelData.name);
    }
});

// 3. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã
const allChannels = ['GENERAL', 'vip', 'moderators'];
allChannels.forEach(channelId => {
    const room = db.rocketchat_room.findOne({ _id: channelId });
    if (room) {
        const subscription = db.rocketchat_subscription.findOne({
            'u._id': owner._id,
            rid: channelId
        });

        if (!subscription) {
            print('üìã –°–æ–∑–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: ' + room.name);

            db.rocketchat_subscription.insertOne({
                _id: owner._id + channelId,
                u: {
                    _id: owner._id,
                    username: owner.username
                },
                rid: channelId,
                name: room.name,
                fname: room.fname || room.name,
                t: room.t,
                ts: new Date(),
                ls: new Date(),
                f: false,
                lr: new Date(),
                open: true,
                alert: false,
                roles: ['owner'],
                unread: 0,
                _updatedAt: new Date()
            });

            print('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ' + room.name);
        } else {
            print('‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å: ' + room.name);
        }
    }
});

// 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
print('\\n=== –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° ===');
print('–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:');
db.rocketchat_room.find({ t: 'c' }).forEach(room => {
    const messageCount = db.rocketchat_message.find({ rid: room._id }).count();
    print('- ' + room.name + ' (ID: ' + room._id + ', —Å–æ–æ–±—â–µ–Ω–∏–π: ' + messageCount + ')');
});

print('\\n–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è owner:');
db.rocketchat_subscription.find({ 'u._id': owner._id }).forEach(sub => {
    print('- ' + sub.name + ' (ID: ' + sub.rid + ')');
});

print('\\nüéâ –í–°–ï –ì–û–¢–û–í–û! –ö–∞–Ω–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
    with open('create_channels_working.js', 'w') as f:
        f.write(channels_script)

    print("üìã –ü—Ä–∏–º–µ–Ω—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤...")
    run_command("docker cp create_channels_working.js magic_beans_new-mongo-1:/tmp/")
    result = run_command("docker exec magic_beans_new-mongo-1 mongosh rocketchat /tmp/create_channels_working.js")
    print(result)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove('create_channels_working.js')

    print("\nüéâ –ì–û–¢–û–í–û! –í—Å–µ –∫–∞–Ω–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω!")

if __name__ == "__main__":
    create_channels_final()
