from django.shortcuts import render, get_object_or_404
from django.views.generic import DetailView
from django.db.models import Q, Min, Max, Avg, Sum
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.contrib import messages
from django.views.decorators.http import require_GET

from ..models import Strain, SeedBank, StockItem
from ..forms import StrainFilterForm, AddToCartForm
from core.base_views import UnifiedListView, unified_ajax_filter

# ==========================================================================
# AJAX-–§–ò–õ–¨–¢–† –ú–ê–ì–ê–ó–ò–ù–ê (–£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø)
# ==========================================================================

@require_GET
def ajax_filter(request):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AJAX-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ unified_ajax_filter."""
    return unified_ajax_filter(CatalogView)(request)

# ==========================================================================
# –ï–î–ò–ù–´–ô –ö–ê–¢–ê–õ–û–ì –ú–ê–ì–ê–ó–ò–ù–ê, –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç UnifiedListView
# ==========================================================================
class CatalogView(UnifiedListView):
    """–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –º–∞–≥–∞–∑–∏–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    model = Strain
    template_name = 'base_list_page.html'
    card_type = 'store'
    paginate_by = 9
    ajax_url_name = 'store:ajax_filter'

    section_title = "üå± Magic Beans Store"
    section_subtitle = "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Å–µ–º–µ–Ω–∞ –æ—Ç –≤–µ–¥—É—â–∏—Ö —Å–∏–¥–±–∞–Ω–∫–æ–≤ –º–∏—Ä–∞"
    section_hero_class = "store-hero"

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç queryset —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        # –ë–∞–∑–æ–≤—ã–π queryset - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä—Ç–∞
        queryset = Strain.objects.filter(is_active=True).select_related('seedbank')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        return self.apply_filters(queryset)

    def apply_filters(self, queryset):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        filter_type = self.request.GET.get('filter', 'newest')

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã SSOT
        if filter_type == 'popular':
            # –ú–æ–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤ (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            queryset = queryset.order_by('-created_at')
        elif filter_type == 'price_asc':
            queryset = queryset.annotate(current_price=Min('stock_items__price')).order_by('current_price')
        elif filter_type == 'price_desc':
            queryset = queryset.annotate(current_price=Min('stock_items__price')).order_by('-current_price')
        elif filter_type == 'indica':
            queryset = queryset.filter(strain_type='indica')
        else:  # newest
            queryset = queryset.order_by('-created_at')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        form = StrainFilterForm(self.request.GET)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–∏–¥–±–∞–Ω–∫—É –∏–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        selected_seedbank_id = self.request.GET.get('seedbank_id')
        if selected_seedbank_id:
            try:
                queryset = queryset.filter(seedbank_id=int(selected_seedbank_id))
            except ValueError:
                pass

        if form.is_valid():
            # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–æ–∏—Å–∫)
            name_query = form.cleaned_data.get('name')
            if name_query:
                queryset = queryset.filter(Q(name__icontains=name_query) | Q(description__icontains=name_query))

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ç–∏–∫–∏
            genetics = form.cleaned_data.get('genetics')
            if genetics:
                queryset = queryset.filter(strain_type__in=genetics)

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            min_price = form.cleaned_data.get('min_price')
            max_price = form.cleaned_data.get('max_price')
            if min_price is not None:
                queryset = queryset.annotate(current_price=Min('stock_items__price')).filter(current_price__gte=min_price)
            if max_price is not None:
                queryset = queryset.annotate(current_price=Min('stock_items__price')).filter(current_price__lte=max_price)

        return queryset

    def get_context_data(self, **kwargs):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç UnifiedListView
        context = super().get_context_data(**kwargs)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ (seedbanks + —Ñ–æ—Ä–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        context['filter_form'] = StrainFilterForm(self.request.GET or None)
        context['seedbanks'] = SeedBank.objects.filter(is_active=True).order_by('name')

        selected_seedbank_id = self.request.GET.get('seedbank_id')
        context['selected_seedbank_id'] = int(selected_seedbank_id) if selected_seedbank_id and selected_seedbank_id.isdigit() else None

        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —à–∞–±–ª–æ–Ω–æ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é strains
        context['strains'] = context['page_obj']

        return context

    def get_filter_list(self):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AJAX-—Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º SSOT)"""
        return [
            {'id': 'newest', 'label': '–ù–æ–≤—ã–µ'},
            {'id': 'popular', 'label': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ'},
            {'id': 'price_asc', 'label': '–î–µ—à–µ–≤—ã–µ'},
            {'id': 'price_desc', 'label': '–î–æ—Ä–æ–≥–∏–µ'},
            {'id': 'indica', 'label': '–ò–Ω–¥–∏–∫–∞'},
        ]

    def get_hero_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è hero-—Å–µ–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
        total_strains = Strain.objects.filter(is_active=True).count()
        total_seedbanks = SeedBank.objects.filter(is_active=True).count()
        avg_price = StockItem.objects.filter(is_active=True, quantity__gt=0).aggregate(avg=Avg('price')).get('avg') or 0
        return [
            {'icon': 'fa-seedling', 'count': total_strains, 'label': '—Å–æ—Ä—Ç–æ–≤'},
            {'icon': 'fa-industry', 'count': total_seedbanks, 'label': '—Å–∏–¥–±–∞–Ω–∫–æ–≤'},
            {'icon': 'fa-tag', 'count': f"{int(avg_price)} ‚ÇΩ" if avg_price else '‚Äî', 'label': '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'},
        ]

class StrainDetailView(DetailView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ä—Ç–∞"""
    model = Strain
    template_name = 'store/strain_detail.html'
    context_object_name = 'strain'

    def get_queryset(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä—Ç–∞
        return super().get_queryset().filter(is_active=True).select_related('seedbank').prefetch_related('stock_items')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        stock_items = self.object.stock_items.filter(is_active=True, quantity__gt=0).order_by('seeds_count')

        stock_items_with_forms = []
        for stock_item in stock_items:
            stock_items_with_forms.append({
                'item': stock_item,
                'form': AddToCartForm(initial={'stock_item_id': stock_item.id, 'quantity': 1})
            })

        context['stock_items_with_forms'] = stock_items_with_forms

        # -----------------------------
        # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø HERO-–°–ï–ö–¶–ò–Ø
        # -----------------------------
        from django.db.models import Sum, Min  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

        total_variants = stock_items.count()
        total_packs_available = stock_items.aggregate(total=Sum('quantity'))['total'] or 0
        min_price = stock_items.aggregate(min=Min('price'))['min'] if stock_items else None

        context['detail_hero_stats'] = [
            {
                'value': total_variants,
                'label': self.request._('–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤') if hasattr(self.request, '_') else '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
                'css_class': 'variants',
                'icon': 'fa-box-open',
            },
            {
                'value': total_packs_available,
                'label': self.request._('—É–ø–∞–∫–æ–≤–æ–∫') if hasattr(self.request, '_') else '—É–ø–∞–∫–æ–≤–æ–∫',
                'css_class': 'stock',
                'icon': 'fa-box',
            },
            {
                'value': f"{int(min_price)} ‚ÇΩ" if min_price else '‚Äî',
                'label': self.request._('–æ—Ç —Ü–µ–Ω—ã') if hasattr(self.request, '_') else '–æ—Ç —Ü–µ–Ω—ã',
                'css_class': 'price',
                'icon': 'fa-tag',
            },
        ]

        return context

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç.–¥.)
