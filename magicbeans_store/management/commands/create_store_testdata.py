from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from magicbeans_store.models import (
    SeedBank, Strain, StockItem, OrderStatus,
    ShippingMethod, PaymentMethod, Promotion, Coupon, OrderItem, Order, CartItem, Cart
)
from decimal import Decimal
from datetime import date, timedelta
from django.utils import timezone


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞...'))

        try:
            with transaction.atomic():
                if options['clear']:
                    self.clear_data()

                self.create_seedbanks()
                self.create_strains()
                self.create_stock_items()
                self.create_order_statuses()
                self.create_shipping_methods()
                self.create_payment_methods()
                self.create_promotions()
                self.create_coupons()

            self.stdout.write(self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!'))
            self.print_summary()

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}'))
            raise CommandError(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}')

    def clear_data(self):
        self.stdout.write('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
        OrderItem.objects.all().delete()
        Order.objects.all().delete()
        CartItem.objects.all().delete()
        Cart.objects.all().delete()
        # –ó–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
        StockItem.objects.all().delete()
        Strain.objects.all().delete()
        SeedBank.objects.all().delete()
        OrderStatus.objects.all().delete()
        ShippingMethod.objects.all().delete()
        PaymentMethod.objects.all().delete()
        Promotion.objects.all().delete()
        Coupon.objects.all().delete()

    def create_seedbanks(self):
        self.stdout.write('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–¥–±–∞–Ω–∫–æ–≤...')

        seedbanks_data = [
            {
                'name': 'Dutch Passion',
                'description': '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å 35-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Å–µ–ª–µ–∫—Ü–∏–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ü–≤–µ—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ–ø–µ—Ä–∏–æ–¥–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤',
                'website': 'https://dutch-passion.com',
                'is_active': True
            },
            {
                'name': 'Royal Queen Seeds',
                'description': '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ª–∏–¥–µ—Ä –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∫–∞–Ω–Ω–∞–±–∏—Å–∞ —Å–µ–º—è–Ω —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
                'website': 'https://royalqueenseeds.com',
                'is_active': True
            },
            {
                'name': 'FastBuds',
                'description': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –∞–≤—Ç–æ—Ü–≤–µ—Ç—É—â–∏–º —Å–æ—Ä—Ç–∞–º —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã—Å—Ç—Ä—ã–º —Ü–∏–∫–ª–æ–º —Ä–æ—Å—Ç–∞',
                'website': 'https://fastbuds.com',
                'is_active': True
            },
            {
                'name': "Barney's Farm",
                'description': '–ê–º—Å—Ç–µ—Ä–¥–∞–º—Å–∫–∞—è —Å–∏–¥–±–∞–Ω–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ—Ä—Ç–∞–º–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –Ω–∞–≥—Ä–∞–¥',
                'website': 'https://barneysfarm.com',
                'is_active': True
            }
        ]

        for data in seedbanks_data:
            seedbank, created = SeedBank.objects.get_or_create(
                name=data['name'],
                defaults=data
            )
            if seedbank is not None:
                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–¥–±–∞–Ω–∫: {seedbank.name}')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è –°–∏–¥–±–∞–Ω–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {seedbank.name}')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∏–¥–±–∞–Ω–∫: {data["name"]}'))

    def create_strains(self):
        self.stdout.write('üåø –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä—Ç–æ–≤...')

        seedbanks = {sb.name: sb for sb in SeedBank.objects.all()}

        barneys_farm_name = "Barney's Farm"
        barneys_farm_sb = seedbanks.get(barneys_farm_name)
        if not barneys_farm_sb:
            raise CommandError(f"Seedbank '{barneys_farm_name}' not found. Please ensure it is defined in the create_seedbanks method.")

        strains_data = [
            # Dutch Passion
            {
                'name': 'Auto Ultimate',
                'seedbank': seedbanks['Dutch Passion'],
                'strain_type': 'autoflowering',
                'description': '–ú–æ—â–Ω—ã–π –∞–≤—Ç–æ—Ü–≤–µ—Ç —Å –æ–≥—Ä–æ–º–Ω—ã–º–∏ —É—Ä–æ–∂–∞—è–º–∏ –∏ —Å–∏–ª—å–Ω—ã–º —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º',
                'genetics': 'Big Bud x Chronic x Skunk',
                'thc_content': '20-25',
                'cbd_content': '1-1.5',
                'flowering_time': '10-12 –Ω–µ–¥–µ–ª—å',
                'height': '100-150 —Å–º',
                'yield_indoor': '400-500 –≥/–º¬≤',
                'yield_outdoor': '200-300 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π, —ç–π—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π',
                'flavor': '–°–ª–∞–¥–∫–∏–π, —Ñ—Ä—É–∫—Ç–æ–≤—ã–π',
                'is_active': True
            },
            {
                'name': 'Frisian Dew',
                'seedbank': seedbanks['Dutch Passion'],
                'strain_type': 'feminized',
                'description': '–ö—Ä–∞—Å–∏–≤—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Å–æ—Ä—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≥—Ä—É–Ω—Ç–∞, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –ø–ª–µ—Å–µ–Ω–∏.',
                'genetics': 'Super Skunk x Purple Star',
                'thc_content': '15-20',
                'cbd_content': '0.5-1',
                'flowering_time': '8-10 –Ω–µ–¥–µ–ª—å',
                'height': '200-300 —Å–º',
                'yield_indoor': '400-500 –≥/–º¬≤',
                'yield_outdoor': '700-800 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —ç–π—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π',
                'flavor': '–§—Ä—É–∫—Ç–æ–≤—ã–π, –ø—Ä—è–Ω—ã–π',
                'is_active': True
            },
            # Royal Queen Seeds
            {
                'name': 'Northern Light',
                'seedbank': seedbanks['Royal Queen Seeds'],
                'strain_type': 'feminized',
                'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∏–Ω–¥–∏–∫–∞ —Å –º–æ—â–Ω—ã–º stone-—ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏ –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è',
                'genetics': 'Afghani x Thai',
                'thc_content': '15-20',
                'cbd_content': '0.5-1',
                'flowering_time': '6-8 –Ω–µ–¥–µ–ª—å',
                'height': '100-120 —Å–º',
                'yield_indoor': '500-550 –≥/–º¬≤',
                'yield_outdoor': '575-625 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–ì–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ, —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å',
                'flavor': '–°–ª–∞–¥–∫–∏–π, –∑–µ–º–ª–∏—Å—Ç—ã–π',
                'is_active': True
            },
            {
                'name': 'Royal Dwarf',
                'seedbank': seedbanks['Royal Queen Seeds'],
                'strain_type': 'autoflowering',
                'description': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –∞–≤—Ç–æ—Ü–≤–µ—Ç, –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è.',
                'genetics': 'Skunk x Ruderalis',
                'thc_content': '10-15',
                'cbd_content': '0-0.5',
                'flowering_time': '8-10 –Ω–µ–¥–µ–ª—å',
                'height': '40-70 —Å–º',
                'yield_indoor': '150-200 –≥/–º¬≤',
                'yield_outdoor': '30-80 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–õ–µ–≥–∫–∏–π, —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π',
                'flavor': '–°–∫–∞–Ω–∫–æ–≤—ã–π, —Å–ª–∞–¥–∫–∏–π',
                'is_active': True
            },
            # FastBuds
            {
                'name': 'Gorilla Glue Auto',
                'seedbank': seedbanks['FastBuds'],
                'strain_type': 'autoflowering',
                'description': '–ê–≤—Ç–æ—Ü–≤–µ—Ç—É—â–∞—è –≤–µ—Ä—Å–∏—è –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ —Å–æ—Ä—Ç–∞ —Å –ª–∏–ø–∫–∏–º–∏ —Å–º–æ–ª–∏—Å—Ç—ã–º–∏ —à–∏—à–∫–∞–º–∏',
                'genetics': 'Gorilla Glue #4 x Ruderalis',
                'thc_content': '20-25',
                'cbd_content': '0-0.5',
                'flowering_time': '8-10 –Ω–µ–¥–µ–ª—å',
                'height': '80-120 —Å–º',
                'yield_indoor': '450-500 –≥/–º¬≤',
                'yield_outdoor': '150-200 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–ú–æ—â–Ω–∞—è —ç–π—Ñ–æ—Ä–∏—è, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
                'flavor': '–°–æ—Å–Ω–æ–≤—ã–π, –∑–µ–º–ª–∏—Å—Ç—ã–π, –¥–∏–∑–µ–ª—å–Ω—ã–π',
                'is_active': True
            },
            {
                'name': 'LSD-25 Auto',
                'seedbank': seedbanks['FastBuds'],
                'strain_type': 'autoflowering',
                'description': '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ü–≤–µ—Ç —Å –ø—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º.',
                'genetics': 'L.S.D. x Ruderalis',
                'thc_content': '20-25',
                'cbd_content': '0.5-1',
                'flowering_time': '8-10 –Ω–µ–¥–µ–ª—å',
                'height': '70-120 —Å–º',
                'yield_indoor': '400-500 –≥/–º¬≤',
                'yield_outdoor': '50-250 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–ü—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∏–π, —ç–π—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
                'flavor': '–î–∏–∑–µ–ª—å–Ω—ã–π, –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π',
                'is_active': True
            },
            # Barney's Farm
            {
                'name': 'Mimosa EVO',
                'seedbank': barneys_farm_sb,
                'strain_type': 'feminized',
                'description': '–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è —Å–∞—Ç–∏–≤–∞ —Å —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–º –∞—Ä–æ–º–∞—Ç–æ–º –∏ –±–æ–¥—Ä—è—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º',
                'genetics': 'Orange Punch x Purple Punch',
                'thc_content': '25-30',
                'cbd_content': '0-0.5',
                'flowering_time': '8-10 –Ω–µ–¥–µ–ª—å',
                'height': '120-160 —Å–º',
                'yield_indoor': '550-600 –≥/–º¬≤',
                'yield_outdoor': '800-1000 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–≠–Ω–µ—Ä–≥–∏—è, —Ñ–æ–∫—É—Å, —ç–π—Ñ–æ—Ä–∏—è',
                'flavor': '–¶–∏—Ç—Ä—É—Å–æ–≤—ã–π, —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π',
                'is_active': True
            },
            {
                'name': 'Wedding Cake Auto',
                'seedbank': barneys_farm_sb,
                'strain_type': 'autoflowering',
                'description': '–°–ª–∞–¥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –∞–≤—Ç–æ—Ü–≤–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º THC.',
                'genetics': 'Wedding Cake x BF Super Auto #1',
                'thc_content': '20-25',
                'cbd_content': '1-1.5',
                'flowering_time': '10-12 –Ω–µ–¥–µ–ª—å',
                'height': '90-110 —Å–º',
                'yield_indoor': '500 –≥/–º¬≤',
                'yield_outdoor': '–¥–æ 750 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —ç–π—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π',
                'flavor': '–°–ª–∞–¥–∫–∏–π, –≤–∞–Ω–∏–ª—å–Ω—ã–π, –∑–µ–º–ª–∏—Å—Ç—ã–π',
                'is_active': True
            },
            {
                'name': 'Regular Skunk #1',
                'seedbank': seedbanks['Dutch Passion'],
                'strain_type': 'regular',
                'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Skunk #1 –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ü–∏–∏.',
                'genetics': 'Skunk #1 (Afghani x Colombian Gold x Acapulco Gold)',
                'thc_content': '10-15',
                'cbd_content': '0-0.5',
                'flowering_time': '8-10 –Ω–µ–¥–µ–ª—å',
                'height': '100-150 —Å–º',
                'yield_indoor': '400-500 –≥/–º¬≤',
                'yield_outdoor': '–¥–æ 600 –≥/—Ä–∞—Å—Ç–µ–Ω–∏–µ',
                'effect': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —ç–π—Ñ–æ—Ä–∏—è –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ',
                'flavor': '–°–∫–∞–Ω–∫–æ–≤—ã–π, —Å–ª–∞–¥–∫–∏–π, –∑–µ–º–ª–∏—Å—Ç—ã–π',
                'is_active': True
            }
        ]

        for data in strains_data:
            strain, created = Strain.objects.get_or_create(
                name=data['name'],
                seedbank=data['seedbank'],
                defaults=data
            )

            if strain is not None:
                seedbank_name_for_log = "N/A"
                if strain.seedbank is not None:
                    seedbank_name_for_log = strain.seedbank.name
                else:
                    self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –£ —Å–æ—Ä—Ç–∞ {strain.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–¥–±–∞–Ω–∫ –≤ –æ–±—ä–µ–∫—Ç–µ!'))

                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ä—Ç: {strain.name} ({seedbank_name_for_log}) - –¢–∏–ø: {strain.get_strain_type_display()}')
                else:
                    update_fields = []
                    for key, value in data.items():
                        if key == 'seedbank':
                            current_seedbank_obj = getattr(strain, key)
                            if isinstance(current_seedbank_obj, SeedBank) and isinstance(value, SeedBank):
                                if current_seedbank_obj.pk != value.pk:
                                    setattr(strain, key, value)
                                    update_fields.append(key)
                            # –ï—Å–ª–∏ value –Ω–µ –æ–±—ä–µ–∫—Ç SeedBank –∏–ª–∏ current_seedbank_obj None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É –≤ data.items()

                        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
                        if getattr(strain, key) != value:
                            setattr(strain, key, value)
                            update_fields.append(key)

                    if update_fields:
                        strain.save(update_fields=update_fields)
                        self.stdout.write(f'  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–æ—Ä—Ç: {strain.name} ({seedbank_name_for_log}) - –ü–æ–ª—è: {", ".join(update_fields)}')
                    else:
                        self.stdout.write(f'  ‚ÑπÔ∏è –°–æ—Ä—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç—É–∞–ª–µ–Ω: {strain.name} ({seedbank_name_for_log})')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ä—Ç: {data["name"]}'))

    def create_stock_items(self):
        self.stdout.write('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ...')

        strains_qs = Strain.objects.filter(is_active=True) # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä—Ç–∞
        self.stdout.write(f'  üîç –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ø–∞–∫–æ–≤–æ–∫: {strains_qs.count()}')

        for strain_obj in strains_qs: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è
            self.stdout.write(f'     –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ—Ä—Ç: {strain_obj.name}')
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ä—Ç–∞
            # –¶–µ–Ω—ã —Ç–µ–ø–µ—Ä—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            base_price = 10
            if 'Auto' in strain_obj.name or strain_obj.strain_type == 'autoflowering':
                base_price = 12
            if 'EVO' in strain_obj.name or 'LSD' in strain_obj.name:
                base_price = 15
            if strain_obj.thc_content == '25-30' or strain_obj.thc_content == '30+':
                base_price += 5

            packages = [
                {'seeds': 1,  'price': 15,  'qty': 50}, # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                {'seeds': 3,  'price': 40,  'qty': 30},
                {'seeds': 5,  'price': 65, 'qty': 20},
                {'seeds': 10, 'price': 120, 'qty': 10}
            ]

            for pkg in packages:
                current_price = Decimal(str(pkg['price'])) if pkg['price'] > 0 else Decimal('5.00')
                stock_item, created = StockItem.objects.get_or_create(
                    strain=strain_obj,
                    seeds_count=pkg['seeds'],
                    defaults={
                        'price': current_price,
                        'quantity': pkg['qty'],
                        'sku': f'{strain_obj.name.upper().replace(" ", "")[:10]}-{pkg["seeds"]}PCS',
                        'is_active': True
                    }
                )
                if stock_item is not None: # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    if created:
                        self.stdout.write(f'      ‚úÖ –°–û–ó–î–ê–ù —Ç–æ–≤–∞—Ä: {stock_item.strain.name} x{stock_item.seeds_count} - {stock_item.price} —Ä—É–±. - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock_item.quantity}')
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω—É)
                        updated_stock_fields = []
                        if stock_item.quantity != pkg['qty']:
                            stock_item.quantity = pkg['qty']
                            updated_stock_fields.append('quantity')
                        if stock_item.price != current_price:
                            stock_item.price = current_price
                            updated_stock_fields.append('price')
                        if not stock_item.is_active:
                            stock_item.is_active = True
                            updated_stock_fields.append('is_active')

                        if updated_stock_fields:
                            stock_item.save(update_fields=updated_stock_fields)
                            self.stdout.write(f'      üîÑ –û–ë–ù–û–í–õ–ï–ù —Ç–æ–≤–∞—Ä: {stock_item.strain.name} x{stock_item.seeds_count} - –ü–æ–ª—è: {", ".join(updated_stock_fields)}')
                        else:
                            self.stdout.write(f'      ‚ÑπÔ∏è  –¢–æ–≤–∞—Ä –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢ –∏ –∞–∫—Ç—É–∞–ª–µ–Ω: {stock_item.strain.name} x{stock_item.seeds_count}')
                else:
                    self.stdout.write(self.style.WARNING(f'      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è: {strain_obj.name} x{pkg["seeds"]}'))

    def create_order_statuses(self):
        self.stdout.write('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤...')

        statuses_data = [
            {'name': '–ù–æ–≤—ã–π', 'description': '–ó–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω'},
            {'name': '–û–±—Ä–∞–±–æ—Ç–∫–∞', 'description': '–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'},
            {'name': '–û–ø–ª–∞—á–µ–Ω', 'description': '–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'},
            {'name': '–£–ø–∞–∫–æ–≤–∞–Ω', 'description': '–ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ'},
            {'name': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'description': '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏'},
            {'name': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', 'description': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É'},
            {'name': '–û—Ç–º–µ–Ω–µ–Ω', 'description': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–æ—Å—å–±–µ –∫–ª–∏–µ–Ω—Ç–∞'},
            {'name': '–í–æ–∑–≤—Ä–∞—Ç', 'description': '–û—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞'}
        ]

        for data in statuses_data:
            status, created = OrderStatus.objects.get_or_create(
                name=data['name'],
                defaults=data
            )
            if status is not None:
                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: {status.name}')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {status.name}')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {data["name"]}'))

    def create_shipping_methods(self):
        self.stdout.write('üöö –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏...')

        methods_data = [
            {
                'name': '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏',
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ (7-21 –¥–µ–Ω—å)',
                'price': Decimal('350.00'),
                'estimated_days': 14,
                'is_active': True
            },
            {
                'name': '–°–î–≠–ö (–¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏)',
                'description': '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö (3-7 –¥–Ω–µ–π)',
                'price': Decimal('450.00'),
                'estimated_days': 5,
                'is_active': True
            },
            {
                'name': '–°–î–≠–ö (–∫—É—Ä—å–µ—Ä–æ–º –¥–æ –¥–≤–µ—Ä–∏)',
                'description': '–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö –¥–æ –¥–≤–µ—Ä–∏ (3-7 –¥–Ω–µ–π)',
                'price': Decimal('650.00'),
                'estimated_days': 5,
                'is_active': True
            }
        ]

        for data in methods_data:
            method, created = ShippingMethod.objects.get_or_create(
                name=data['name'],
                defaults=data
            )
            if method is not None:
                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {method.name}')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {method.name}')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {data["name"]}'))

    def create_payment_methods(self):
        self.stdout.write('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã...')

        methods_data = [
            {
                'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥',
                'description': '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (SEPA)',
                'is_active': True
            },
            {
                'name': '–ë–∏—Ç–∫–æ–π–Ω (BTC)',
                'description': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Bitcoin',
                'is_active': True
            },
            {
                'name': 'Ethereum (ETH)',
                'description': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Ethereum',
                'is_active': True
            },
            {
                'name': '–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
                'description': '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤)',
                'is_active': False
            }
        ]

        for data in methods_data:
            method, created = PaymentMethod.objects.get_or_create(
                name=data['name'],
                defaults=data
            )
            if method is not None:
                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method.name}')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {method.name}')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data["name"]}'))

    def create_promotions(self):
        self.stdout.write('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π...')

        promotions_data = [
            {
                'name': '–í–µ—Å–µ–Ω–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞',
                'description': '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –∞–≤—Ç–æ—Ü–≤–µ—Ç—ã –≤ —á–µ—Å—Ç—å –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞!',
                'discount_type': 'percentage',
                'discount_value': Decimal('20.0'),
                'start_date': timezone.now(),
                'end_date': timezone.now() + timedelta(days=30),
                'is_active': True
            },
            {
                'name': '–ù–æ–≤–∏–Ω–∫–∏ FastBuds',
                'description': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ—Ä—Ç–∞ –æ—Ç FastBuds',
                'discount_type': 'percentage',
                'discount_value': Decimal('15.0'),
                'start_date': timezone.now() - timedelta(days=5),
                'end_date': timezone.now() + timedelta(days=45),
                'is_active': True
            },
            {
                'name': '–õ–µ—Ç–Ω–∏–π –±—É—Å—Ç',
                'description': '–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è –ª–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è - —Å–∫–∏–¥–∫–∏ –¥–æ 30%',
                'discount_type': 'percentage',
                'discount_value': Decimal('30.0'),
                'start_date': timezone.now() + timedelta(days=60),
                'end_date': timezone.now() + timedelta(days=150),
                'is_active': False
            }
        ]

        for data in promotions_data:
            promotion, created = Promotion.objects.get_or_create(
                name=data['name'],
                defaults=data
            )
            if promotion is not None:
                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–º–æ–∞–∫—Ü–∏—è: {promotion.name} ({promotion.discount_value}%)')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è –ü—Ä–æ–º–æ–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {promotion.name}')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é: {data["name"]}'))

    def create_coupons(self):
        self.stdout.write('üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–æ–≤...')

        coupons_data = [
            {
                'code': 'WELCOME10',
                'description': '–°–∫–∏–¥–∫–∞ 10% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                'discount_percentage': Decimal('10.0'),
                'start_date': timezone.now() - timedelta(days=30),
                'end_date': timezone.now() + timedelta(days=365),
                'is_active': True
            },
            {
                'code': 'SPRING20',
                'description': '–í–µ—Å–µ–Ω–Ω—è—è —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
                'discount_percentage': Decimal('20.0'),
                'start_date': timezone.now(),
                'end_date': timezone.now() + timedelta(days=30),
                'is_active': True
            },
            {
                'code': 'BULK50',
                'description': '–°–∫–∏–¥–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 5 —É–ø–∞–∫–æ–≤–æ–∫',
                'discount_percentage': Decimal('50.0'),
                'start_date': timezone.now(),
                'end_date': timezone.now() + timedelta(days=90),
                'is_active': True
            },
            {
                'code': 'EXPIRED',
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–µ–∫—à–∏–π –∫—É–ø–æ–Ω',
                'discount_percentage': Decimal('25.0'),
                'start_date': timezone.now() - timedelta(days=60),
                'end_date': timezone.now() - timedelta(days=1),
                'is_active': False
            }
        ]

        for data in coupons_data:
            coupon, created = Coupon.objects.get_or_create(
                code=data['code'],
                defaults=data
            )
            if coupon is not None:
                if created:
                    self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –∫—É–ø–æ–Ω: {coupon.code} ({coupon.discount_percentage}%)')
                else:
                    self.stdout.write(f'  ‚ÑπÔ∏è –ö—É–ø–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {coupon.code}')
            else:
                self.stdout.write(self.style.WARNING(f'  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω: {data["code"]}'))

    def print_summary(self):
        self.stdout.write('\nüìä –°–í–û–î–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•:')
        self.stdout.write(f'  üå± –°–∏–¥–±–∞–Ω–∫–∏: {SeedBank.objects.count()}')
        self.stdout.write(f'  üåø –°–æ—Ä—Ç–∞: {Strain.objects.count()}')
        self.stdout.write(f'  üìã –¢–æ–≤–∞—Ä—ã: {StockItem.objects.count()}')
        self.stdout.write(f'  üì¶ –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤: {OrderStatus.objects.count()}')
        self.stdout.write(f'  üöö –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {ShippingMethod.objects.count()}')
        self.stdout.write(f'  üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: {PaymentMethod.objects.count()}')
        self.stdout.write(f'  üéØ –ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏: {Promotion.objects.count()}')
        self.stdout.write(f'  üé´ –ö—É–ø–æ–Ω—ã: {Coupon.objects.count()}')
        self.stdout.write('\nüéâ –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!')
