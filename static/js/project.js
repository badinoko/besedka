/* –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ "–ë–µ—Å–µ–¥–∫–∞" */

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø: success, error, warning, info
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4000)
 */
function showToast(message, type = 'success', duration = 4000) {
    const container = document.getElementById('global-toast-container');
    if (!container) {
        console.error('Toast container not found');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è toast
    const toastId = 'toast-' + Date.now() + '-' + Math.random().toString(36).substr(2, 5);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const typeConfig = {
        success: { icon: 'fas fa-check-circle', bgClass: 'bg-success' },
        error: { icon: 'fas fa-exclamation-circle', bgClass: 'bg-danger' },
        warning: { icon: 'fas fa-exclamation-triangle', bgClass: 'bg-warning' },
        info: { icon: 'fas fa-info-circle', bgClass: 'bg-info' }
    };

    const config = typeConfig[type] || typeConfig.info;

    // HTML –¥–ª—è toast
    const toastHTML = `
        <div id="${toastId}" class="toast align-items-center text-white ${config.bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body d-flex align-items-center">
                    <i class="${config.icon} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º toast –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.insertAdjacentHTML('beforeend', toastHTML);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement, {
        delay: duration
    });

    toast.show();

    // –£–¥–∞–ª—è–µ–º toast –∏–∑ DOM –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
    toastElement.addEventListener('hidden.bs.toast', function() {
        toastElement.remove();
    });
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('üå± –ë–µ—Å–µ–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initializeTooltips();
    initializeAlerts();
    initializeFormValidation();
    initializeLoadingButtons();
    // initializeNotifications(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–≥–∞ –≤ —á–∞—Ç–µ

    // –£—Ç–∏–ª–∏—Ç—ã
    setupCSRFProtection();

    console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ Bootstrap
 */
function initializeTooltips() {
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
 */
function initializeAlerts() {
    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');
    alerts.forEach(function(alert) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞—Ç—å –∞–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(function() {
            const bsAlert = new bootstrap.Alert(alert);
            if (bsAlert) {
                bsAlert.close();
            }
        }, 5000);
    });
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º
 */
function initializeFormValidation() {
    const forms = document.querySelectorAll('.needs-validation');

    forms.forEach(function(form) {
        form.addEventListener('submit', function(event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();

                // –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –ø–æ–ª–µ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–º
                const firstInvalidField = form.querySelector(':invalid');
                if (firstInvalidField) {
                    firstInvalidField.focus();
                    firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }

            form.classList.add('was-validated');
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(function(input) {
            input.addEventListener('blur', function() {
                if (form.classList.contains('was-validated')) {
                    input.classList.toggle('is-valid', input.checkValidity());
                    input.classList.toggle('is-invalid', !input.checkValidity());
                }
            });
        });
    });
}

/**
 * –ö–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
 */
function initializeLoadingButtons() {
    const loadingButtons = document.querySelectorAll('.btn-loading');

    loadingButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            if (button.type === 'submit') {
                const form = button.closest('form');
                if (form && form.checkValidity()) {
                    showButtonLoading(button);
                }
            } else {
                showButtonLoading(button);
            }
        });
    });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏
 * @param {HTMLElement} button
 */
function showButtonLoading(button) {
    const originalText = button.innerHTML;
    const loadingText = button.getAttribute('data-loading-text') || '–ó–∞–≥—Ä—É–∑–∫–∞...';

    button.innerHTML = `
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        ${loadingText}
    `;
    button.disabled = true;

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è)
    setTimeout(function() {
        button.innerHTML = originalText;
        button.disabled = false;
    }, 30000);
}

/**
 * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function initializeNotifications() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    updateNotificationBadges();

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    setInterval(updateNotificationBadges, 30000);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
    const notificationItems = document.querySelectorAll('.notification-item');
    notificationItems.forEach(function(item) {
        item.addEventListener('click', function() {
            markNotificationAsRead(item);
        });
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function updateNotificationBadges() {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å AJAX-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    const unreadNotifications = document.querySelectorAll('.notification-item.unread');
    const badges = document.querySelectorAll('.notification-badge');

    const count = unreadNotifications.length;
    badges.forEach(function(badge) {
        if (count > 0) {
            badge.textContent = count > 99 ? '99+' : count;
            badge.style.display = 'inline-block';
        } else {
            badge.style.display = 'none';
        }
    });
}

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
 * @param {HTMLElement} notificationItem
 */
function markNotificationAsRead(notificationItem) {
    if (notificationItem.classList.contains('unread')) {
        notificationItem.classList.remove('unread');
        notificationItem.classList.add('read');
        updateNotificationBadges();

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const notificationId = notificationItem.getAttribute('data-notification-id');
        if (notificationId) {
            markNotificationReadOnServer(notificationId);
        }
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
 * @param {string} notificationId
 */
function markNotificationReadOnServer(notificationId) {
    fetch(`/api/notifications/${notificationId}/mark-read/`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCSRFToken()
        }
    }).catch(function(error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', error);
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSRF-–∑–∞—â–∏—Ç—ã –¥–ª—è AJAX-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
function setupCSRFProtection() {
    // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    const csrfToken = getCSRFToken();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö AJAX-–∑–∞–ø—Ä–æ—Å–æ–≤
    if (window.jQuery) {
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRFToken", csrfToken);
                }
            }
        });
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
 * @returns {string}
 */
function getCSRFToken() {
    const cookieValue = document.cookie
        .split('; ')
        .find(row => row.startsWith('csrftoken='))
        ?.split('=')[1]; // –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

    return cookieValue || ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö HTTP –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è CSRF
 * @param {string} method
 * @returns {boolean}
 */
function csrfSafeMethod(method) {
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏
 */
const FormUtils = {
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
     * @param {HTMLFormElement} form
     */
    clearForm: function(form) {
        form.reset();
        form.classList.remove('was-validated');

        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(function(input) {
            input.classList.remove('is-valid', 'is-invalid');
        });
    },

    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –≤ –æ–±—ä–µ–∫—Ç
     * @param {HTMLFormElement} form
     * @returns {object}
     */
    serializeForm: function(form) {
        const formData = new FormData(form);
        const object = {};
        formData.forEach((value, key) => {
            if (object[key]) {
                if (!Array.isArray(object[key])) {
                    object[key] = [object[key]];
                }
                object[key].push(value);
            } else {
                object[key] = value;
            }
        });
        return object;
    }
};

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
 */
const TableUtils = {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å DataTables)
     * @param {string} tableSelector
     * @param {object} options
     */
    initializeDynamicTable: function(tableSelector, options = {}) {
        // –ü—Ä–∏–º–µ—Ä —Å jQuery DataTables (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        if (window.jQuery && $.fn.DataTable) {
            $(tableSelector).DataTable(options);
        }
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
window.AppUtils = {
    FormUtils,
    TableUtils,
    showButtonLoading,
    markNotificationAsRead, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–≤–Ω–µ
    getCSRFToken
};
