document.addEventListener('DOMContentLoaded', function() {
    console.log('üîî Notifications JS loaded for tiles design');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const selectAllCheckbox = document.getElementById('select-all');
    const markSelectedReadBtn = document.getElementById('mark-selected-read');
    const markAllReadBtn = document.getElementById('mark-all-read');
    const deleteSelectedBtn = document.getElementById('delete-selected');
    const selectedCountSpan = document.getElementById('selected-count');

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    function updateAllCounters(serverUnreadCount = null, serverTotalCount = null) {
        console.log('üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤:', {
            serverUnreadCount: serverUnreadCount,
            serverTotalCount: serverTotalCount
        });

        // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø–ª–∏—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        // —Ç–∞–∫ –∫–∞–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–¢–û–õ–¨–ö–û —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if (serverUnreadCount !== null) {
            updateNotificationBadge(serverUnreadCount);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ hero —Å–µ–∫—Ü–∏–∏ (–¢–û–õ–¨–ö–û —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const totalStat = document.querySelector('.hero-stat-value'); // –ü–µ—Ä–≤—ã–π - "–í—Å–µ–≥–æ"
        const unreadStat = document.querySelectorAll('.hero-stat-value')[1]; // –í—Ç–æ—Ä–æ–π - "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"
        const systemStat = document.querySelectorAll('.hero-stat-value')[2]; // –¢—Ä–µ—Ç–∏–π - "–°–∏—Å—Ç–µ–º–Ω—ã—Ö"

        if (totalStat && serverTotalCount !== null) {
            totalStat.textContent = serverTotalCount;
        }
        if (unreadStat && serverUnreadCount !== null) {
            unreadStat.textContent = serverUnreadCount;
        }

        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ hero:', {
            total: serverTotalCount,
            unread: serverUnreadCount
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    function updateBulkActionButtons() {
        const selectedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
        const selectedCount = selectedCheckboxes.length;

        if (markSelectedReadBtn) {
            markSelectedReadBtn.disabled = selectedCount === 0;
        }
        if (deleteSelectedBtn) {
            deleteSelectedBtn.disabled = selectedCount === 0;
        }

        if (selectedCountSpan) {
            if (selectedCount === 0) {
                selectedCountSpan.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π';
            } else {
                selectedCountSpan.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`;
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–¢–û–ß–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä)
    function updateNotificationBadge(count) {
        // –ò—â–µ–º –¢–û–õ–¨–ö–û badge —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–æ—á–Ω–æ–º—É –∫–ª–∞—Å—Å—É
        const notificationBadges = document.querySelectorAll('.notifications-badge');

        notificationBadges.forEach(badge => {
            if (count > 0) {
                badge.textContent = count;
                badge.style.display = 'flex';
            } else {
                badge.style.display = 'none';
            }
        });

        console.log('üîî –û–±–Ω–æ–≤–ª–µ–Ω –±–µ–π–¥–∂ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', count, '–Ω–∞–π–¥–µ–Ω–æ badges:', notificationBadges.length);
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} alert-dismissible fade show`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        `;
        notification.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    function markNotificationRead(notificationId, tileElement = null, callback = null) {
        console.log('üìñ –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', notificationId);

        fetch(`/users/cabinet/notifications/${notificationId}/mark-read/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
            },
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const tile = tileElement || document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (tile) {
                    tile.classList.remove('unread');
                    tile.classList.add('read');

                    // –£–±–∏—Ä–∞–µ–º –±–µ–π–¥–∂ "–ù–æ–≤–æ–µ"
                    const newBadge = tile.querySelector('.badge.bg-primary');
                    if (newBadge) {
                        newBadge.remove();
                    }
                }

                updateAllCounters(data.unread_notifications_count, data.total_notifications_count);

                if (callback) {
                    callback();
                } else {
                    showNotification('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 'success');
                }
            } else {
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
            }
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ markNotificationRead:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        });
    }

    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function deleteNotification(notificationId, tileElement = null) {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notificationId);

        fetch(`/users/cabinet/notifications/delete/${notificationId}/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
            },
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const tile = tileElement || document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (tile) {
                    tile.style.transition = 'all 0.3s ease';
                    tile.style.opacity = '0';
                    tile.style.transform = 'translateX(100%)';

                    setTimeout(() => {
                        tile.remove();
                        updateAllCounters(data.unread_notifications_count, data.total_notifications_count);
                        updateBulkActionButtons();
                    }, 300);
                }

                showNotification('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            } else {
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
            }
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ deleteNotification:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ"
    function markAllAsRead() {
        fetch('/users/cabinet/notifications/read-all/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
            },
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.querySelectorAll('.notification-tile.unread').forEach(tile => {
                    tile.classList.remove('unread');
                    tile.classList.add('read');

                    const markReadBtn = tile.querySelector('.mark-read-btn');
                    if (markReadBtn) {
                        markReadBtn.style.display = 'none';
                    }
                });

                updateAllCounters(data.unread_notifications_count, data.total_notifications_count);
                showNotification(data.message || '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
            }
        })
        .catch(error => {
            console.error('[DEBUG] Error in markAllAsRead:', error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        });
    }

    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô

    // –ö–ª–∏–∫ –ø–æ –ø–ª–∏—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ)
    document.addEventListener('click', function(e) {
        const tile = e.target.closest('.notification-tile');
        if (!tile) return;

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ —á–µ–∫–±–æ–∫—Å–∞–º –∏ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        if (e.target.closest('.notification-checkbox') ||
            e.target.closest('.notification-actions') ||
            e.target.closest('input[type="checkbox"]')) {
            return;
        }

        const notificationId = tile.dataset.notificationId;
        const actionUrl = tile.dataset.actionUrl;

        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –ø–ª–∏—Ç–∫–µ:', { notificationId, actionUrl });

        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
        if (tile.classList.contains('unread')) {
            markNotificationRead(notificationId, tile, () => {
                if (actionUrl && actionUrl !== '#' && actionUrl !== 'None' && actionUrl !== '') {
                    console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ:', actionUrl);
                    window.location.href = actionUrl;
                }
            });
        } else if (actionUrl && actionUrl !== '#' && actionUrl !== 'None' && actionUrl !== '') {
            console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ:', actionUrl);
            window.location.href = actionUrl;
        }
    });

    // –ö–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏" –≤ –ø–ª–∏—Ç–∫–∞—Ö
    document.addEventListener('click', function(e) {
        if (e.target.closest('.notification-go-btn')) {
            e.preventDefault();
            e.stopPropagation();

            const btn = e.target.closest('.notification-go-btn');
            const url = btn.dataset.url;
            const tile = btn.closest('.notification-tile');
            const notificationId = tile.dataset.notificationId;

            console.log('üîó –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏":', { url, notificationId });

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
            if (tile.classList.contains('unread')) {
                markNotificationRead(notificationId, tile, () => {
                    if (url && url !== '#' && url !== 'None' && url !== '') {
                        window.location.href = url;
                    }
                });
            } else if (url && url !== '#' && url !== 'None' && url !== '') {
                window.location.href = url;
            }
        }
    });

    // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø–ª–∏—Ç–∫–∞—Ö
    document.addEventListener('click', function(e) {
        if (e.target.closest('.notification-delete-btn')) {
            e.preventDefault();
            e.stopPropagation();

            const btn = e.target.closest('.notification-delete-btn');
            const notificationId = btn.dataset.id;
            const tile = btn.closest('.notification-tile');

            deleteNotification(notificationId, tile);
        }
    });

    // –ß–µ–∫–±–æ–∫—Å "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.notification-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = this.checked;
            });
            updateBulkActionButtons();
        });
    }

    // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('notification-checkbox')) {
            updateBulkActionButtons();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
            if (selectAllCheckbox) {
                const allCheckboxes = document.querySelectorAll('.notification-checkbox');
                const checkedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
                selectAllCheckbox.checked = allCheckboxes.length === checkedCheckboxes.length;
            }
        }
    });

    // –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (markSelectedReadBtn) {
        markSelectedReadBtn.addEventListener('click', function() {
            const selectedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
            const notificationIds = Array.from(selectedCheckboxes).map(cb => parseInt(cb.value));

            if (notificationIds.length === 0) {
                showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏', 'warning');
                return;
            }

            console.log('üìñ –ü–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', notificationIds);

            fetch('/users/cabinet/notifications/read-multiple/', {
                method: 'POST',
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ notification_ids: notificationIds })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    notificationIds.forEach(id => {
                        const tile = document.querySelector(`[data-notification-id="${id}"]`);
                        if (tile) {
                            tile.classList.remove('unread');
                            tile.classList.add('read');

                            // –£–±–∏—Ä–∞–µ–º –±–µ–π–¥–∂ "–ù–æ–≤–æ–µ"
                            const newBadge = tile.querySelector('.badge.bg-primary');
                            if (newBadge) {
                                newBadge.remove();
                            }

                            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                            const checkbox = tile.querySelector('.notification-checkbox');
                            if (checkbox) {
                                checkbox.checked = false;
                            }
                        }
                    });

                    updateAllCounters(data.unread_notifications_count, data.total_notifications_count);
                    updateBulkActionButtons();

                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = false;
                    }

                    showNotification(data.message || '‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', 'success');
                } else {
                    showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
                }
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ markSelectedAsRead:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
            });
        });
    }

    if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', markAllAsRead);
    }

    if (deleteSelectedBtn) {
        deleteSelectedBtn.addEventListener('click', function() {
            const selectedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
            const notificationIds = Array.from(selectedCheckboxes).map(cb => parseInt(cb.value));

            if (notificationIds.length === 0) {
                showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
                return;
            }

            // –£–±—Ä–∞–Ω confirm –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∑–∞–º–µ–Ω–µ–Ω –∫—Ä–∞—Å–∏–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ:', notificationIds);

            fetch('/users/cabinet/notifications/delete-multiple/', {
                method: 'POST',
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ notification_ids: notificationIds })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    notificationIds.forEach(id => {
                        const tile = document.querySelector(`[data-notification-id="${id}"]`);
                        if (tile) {
                            tile.style.transition = 'all 0.3s ease';
                            tile.style.opacity = '0';
                            tile.style.transform = 'translateX(100%)';

                            setTimeout(() => {
                                tile.remove();
                            }, 300);
                        }
                    });

                    setTimeout(() => {
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–ª–∏—Ç–æ–∫
                        updateAllCounters(data.unread_notifications_count, data.total_notifications_count);
                        updateBulkActionButtons();

                        if (selectAllCheckbox) {
                            selectAllCheckbox.checked = false;
                        }
                    }, 350); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

                    showNotification(data.message || '‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã', 'success');
                } else {
                    showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
                }
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ deleteSelected:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
            });
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–ª–∏—Ç–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    document.addEventListener('click', function(e) {
        const tile = e.target.closest('.notification-tile');
        if (tile && !e.target.closest('.notification-checkbox') && !e.target.closest('button')) {
            const notificationId = tile.dataset.notificationId;
            const actionUrl = tile.dataset.actionUrl;

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
            if (tile.classList.contains('unread')) {
                markNotificationRead(notificationId, tile, function() {
                    // –ü–æ—Å–ª–µ –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (actionUrl && actionUrl !== '#' && actionUrl !== '') {
                        window.open(actionUrl, '_blank');
                    }
                });
            } else {
                // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
                if (actionUrl && actionUrl !== '#' && actionUrl !== '') {
                    window.open(actionUrl, '_blank');
                }
            }
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updateBulkActionButtons();

    // ========= –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =========
    const filterButtons = document.querySelectorAll('.hero-filter-btn');

    // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∏—Ç–æ–∫
    function filterNotifications(filterType) {
        const tiles = document.querySelectorAll('.notification-tile');

        tiles.forEach(tile => {
            let shouldShow = true;

            switch (filterType) {
                case 'all':
                    shouldShow = true;
                    break;
                case 'unread':
                    shouldShow = tile.classList.contains('unread');
                    break;
                case 'system':
                    shouldShow = tile.querySelector('.notification-icon.system') !== null;
                    break;
                case 'personal':
                    // –õ–∏—á–Ω—ã–µ - –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
                    shouldShow = tile.querySelector('.notification-icon.system') === null;
                    break;
                case 'order':
                    shouldShow = tile.querySelector('.notification-icon.order') !== null;
                    break;
                default:
                    shouldShow = true;
            }

            if (shouldShow) {
                tile.style.display = 'flex';
                tile.style.animation = 'fadeIn 0.3s ease';
            } else {
                tile.style.display = 'none';
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filterButtons.forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-filter="${filterType}"]`).classList.add('active');

        console.log(`üîç –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterType}`);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            const filterType = this.dataset.filter;
            filterNotifications(filterType);
        });
    });

    console.log('‚úÖ Notifications JS –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.markNotificationRead = function(notificationId) {
    const tile = document.querySelector(`[data-notification-id="${notificationId}"]`);

    fetch(`/users/cabinet/notifications/${notificationId}/mark-read/`, {
        method: 'POST',
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && tile) {
            tile.classList.remove('unread');
            tile.classList.add('read');

            const badge = document.querySelector('.notifications-badge');
            if (badge && data.unread_notifications_count !== undefined) {
                if (data.unread_notifications_count > 0) {
                    badge.textContent = data.unread_notifications_count;
                    badge.style.display = 'flex';
                } else {
                    badge.style.display = 'none';
                }
            }
        }
    });
};
