document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const selectAllCheckbox = document.getElementById('selectAll');
    const notificationCheckboxes = document.querySelectorAll('.notification-checkbox');
    const markSelectedReadBtn = document.getElementById('markSelectedRead');
    const deleteSelectedBtn = document.getElementById('deleteSelected');
    const markAllReadBtn = document.getElementById('markAllRead');
    const filterTabs = document.querySelectorAll('.filter-tab');
    const notificationCards = document.querySelectorAll('.notification-item');

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
    function updateAllCounters(serverUnreadCount = null, serverTotalCount = null) {
        console.log('[DEBUG] updateAllCounters called with:', {
            serverUnreadCount: serverUnreadCount,
            serverTotalCount: serverTotalCount
        });

        // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –í–ò–î–ò–ú–´–ï –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–µ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)
        const visibleCards = document.querySelectorAll('.notification-item:not([style*="display: none"])');
        const visibleUnreadCards = document.querySelectorAll('.notification-item.unread:not([style*="display: none"])');

        const unreadOnPage = visibleUnreadCards.length;
        const totalOnPage = visibleCards.length;

        console.log('[DEBUG] Page counts:', {
            visibleCards: totalOnPage,
            visibleUnreadCards: unreadOnPage
        });

        // üîî –°–ß–ï–¢–ß–ò–ö –í –®–ê–ü–ö–ï - –ù–ï–ü–†–û–ß–ò–¢–ê–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        const currentUnreadForBadge = serverUnreadCount !== null ? serverUnreadCount : unreadOnPage;
        console.log('[DEBUG] Badge update - currentUnreadForBadge:', currentUnreadForBadge);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        updateNotificationBadge(currentUnreadForBadge);

        // üìä –°–ß–ï–¢–ß–ò–ö–ò –ù–ê –°–¢–†–ê–ù–ò–¶–ï
        const unreadCountElement = document.getElementById('unread-count');
        const allCountElement = document.getElementById('all-count');
        const totalCountDisplay = document.getElementById('total-count-display');

        if (unreadCountElement) {
            unreadCountElement.textContent = serverUnreadCount !== null ? serverUnreadCount : unreadOnPage;
        }

        if (allCountElement) {
            allCountElement.textContent = serverTotalCount !== null ? serverTotalCount : totalOnPage;
        }

        if (totalCountDisplay) {
            totalCountDisplay.textContent = serverTotalCount !== null ? serverTotalCount : totalOnPage;
        }

        console.log('[DEBUG] Updated page counters:', {
            unread: serverUnreadCount !== null ? serverUnreadCount : unreadOnPage,
            total: serverTotalCount !== null ? serverTotalCount : totalOnPage
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    function updateNotificationBadge(count) {
        console.log('[DEBUG] updateNotificationBadge called with count:', count);

        // –ò—â–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —à–∞–ø–∫–µ
        let badge = document.querySelector('.nav-counter-badge.notifications-badge');
        if (!badge) {
            badge = document.querySelector('.notifications-badge');
        }
        if (!badge) {
            badge = document.querySelector('[class*="notifications-badge"]');
        }

        console.log('[DEBUG] Badge element found:', badge);

        if (badge) {
            if (count > 0) {
                badge.textContent = count;
                badge.style.display = 'flex';
                console.log('[DEBUG] Badge updated - showing count:', count);
            } else {
                badge.style.display = 'none';
                console.log('[DEBUG] Badge hidden - count is 0');
            }
        } else {
            console.warn('[DEBUG] Badge element not found');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Toast)
    function showToast(message, type = 'success') {
        const toastContainer = document.querySelector('.toast-container');
        const toastId = 'toast-' + Date.now();

        const toastHtml = `
            <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0" role="alert" aria-live="assertive" aria-atomic="true" id="${toastId}">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            </div>
        `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);

        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement, {
            autohide: true,
            delay: 3000
        });

        toast.show();

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
        toastElement.addEventListener('hidden.bs.toast', function() {
            toastElement.remove();
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    function markSingleNotificationRead(notificationId, buttonElement = null, cardElement = null, callback = null) {
        console.log('[DEBUG] markSingleNotificationRead called:', {
            notificationId,
            hasButton: !!buttonElement,
            hasCard: !!cardElement,
            hasCallback: !!callback
        });

        fetch(`/users/cabinet/notifications/${notificationId}/mark-read/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then(data => {
            console.log('[DEBUG] markSingleNotificationRead response:', data);

            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                const card = cardElement || document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (card) {
                    card.classList.remove('unread');
                    card.classList.add('read');
                    card.dataset.read = 'true';

                    // –£–¥–∞–ª—è–µ–º –±–µ–π–¥–∂ "–ù–æ–≤–æ–µ"
                    const newBadge = card.querySelector('.badge.bg-warning');
                    if (newBadge) {
                        newBadge.remove();
                    }
                }

                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
                if (buttonElement) {
                    buttonElement.style.display = 'none';
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                updateAllCounters(data.unread_notifications_count, data.total_notifications_count);

                // –í—ã–ø–æ–ª–Ω—è–µ–º callback, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (callback) {
                    callback();
                } else {
                    showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 'success');
                }
            } else {
                showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
            }
        })
        .catch(error => {
            console.error('[DEBUG] Error in markSingleNotificationRead:', error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ"
    function markAllAsRead() {
        fetch('/users/cabinet/notifications/read-all/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then(data => {
            console.log('[DEBUG] markAllAsRead response:', data);

            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                document.querySelectorAll('.notification-item').forEach(item => {
                    item.classList.remove('unread');
                    item.classList.add('read');
                    item.dataset.read = 'true';

                    // –£–¥–∞–ª—è–µ–º –±–µ–π–¥–∂–∏ "–ù–æ–≤–æ–µ"
                    const newBadge = item.querySelector('.badge.bg-warning');
                    if (newBadge) {
                        newBadge.remove();
                    }

                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
                    const readBtn = item.querySelector('.mark-read-btn');
                    if (readBtn) {
                        readBtn.style.display = 'none';
                    }
                });

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞
                const unreadCount = data.unread_count || data.unread_notifications_count || 0;
                const totalCount = data.total_count || data.total_notifications_count || 0;

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                updateNotificationBadge(unreadCount);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                updateAllCounters(unreadCount, totalCount);

                showToast(data.message || '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', 'success');
            } else {
                showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', markAllAsRead);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
    document.addEventListener('click', function(e) {
        if (e.target.closest('.mark-read-btn')) {
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            const button = e.target.closest('.mark-read-btn');
            const notificationId = button.dataset.notificationId;
            markSingleNotificationRead(notificationId, button);
        }
    });

    // –£–ú–ù–ê–Ø –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–û–°–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    document.querySelectorAll('.notification-item.clickable').forEach(card => {
        card.addEventListener('click', function(e) {
            // –ò—Å–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            if (e.target.closest('.notification-checkbox, .btn, a, button, input')) {
                console.log('[DEBUG] Click ignored - clicked on interactive element:', e.target);
                return;
            }

            const notificationId = this.dataset.notificationId;
            const actionUrl = this.dataset.actionUrl;
            const isRead = this.dataset.read === 'true';

            console.log('[DEBUG] Card clicked:', {
                notificationId,
                actionUrl,
                isRead,
                hasActionUrl: actionUrl && actionUrl !== 'None' && actionUrl !== '#'
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            this.classList.add('clicking');
            setTimeout(() => {
                this.classList.remove('clicking');
            }, 150);

            if (!isRead) {
                // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                console.log('[DEBUG] Marking notification as read before action');
                markSingleNotificationRead(notificationId, null, this, () => {
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                    if (actionUrl && actionUrl !== 'None' && actionUrl !== '#') {
                        console.log('[DEBUG] Redirecting to:', actionUrl);
                        window.location.href = actionUrl;
                    } else {
                        console.log('[DEBUG] No action URL, just marked as read');
                        showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 'success');
                    }
                });
            } else {
                // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏ –µ—Å—Ç—å actionUrl, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
                if (actionUrl && actionUrl !== 'None' && actionUrl !== '#') {
                    console.log('[DEBUG] Already read, redirecting to:', actionUrl);
                    window.location.href = actionUrl;
                } else {
                    console.log('[DEBUG] Already read, no action URL');
                    showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', 'info');
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        card.addEventListener('mouseenter', function() {
            if (this.classList.contains('clickable')) {
                this.style.cursor = 'pointer';
            }
        });
    });

    // –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –û–î–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    function deleteSingleNotification(notificationId, buttonElement = null) {
        console.log('[DEBUG] deleteSingleNotification called:', notificationId);

        fetch(`/users/cabinet/notifications/delete/${notificationId}/`, {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then(data => {
            console.log('[DEBUG] deleteSingleNotification response:', data);

            if (data.success) {
                // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM
                const card = document.querySelector(`[data-notification-id="${notificationId}"]`);
                if (card) {
                    card.style.transition = 'all 0.3s ease';
                    card.style.opacity = '0';
                    card.style.transform = 'translateX(-100%)';

                    setTimeout(() => {
                        card.remove();
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                        updateAllCounters(data.unread_notifications_count, data.total_notifications_count);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        const remainingNotifications = document.querySelectorAll('.notification-item');
                        if (remainingNotifications.length === 0) {
                            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        }
                    }, 300);
                }

                showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            } else {
                showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
            }
        })
        .catch(error => {
            console.error('[DEBUG] Error in deleteSingleNotification:', error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        });
    }

    // –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –í–´–ë–†–ê–ù–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    function deleteSelectedNotifications() {
        const selectedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
        const notificationIds = Array.from(selectedCheckboxes).map(cb => cb.dataset.notificationId);

        if (notificationIds.length === 0) {
            showToast('–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'error');
            return;
        }

        console.log('[DEBUG] deleteSelectedNotifications called:', notificationIds);

        fetch('/users/cabinet/notifications/delete-multiple/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                notification_ids: notificationIds
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log('[DEBUG] deleteSelectedNotifications response:', data);

            if (data.success) {
                // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ DOM
                notificationIds.forEach(id => {
                    const card = document.querySelector(`[data-notification-id="${id}"]`);
                    if (card) {
                        card.style.transition = 'all 0.3s ease';
                        card.style.opacity = '0';
                        card.style.transform = 'translateX(-100%)';

                        setTimeout(() => {
                            card.remove();
                        }, 300);
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                setTimeout(() => {
                    updateAllCounters(data.unread_notifications_count, data.total_notifications_count);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    const remainingNotifications = document.querySelectorAll('.notification-item');
                    if (remainingNotifications.length === 0) {
                        location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    }
                }, 300);

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                selectAllCheckbox.checked = false;
                updateBulkActionButtons();

                showToast(`–£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${data.deleted_count}`, 'success');
            } else {
                showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
            }
        })
        .catch(error => {
            console.error('[DEBUG] Error in deleteSelectedNotifications:', error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        });
    }

    // –§–£–ù–ö–¶–ò–Ø –ü–û–ú–ï–¢–ö–ò –í–´–ë–†–ê–ù–ù–´–• –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–´–•
    function markSelectedAsRead() {
        const selectedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
        const notificationIds = Array.from(selectedCheckboxes).map(cb => cb.dataset.notificationId);

        if (notificationIds.length === 0) {
            showToast('–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏', 'error');
            return;
        }

        console.log('[DEBUG] markSelectedAsRead called:', notificationIds);

        fetch('/users/cabinet/notifications/read-multiple/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                notification_ids: notificationIds
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log('[DEBUG] markSelectedAsRead response:', data);

            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                notificationIds.forEach(id => {
                    const card = document.querySelector(`[data-notification-id="${id}"]`);
                    if (card) {
                        card.classList.remove('unread');
                        card.classList.add('read');
                        card.dataset.read = 'true';

                        // –£–¥–∞–ª—è–µ–º –±–µ–π–¥–∂ "–ù–æ–≤–æ–µ"
                        const newBadge = card.querySelector('.badge.bg-warning');
                        if (newBadge) {
                            newBadge.remove();
                        }

                        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
                        const readBtn = card.querySelector('.mark-read-btn');
                        if (readBtn) {
                            readBtn.style.display = 'none';
                        }
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                updateAllCounters(data.unread_notifications_count, data.total_notifications_count);

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                selectAllCheckbox.checked = false;
                updateBulkActionButtons();

                showToast(`–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: ${data.updated_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`, 'success');
            } else {
                showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
            }
        })
        .catch(error => {
            console.error('[DEBUG] Error in markSelectedAsRead:', error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        });
    }

    // –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –ö–ù–û–ü–û–ö –ú–ê–°–°–û–í–´–• –î–ï–ô–°–¢–í–ò–ô
    function updateBulkActionButtons() {
        const selectedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');
        const hasSelected = selectedCheckboxes.length > 0;

        if (markSelectedReadBtn) {
            markSelectedReadBtn.disabled = !hasSelected;
        }
        if (deleteSelectedBtn) {
            deleteSelectedBtn.disabled = !hasSelected;
        }
    }

    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –î–õ–Ø –ö–ù–û–ü–û–ö –£–î–ê–õ–ï–ù–ò–Ø
    document.addEventListener('click', function(e) {
        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (e.target.closest('.delete-single-btn')) {
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            const button = e.target.closest('.delete-single-btn');
            const notificationId = button.dataset.notificationId;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            document.getElementById('deleteModalText').textContent = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?';

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const confirmBtn = document.getElementById('confirmDelete');
            confirmBtn.onclick = function() {
                deleteSingleNotification(notificationId, button);
                modal.hide();
            };

            modal.show();
        }
    });

    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ê–°–°–û–í–´–• –î–ï–ô–°–¢–í–ò–ô
    if (deleteSelectedBtn) {
        deleteSelectedBtn.addEventListener('click', function() {
            const selectedCount = document.querySelectorAll('.notification-checkbox:checked').length;
            if (selectedCount === 0) {
                showToast('–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'error');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            document.getElementById('deleteModalText').textContent = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?`;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const confirmBtn = document.getElementById('confirmDelete');
            confirmBtn.onclick = function() {
                deleteSelectedNotifications();
                modal.hide();
            };

            modal.show();
        });
    }

    if (markSelectedReadBtn) {
        markSelectedReadBtn.addEventListener('click', markSelectedAsRead);
    }

    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ß–ï–ö–ë–û–ö–°–û–í
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.notification-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateBulkActionButtons();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('notification-checkbox')) {
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            updateBulkActionButtons();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
            const allCheckboxes = document.querySelectorAll('.notification-checkbox');
            const checkedCheckboxes = document.querySelectorAll('.notification-checkbox:checked');

            if (selectAllCheckbox) {
                selectAllCheckbox.checked = allCheckboxes.length === checkedCheckboxes.length;
                selectAllCheckbox.indeterminate = checkedCheckboxes.length > 0 && checkedCheckboxes.length < allCheckboxes.length;
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —á–µ–∫–±–æ–∫—Å–∞–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('notification-checkbox')) {
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º –∏ —Å—Å—ã–ª–∫–∞–º –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
    document.addEventListener('click', function(e) {
        if (e.target.closest('.notification-actions .btn, .notification-actions a')) {
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
        }
    });

    // –§–ò–õ–¨–¢–†–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    if (filterTabs.length > 0) {
        filterTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                filterTabs.forEach(t => t.classList.remove('active'));
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
                this.classList.add('active');

                const filter = this.dataset.filter;
                console.log('[DEBUG] Filter applied:', filter);

                // –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notificationCards.forEach(card => {
                    let shouldShow = true;

                    switch (filter) {
                        case 'all':
                            shouldShow = true;
                            break;
                        case 'unread':
                            shouldShow = card.dataset.read === 'false';
                            break;
                        case 'system':
                            shouldShow = card.dataset.type === 'system';
                            break;
                        case 'social':
                            shouldShow = card.dataset.type === 'social';
                            break;
                        case 'orders':
                            shouldShow = card.dataset.type === 'order';
                            break;
                        default:
                            shouldShow = true;
                    }

                    card.style.display = shouldShow ? 'block' : 'none';
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                updateAllCounters();
            });
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updateAllCounters();
});
