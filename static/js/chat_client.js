/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è WebSocket —á–∞—Ç–∞ "–ë–µ—Å–µ–¥–∫–∞"
 */
class ChatClient {
    constructor(chatType = 'general', roomId = null) {
        this.chatType = chatType;
        this.roomId = roomId;
        this.socket = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 1000;
        this.isTyping = false;
        this.typingTimer = null;
        this.userReactedMessages = new Set(); // track messages reacted by current user to block double reaction
        this.replyToId = null; // <-- ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        this.replyToSnippet = null;

        this.init();
    }

    init() {
        this.connect();
        this.setupEventListeners();
    }

    connect() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        let wsUrl;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
        switch (this.chatType) {
            case 'general':
                wsUrl = `${protocol}//${window.location.host}/ws/chat/general/`;
                break;
            case 'private':
                wsUrl = `${protocol}//${window.location.host}/ws/chat/private/${this.roomId}/`;
                break;
            case 'discussion':
                wsUrl = `${protocol}//${window.location.host}/ws/chat/discussion/${this.roomId}/`;
                break;
            case 'vip':
                wsUrl = `${protocol}//${window.location.host}/ws/chat/vip/`;
                break;
            default:
                console.error('Unknown chat type:', this.chatType);
                return;
        }

        console.log('Connecting to:', wsUrl);
        this.updateConnectionStatus('connecting');

        this.socket = new WebSocket(wsUrl);

        this.socket.onopen = (event) => {
            console.log('‚úÖ WebSocket connected');
            this.updateConnectionStatus('connected');
            this.reconnectAttempts = 0;
            window.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç—É', 'success');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            this.fetchMessages();
            this.fetchOnlineUsers();
        };

        this.socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            this.handleMessage(data);
        };

        this.socket.onclose = (event) => {
            console.log('‚ùå WebSocket disconnected:', event.code, event.reason);
            this.updateConnectionStatus('disconnected');

            if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {
                setTimeout(() => {
                    this.reconnectAttempts++;
                    console.log(`üîÑ Reconnection attempt ${this.reconnectAttempts}`);
                    this.connect();
                }, this.reconnectDelay * this.reconnectAttempts);
            } else {
                window.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
            }
        };

        this.socket.onerror = (error) => {
            console.error('‚ùå WebSocket error:', error);
            this.updateConnectionStatus('disconnected');
            window.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
        };
    }

    handleMessage(data) {
        switch (data.type) {
            case 'new_message':
                this.displayMessage(data.message);
                break;
            case 'messages_history':
                this.displayMessages(data.messages);
                break;
            case 'typing':
                this.handleTypingIndicator(data);
                break;
            case 'online_users':
                this.updateOnlineUsers(data.users, data.count);
                break;
            case 'user_joined':
                this.handleUserJoined(data.user);
                break;
            case 'user_left':
                this.handleUserLeft(data.user);
                break;
            case 'reaction_update':
                this.applyReactionUpdate(data);
                break;
            default:
                console.log('Unknown message type:', data.type);
        }
    }

    displayMessage(message) {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—á–∏—Å—Ç–∏–º placeholder
        const placeholder = messagesContainer.querySelector('.text-center');
        if (placeholder) {
            messagesContainer.innerHTML = '';
        }

        const messageElement = this.createMessageElement(message);
        messagesContainer.appendChild(messageElement);

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    displayMessages(messages) {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        messagesContainer.innerHTML = '';

        if (messages.length === 0) {
            messagesContainer.innerHTML = `
                <div class="text-center text-muted py-4">
                    <i class="fas fa-comments fa-3x mb-3 opacity-50"></i>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!</p>
                </div>
            `;
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        messages.reverse().forEach(message => {
            const messageElement = this.createMessageElement(message);
            messagesContainer.appendChild(messageElement);
        });

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    createMessageElement(message) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message');
        if (message.is_own) {
            messageDiv.classList.add('own-message');
        } else {
            messageDiv.classList.add('other-message');
        }

        // –ë–∞–∑–æ–≤—ã–µ data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π
        messageDiv.setAttribute('data-message-id', message.id);
        messageDiv.setAttribute('data-author', message.author_name);
        if (message.author_role) {
            messageDiv.setAttribute('data-author-role', message.author_role);
        }

        // –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–¥ RU
        const timeString = new Date(message.created).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π –≤ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        const roleIcon = message.author_role_icon || 'üë§';
        const likes = typeof message.likes_count !== 'undefined' ? message.likes_count : 0;
        const dislikes = typeof message.dislikes_count !== 'undefined' ? message.dislikes_count : 0;

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º ‚Äì –≥–æ—Ç–æ–≤–∏–º —Ü–∏—Ç–∞—Ç—É
        let quoteSection = '';
        let quoteNavButton = '';
        if (message.reply_to) {
            const replyAuthor = this.escapeHtml(message.reply_to.author_name || '');
            const replySnippet = this.escapeHtml(message.reply_to.content_snippet || '');
            quoteSection = `
                <div class="quoted-message">
                    <div class="quote-author">@${replyAuthor}</div>
                    <div class="quote-text">${replySnippet}</div>
                </div>`;
            quoteNavButton = `
                <button class="quote-nav-btn" data-target-message="${message.reply_to.id}" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é">
                    <i class="fas fa-arrow-up"></i>
                </button>`;
            messageDiv.classList.add('reply-message');
        }

        if (message.is_reply_to_me) {
            messageDiv.classList.add('has-reply-to-me');
        }

        // Build reaction HTML snippet for header (inline)
        const replyControl = `
            <button class="reply-set-btn" data-message-id="${message.id}" data-author="${this.escapeHtml(message.author_name)}" title="–û—Ç–≤–µ—Ç–∏—Ç—å">
                <i class="fas fa-reply"></i>
            </button>`;

        const reactionsInHeader = `
            <div class="message-reactions">
                ${replyControl}
                <button class="reaction-btn like-btn" data-message-id="${message.id}" data-action="like" title="–ù—Ä–∞–≤–∏—Ç—Å—è">
                    <i class="fas fa-thumbs-up"></i>
                    <div class="reaction-count">${likes}</div>
                </button>
                <button class="reaction-btn dislike-btn" data-message-id="${message.id}" data-action="dislike" title="–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è">
                    <i class="fas fa-thumbs-down"></i>
                    <div class="reaction-count">${dislikes}</div>
                </button>
            </div>`;

        // –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        messageDiv.innerHTML = `
            <div class="message-bubble">
                <div class="message-header">
                    <div class="message-meta">
                        <span class="message-author"><span class="role-icon">${roleIcon}</span>${this.escapeHtml(message.author_name)}</span>
                        <span class="message-time">${timeString}</span>
                    </div>
                    ${reactionsInHeader}
                </div>
                <div class="message-content-area">
                    ${quoteSection}
                    <div class="message-content">${this.escapeHtml(message.content)}</div>
                </div>
                ${quoteNavButton}
            </div>`;

        return messageDiv;
    }

    updateOnlineUsers(users, count) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —à–∞–ø–∫–µ
        const onlineCountElement = document.getElementById('online-count');
        if (onlineCountElement) {
            onlineCountElement.textContent = count || users.length;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º badge —Å—á–µ—Ç—á–∏–∫ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        const onlineCountBadge = document.getElementById('online-count-badge');
        if (onlineCountBadge) {
            onlineCountBadge.textContent = count || users.length;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersList = document.getElementById('online-users-list');
        if (!usersList) return;

        if (users.length === 0) {
            usersList.innerHTML = `
                <div class="text-center text-muted py-3">
                    <i class="fas fa-user-slash mb-2"></i>
                    <p class="small mb-0">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω</p>
                </div>
            `;
            return;
        }

        usersList.innerHTML = '';
        users.forEach(user => {
            const userElement = document.createElement('div');
            userElement.className = 'online-user';
            userElement.innerHTML = `
                <div class="status-dot"></div>
                <span class="user-name">
                    <span class="role-icon">${user.role_icon || 'üë§'}</span>
                    ${this.escapeHtml(user.display_name || user.username)}
                </span>
            `;
            usersList.appendChild(userElement);
        });
    }

    handleUserJoined(user) {
        console.log(`üëã ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.fetchOnlineUsers();
    }

    handleUserLeft(user) {
        console.log(`üëã ${user.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.fetchOnlineUsers();
    }

    sendMessage() {
        const input = document.getElementById('message-input');
        if (!input) return;

        const message = input.value.trim();

        if (message && this.socket && this.socket.readyState === WebSocket.OPEN) {
            const payload = {
                type: 'message',
                message: message
            };
            if (this.replyToId) {
                payload.reply_to_id = this.replyToId;
            }
            this.socket.send(JSON.stringify(payload));

            input.value = '';
            this.stopTyping();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
            this.replyToId = null;
            this.hideReplyIndicator();
        } else if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
            window.showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }

    fetchMessages(page = 1) {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.send(JSON.stringify({
                type: 'fetch_messages',
                page: page
            }));
        }
    }

    fetchOnlineUsers() {
        if (this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.socket.send(JSON.stringify({
                type: 'fetch_online_users'
            }));
        }
    }

    startTyping() {
        if (!this.isTyping && this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.isTyping = true;
            this.socket.send(JSON.stringify({
                type: 'typing',
                is_typing: true
            }));
        }

        clearTimeout(this.typingTimer);
        this.typingTimer = setTimeout(() => {
            this.stopTyping();
        }, 3000);
    }

    stopTyping() {
        if (this.isTyping && this.socket && this.socket.readyState === WebSocket.OPEN) {
            this.isTyping = false;
            this.socket.send(JSON.stringify({
                type: 'typing',
                is_typing: false
            }));
        }
        clearTimeout(this.typingTimer);
    }

    handleTypingIndicator(data) {
        const typingIndicator = document.getElementById('typing-indicator');
        if (!typingIndicator) return;

        if (data.is_typing) {
            typingIndicator.innerHTML = `
                <i class="fas fa-ellipsis-h text-primary me-2"></i>
                <span>${this.escapeHtml(data.user)} –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
            `;
        } else {
            typingIndicator.innerHTML = '';
        }
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendButton = document.getElementById('send-button');
        if (sendButton) {
            sendButton.addEventListener('click', (e) => {
                e.preventDefault();
                this.sendMessage();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ (Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
        const messageInput = document.getElementById('message-input');
        if (messageInput) {
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            messageInput.addEventListener('input', () => {
                if (messageInput.value.trim()) {
                    this.startTyping();
                } else {
                    this.stopTyping();
                }
            });
        }

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤
        const messagesContainer = document.getElementById('chat-messages');
        if (messagesContainer) {
            messagesContainer.addEventListener('click', (e) => {
                const btn = e.target.closest('.reaction-btn');
                if (btn && !btn.classList.contains('disabled')) {
                    const messageId = btn.getAttribute('data-message-id');
                    const action = btn.getAttribute('data-action');
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
                    if (this.userReactedMessages.has(messageId)) return;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
                        this.socket.send(JSON.stringify({
                            type: 'reaction',
                            reaction: action,
                            message_id: messageId
                        }));
                        this.userReactedMessages.add(messageId);
                        // –ü–æ–º–µ—á–∞–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π (—Ü–≤–µ—Ç) –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫
                        btn.classList.add('active');
                        btn.classList.add('disabled');

                        // –î–µ–ª–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π (disabled), –Ω–æ –Ω–µ active
                        const otherBtnSelector = action === 'like' ? '.dislike-btn' : '.like-btn';
                        const otherBtn = btn.parentElement.parentElement.querySelector(otherBtnSelector);
                        if (otherBtn) {
                            otherBtn.classList.add('disabled');
                        }
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ü–∏—Ç–∞—Ç–µ
                const quoteBtn = e.target.closest('.quote-nav-btn');
                if (quoteBtn) {
                    const targetId = quoteBtn.getAttribute('data-target-message');
                    const targetEl = document.querySelector(`.message[data-message-id="${targetId}"]`);
                    if (targetEl) {
                        targetEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        targetEl.classList.add('reply-highlighted');
                        setTimeout(() => targetEl.classList.remove('reply-highlighted'), 2000);
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
                const replyBtn = e.target.closest('.reply-set-btn');
                if (replyBtn) {
                    const targetId = replyBtn.getAttribute('data-message-id');
                    const author = replyBtn.getAttribute('data-author');
                    this.replyToId = targetId;
                    this.replyToSnippet = author;
                    this.showReplyIndicator(author); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    const input = document.getElementById('message-input');
                    if (input) input.focus();
                }
            });
        }

        // –°–Ω—è—Ç–∏–µ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–µ
        const messagesArea = document.getElementById('chat-messages');
        if (messagesArea) {
            messagesArea.addEventListener('click', (e) => {
                const msgEl = e.target.closest('.message.has-reply-to-me');
                if (msgEl) {
                    msgEl.classList.remove('has-reply-to-me');
                }
            });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.socket && this.socket.readyState === WebSocket.OPEN) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.fetchOnlineUsers();
            }
        });
    }

    updateConnectionStatus(status) {
        const statusElement = document.getElementById('connection-status');
        if (!statusElement) return;

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
        statusElement.classList.remove('connected', 'connecting', 'disconnected');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        switch (status) {
            case 'connected':
                statusElement.classList.add('connected');
                statusElement.innerHTML = '<i class="fas fa-circle me-1"></i> –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                break;
            case 'connecting':
                statusElement.classList.add('connecting');
                statusElement.innerHTML = '<i class="fas fa-circle me-1"></i> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
                break;
            case 'disconnected':
                statusElement.classList.add('disconnected');
                statusElement.innerHTML = '<i class="fas fa-circle me-1"></i> –û—Ç–∫–ª—é—á–µ–Ω–æ';
                break;
        }
    }

    // –£–¥–∞–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π window.showNotification

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    disconnect() {
        if (this.socket) {
            this.socket.close(1000, 'User disconnect');
            this.socket = null;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–∫—Ü–∏–π, –ø—Ä–∏—à–µ–¥—à–µ–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    applyReactionUpdate({ message_id, likes, dislikes }) {
        const messageEl = document.querySelector(`.message[data-message-id="${message_id}"]`);
        if (!messageEl) return;
        const likeCountEl = messageEl.querySelector('.like-btn .reaction-count');
        const dislikeCountEl = messageEl.querySelector('.dislike-btn .reaction-count');
        if (likeCountEl) likeCountEl.textContent = likes;
        if (dislikeCountEl) dislikeCountEl.textContent = dislikes;
    }

    showReplyIndicator(author) {
        const indicator = document.getElementById('reply-indicator-area');
        if (!indicator) return;
        indicator.innerHTML = `–û—Ç–≤–µ—Ç @${this.escapeHtml(author)}  <button id="cancel-reply-btn" class="btn btn-sm btn-link text-light">–û—Ç–º–µ–Ω–∞</button>`;
        indicator.style.display = 'block';
        const cancelBtn = document.getElementById('cancel-reply-btn');
        if (cancelBtn) {
            cancelBtn.onclick = () => {
                this.replyToId = null;
                this.hideReplyIndicator();
            };
        }
    }

    hideReplyIndicator() {
        const indicator = document.getElementById('reply-indicator-area');
        if (indicator) {
            indicator.style.display = 'none';
            indicator.innerHTML = '';
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
function initChat(chatType = 'general', roomId = null) {
    return new ChatClient(chatType, roomId);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { ChatClient, initChat };
}
