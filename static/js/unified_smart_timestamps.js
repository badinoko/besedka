/**
 * üïí –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ë–µ—Å–µ–¥–∫–∞"
 * –í–µ—Ä—Å–∏—è: 1.0 - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–µ
 *
 * –§—É–Ω–∫—Ü–∏–∏:
 * - formatSmartTimestamp(dateString) - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * - initSmartTimestamps() - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * - updateAllTimestamps() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–∫ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)
 */

class SmartTimestamps {
    constructor() {
        this.updateInterval = null;
        this.init();
    }

    /**
     * üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (–∏–∑ —á–∞—Ç–∞)
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
     */
    formatSmartTimestamp(dateString) {
        if (!dateString) return '';

        const targetDate = new Date(dateString);
        const now = new Date();
        const diffInMs = now - targetDate;
        const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
        const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
        const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));

        // –ú–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
        if (diffInMinutes < 1) {
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        }

        // –ú–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥ (1-59 –º–∏–Ω—É—Ç)
        if (diffInMinutes < 60) {
            const minuteWord = diffInMinutes === 1 ? '–º–∏–Ω—É—Ç—É' :
                              (diffInMinutes >= 2 && diffInMinutes <= 4) ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç';
            return `${diffInMinutes} ${minuteWord} –Ω–∞–∑–∞–¥`;
        }

        // –ú–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ (1-23 —á–∞—Å–∞)
        if (diffInHours < 24) {
            const hourWord = diffInHours === 1 ? '—á–∞—Å' :
                           (diffInHours >= 2 && diffInHours <= 4) ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤';
            return `${diffInHours} ${hourWord} –Ω–∞–∑–∞–¥`;
        }

        // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        if (diffInDays === 1) {
            return `–≤—á–µ—Ä–∞ –≤ ${targetDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
        }

        // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
        if (diffInDays === 2) {
            return `–ø–æ–∑–∞–≤—á–µ—Ä–∞ –≤ ${targetDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
        }

        // –î–æ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥ (3-7 –¥–Ω–µ–π)
        if (diffInDays <= 7) {
            const dayWord = diffInDays === 1 ? '–¥–µ–Ω—å' :
                           (diffInDays >= 2 && diffInDays <= 4) ? '–¥–Ω—è' : '–¥–Ω–µ–π';
            return `${diffInDays} ${dayWord} –Ω–∞–∑–∞–¥`;
        }

        // –î–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ (1-4 –Ω–µ–¥–µ–ª–∏)
        if (diffInDays <= 30) {
            const weekCount = Math.floor(diffInDays / 7);
            const weekWord = weekCount === 1 ? '–Ω–µ–¥–µ–ª—é' :
                           (weekCount >= 2 && weekCount <= 4) ? '–Ω–µ–¥–µ–ª–∏' : '–Ω–µ–¥–µ–ª—å';
            return `${weekCount} ${weekWord} –Ω–∞–∑–∞–¥`;
        }

        // –ë–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é –¥–∞—Ç—É
        return targetDate.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * üîÑ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–ù–û–ô –î–ê–¢–´ –î–õ–Ø TOOLTIP
     */
    getFullDateTime(dateString) {
        if (!dateString) return '';

        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            weekday: 'long',
            day: '2-digit',
            month: 'long',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    /**
     * üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–ú–ù–´–• –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö –ù–ê –°–¢–†–ê–ù–ò–¶–ï
     */
    init() {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.processAllTimestamps());
        } else {
            this.processAllTimestamps();
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.startAutoUpdate();
    }

    /**
     * üîç –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö –ù–ê –°–¢–†–ê–ù–ò–¶–ï
     */
    processAllTimestamps() {
        // 1. –ö–∞—Ä—Ç–æ—á–∫–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (–≥–∞–ª–µ—Ä–µ—è, –Ω–æ–≤–æ—Å—Ç–∏, –≥—Ä–æ—É–ª–æ–≥–∏)
        const cardMetas = document.querySelectorAll('.card-meta small');
        cardMetas.forEach(meta => this.processCardMeta(meta));

        // 2. –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        const chatTimestamps = document.querySelectorAll('.message-timestamp');
        chatTimestamps.forEach(timestamp => this.processChatTimestamp(timestamp));

        // 3. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ
        const editIndicators = document.querySelectorAll('.edit-indicator');
        editIndicators.forEach(indicator => this.processEditIndicator(indicator));

        // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const customElements = document.querySelectorAll('[data-smart-timestamp]');
        customElements.forEach(element => this.processCustomElement(element));

        console.log('‚úÖ Smart timestamps initialized for', {
            cardMetas: cardMetas.length,
            chatTimestamps: chatTimestamps.length,
            editIndicators: editIndicators.length,
            customElements: customElements.length
        });
    }

    /**
     * üìã –û–ë–†–ê–ë–û–¢–ö–ê –í–†–ï–ú–ï–ù–ò –í –ö–ê–†–¢–û–ß–ö–ê–• (–≥–∞–ª–µ—Ä–µ—è, –Ω–æ–≤–æ—Å—Ç–∏, –≥—Ä–æ—É–ª–æ–≥–∏)
     */
    processCardMeta(metaElement) {
        const text = metaElement.textContent;

        // –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∞–≤—Ç–æ—Ä ‚Ä¢ –¥–∞—Ç–∞"
        const dateMatch = text.match(/(.+?)\s*‚Ä¢\s*(.+)/);
        if (!dateMatch) return;

        const author = dateMatch[1].trim();
        const dateStr = dateMatch[2].trim();

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        const date = this.parseDateString(dateStr);
        if (!date) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ
        metaElement.setAttribute('data-original-date', date.toISOString());

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const smartTime = this.formatSmartTimestamp(date.toISOString());
        const fullDateTime = this.getFullDateTime(date.toISOString());

        metaElement.innerHTML = `${author} ‚Ä¢ <span class="smart-timestamp" title="${fullDateTime}">${smartTime}</span>`;
    }

    /**
     * üí¨ –û–ë–†–ê–ë–û–¢–ö–ê –í–†–ï–ú–ï–ù–ò –í –ß–ê–¢–ï
     */
    processChatTimestamp(timestampElement) {
        // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (timestampElement.hasAttribute('data-smart-processed')) return;

        // –ò—â–µ–º –¥–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        const messageElement = timestampElement.closest('[data-message-id]');
        if (!messageElement) return;

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        let dateStr = timestampElement.getAttribute('data-created') ||
                      timestampElement.textContent;

        const date = this.parseDateString(dateStr);
        if (!date) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        timestampElement.setAttribute('data-original-date', date.toISOString());
        timestampElement.setAttribute('data-smart-processed', 'true');

        const smartTime = this.formatSmartTimestamp(date.toISOString());
        const fullDateTime = this.getFullDateTime(date.toISOString());

        timestampElement.textContent = smartTime;
        timestampElement.setAttribute('title', fullDateTime);
    }

    /**
     * ‚úèÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –í –ß–ê–¢–ï
     */
    processEditIndicator(indicatorElement) {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç formatSmartTimestamp –≤ —á–∞—Ç–µ
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ tooltip —Å –ø–æ–ª–Ω–æ–π –¥–∞—Ç–æ–π
        const timeMatch = indicatorElement.textContent.match(/(\d+\s+\w+\s+–Ω–∞–∑–∞–¥|–≤—á–µ—Ä–∞|–ø–æ–∑–∞–≤—á–µ—Ä–∞|—Ç–æ–ª—å–∫–æ —á—Ç–æ)/);
        if (timeMatch) {
            const dateStr = indicatorElement.getAttribute('data-edited-at');
            if (dateStr) {
                const fullDateTime = this.getFullDateTime(dateStr);
                indicatorElement.setAttribute('title', fullDateTime);
            }
        }
    }

    /**
     * üéØ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –≠–õ–ï–ú–ï–ù–¢–û–í
     */
    processCustomElement(element) {
        const dateStr = element.getAttribute('data-smart-timestamp');
        if (!dateStr) return;

        const smartTime = this.formatSmartTimestamp(dateStr);
        const fullDateTime = this.getFullDateTime(dateStr);

        element.textContent = smartTime;
        element.setAttribute('title', fullDateTime);
    }

    /**
     * üìÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –î–ê–¢
     */
    parseDateString(dateStr) {
        if (!dateStr || typeof dateStr !== 'string') return null;

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ISO —Ñ–æ—Ä–º–∞—Ç
        let date = new Date(dateStr);
        if (!isNaN(date.getTime())) return date;

        // –†—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç "–¥–¥ –º–µ—Å—è—Ü –≥–≥–≥–≥"
        const ruMonths = {
            '—è–Ω–≤': 0, '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä': 2, '–º–∞—Ä—Ç–∞': 2,
            '–∞–ø—Ä': 3, '–∞–ø—Ä–µ–ª—è': 3, '–º–∞–π': 4, '–º–∞—è': 4, '–∏—é–Ω': 5, '–∏—é–Ω—è': 5,
            '–∏—é–ª': 6, '–∏—é–ª—è': 6, '–∞–≤–≥': 7, '–∞–≤–≥—É—Å—Ç–∞': 7, '—Å–µ–Ω—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 8,
            '–æ–∫—Ç': 9, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±': 10, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫': 11, '–¥–µ–∫–∞–±—Ä—è': 11
        };

        const ruMatch = dateStr.match(/(\d{1,2})\s+(\w+)\s+(\d{4})/);
        if (ruMatch) {
            const day = parseInt(ruMatch[1]);
            const month = ruMonths[ruMatch[2].toLowerCase()];
            const year = parseInt(ruMatch[3]);

            if (month !== undefined) {
                return new Date(year, month, day);
            }
        }

        return null;
    }

    /**
     * ‚ö° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö
     */
    startAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.updateInterval = setInterval(() => {
            this.updateAllTimestamps();
        }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    }

    /**
     * üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö
     */
    updateAllTimestamps() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        const elementsToUpdate = document.querySelectorAll('[data-original-date]');

        elementsToUpdate.forEach(element => {
            const originalDate = element.getAttribute('data-original-date');
            if (!originalDate) return;

            const smartTime = this.formatSmartTimestamp(originalDate);
            const fullDateTime = this.getFullDateTime(originalDate);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (element.classList.contains('smart-timestamp')) {
                element.textContent = smartTime;
                element.setAttribute('title', fullDateTime);
            } else if (element.classList.contains('message-timestamp')) {
                element.textContent = smartTime;
                element.setAttribute('title', fullDateTime);
            } else {
                // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                const currentText = element.textContent;
                const newText = currentText.replace(/\d+\s+\w+\s+–Ω–∞–∑–∞–¥|–≤—á–µ—Ä–∞|–ø–æ–∑–∞–≤—á–µ—Ä–∞|—Ç–æ–ª—å–∫–æ —á—Ç–æ|\d{2}\.\d{2}\.\d{4}/g, smartTime);
                element.textContent = newText;
                element.setAttribute('title', fullDateTime);
            }
        });

        console.log('üîÑ Updated', elementsToUpdate.length, 'smart timestamps');
    }

    /**
     * üßπ –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
     */
    destroy() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.SmartTimestamps = SmartTimestamps;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
let globalSmartTimestamps = null;

document.addEventListener('DOMContentLoaded', function() {
    globalSmartTimestamps = new SmartTimestamps();
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.formatSmartTimestamp = function(dateString) {
    if (!globalSmartTimestamps) {
        globalSmartTimestamps = new SmartTimestamps();
    }
    return globalSmartTimestamps.formatSmartTimestamp(dateString);
};

window.initSmartTimestamps = function() {
    if (globalSmartTimestamps) {
        globalSmartTimestamps.processAllTimestamps();
    }
};

window.updateAllTimestamps = function() {
    if (globalSmartTimestamps) {
        globalSmartTimestamps.updateAllTimestamps();
    }
};
