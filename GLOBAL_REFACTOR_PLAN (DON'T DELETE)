Исполняемый промпт: Миграция чата «БЕСЕДКА» на Rocket.Chat
Введение для AI-ассистента
Ваша задача — выполнить полную миграцию существующего раздела «Чат» проекта «БЕСЕДКА» на платформу Rocket.Chat. Текущий чат нефункционален и не соответствует требованиям. Цель — создать полнофункциональный, безопасный и масштабируемый коммуникационный центр, поддерживающий до 5000 пользователей.

Ключевые требования:

Функционал: Ответы, цитирование, медиафайлы, форматирование (Markdown), история, упоминания, эмодзи, предпросмотр ссылок.

Безопасность: Максимальная защита от взлома и утечек, шифрование (E2EE, TLS), 2FA, строгий RBAC.

Масштабируемость: До 5000 пользователей, высокая производительность и доступность.

Интеграция: Бесшовная интеграция с существующей системой аутентификации и ролями «БЕСЕДКИ» (BESEDKA_USER_SYSTEM.md НЕИЗМЕНЕН).

Дизайн: Соответствие стандартам UI/UX «БЕСЕДКИ» и SSOT.

Административный контроль: Владелец управляет приватными чатами из админ-панели «БЕСЕДКИ».

Радикальные изменения: Пользователь готов к значительным архитектурным изменениям.

Документация: Обновление BESEDKA_MASTER_DOCUMENTATION.md, BESEDKA_UI_STANDARDS.md, CHANGELOG.md и SSOT с перекрестными ссылками.

Действуйте строго пошагово, документируя каждый этап. Используйте официальную документацию Rocket.Chat (по предоставленным ссылкам) для точного выполнения задач.

I. Развертывание сервера Rocket.Chat (Kubernetes с микросервисами)
Цель: Развернуть высокодоступный и масштабируемый экземпляр Rocket.Chat в кластере Kubernetes для производственного использования.

Предварительные условия: Доступ к кластеру Kubernetes, установленный Helm v3, зарегистрированное доменное имя (например, chat.besedka.com) и административные учетные данные для сервера.

Шаги к выполнению:

Предоставление сервера: Обеспечьте серверную инфраструктуру для кластера Kubernetes, соответствующую рекомендованным спецификациям для 5000 одновременных пользователей: Rocket.Chat (4-16 vCPU, 4-12 GiB ОЗУ, 40 ГБ хранилища) и MongoDB (3 реплики, каждая по 2-8 vCPU, 4-16 GiB ОЗУ, 20-80 ГБ хранилища). См. [17] для подробных аппаратных спецификаций.

Добавление Helm-чарта: Добавьте официальный репозиторий Helm-чартов Rocket.Chat: helm repo add rocketchat https://rocketchat.github.io/helm-charts. Проверьте добавление. См. [14].

Определение конфигурации: Создайте файл values.yaml, указывающий доменное имя, класс контроллера ingress и отключающий развертывание MongoDB по умолчанию (будет использоваться внешний набор реплик MongoDB). См. [14].

Настройка внешней MongoDB: Настройте отдельный, неконтейнеризованный набор реплик MongoDB (3 реплики) на выделенных серверах для высокой доступности и соответствия требованиям 5000 пользователей. См. [14, 17].

Установка Rocket.Chat: Установите Rocket.Chat в кластере Kubernetes с использованием Helm: helm install rocketchat -f values.yaml rocketchat/rocketchat. См. [14].

Завершение мастера настройки: Получите доступ к Rocket.Chat через https://chat.besedka.com и завершите начальную настройку, создав учетную запись администратора.

Конфигурация обратного прокси: Настройте обратный прокси-сервер (например, Nginx) для HTTPS. Убедитесь, что ROOT_URL и SITE_URL в Rocket.Chat соответствуют публичному домену. См. [18, 20].

Проверка: Убедитесь, что все поды Rocket.Chat запущены (kubectl get pods), проверьте логи и подтвердите доступность по HTTPS. См. [14].

Отчет: Предоставьте сводку состояния развертывания, URL-адрес доступа и любые проблемы.

II. Интеграция аутентификации пользователей и RBAC
Цель: Интегрировать существующую аутентификацию пользователей и роли «БЕСЕДКИ» с системой Rocket.Chat.

Предварительные условия: Развернутый экземпляр Rocket.Chat, доступ к базе данных пользователей/системе аутентификации «БЕСЕДКИ».

Шаги к выполнению:

Выбор метода аутентификации: Проанализируйте текущую систему аутентификации «БЕСЕДКИ» (LDAP, OAuth, пользовательская БД) и выберите наиболее подходящий метод интеграции Rocket.Chat (LDAP, SAML, OAuth или пользовательская интеграция API). См. [25, 26].

Конфигурация аутентификации: Настройте выбранный метод в настройках администрирования Rocket.Chat (Настройки > OAuth/LDAP). См. [25, 26].

Первоначальная синхронизация/импорт пользователей: Разработайте скрипт или используйте API импорта Rocket.Chat (/api/v1/import.addUsers) для импорта существующих пользователей «БЕСЕДКИ». Убедитесь в уникальности данных. См. [33].

Создание пользовательских ролей: На основе НЕИЗМЕНЯЕМОГО документа «БЕСЕДКИ» о ролях и полномочиях создайте соответствующие пользовательские роли в Rocket.Chat (например, «BESEDKA_Owner», «BESEDKA_User»). Назначьте им необходимые разрешения (например, create-p, add-user-to-any-p-room, delete-message). См. [3, 27, 28].

Назначение ролей: Разработайте механизм (например, вызовы API) для программного назначения этих пользовательских ролей Rocket.Chat синхронизированным пользователям на основе их ролей в «БЕСЕДКЕ». Соблюдайте принцип наименьших привилегий (POLP). См. [20, 28].

Конфигурация 2FA: Настройте двухфакторную аутентификацию (2FA) в Rocket.Chat. Убедитесь, что она включена для всех пользователей или определенных ролей. Настройте SMTP-сервер для 2FA по электронной почте. См. [3, 20, 30].

Проверка: Проверьте вход через интегрированный метод, правильность назначения ролей и разрешений, а также функциональность 2FA.

Отчет: Подготовьте подробный отчет об интеграции аутентификации и RBAC.

III. Настройка UI и встраивание
Цель: Встроить Rocket.Chat на сайт «БЕСЕДКИ» и настроить его пользовательский интерфейс в соответствии со стандартами UI «БЕСЕДКИ».

Предварительные условия: Развернутый экземпляр Rocket.Chat, документы «Стандарты UI БЕСЕДКА» и SSOT.

Шаги к выполнению:

Встраивание iframe: Встройте рабочее пространство Rocket.Chat в раздел «Чат» веб-сайта «БЕСЕДКА» с помощью iframe. Настройте аутентификацию iframe для использования существующего входа в «БЕСЕДКУ». См. [5, 37].

Темизация UI – Цветовая палитра: В настройках Rocket.Chat (Администрирование > Макет > Цвета) сопоставьте цвета «БЕСЕДКИ» из документа SSOT с настройками Major Colors и Minor Colors Rocket.Chat. См. [5, 6].

Темизация UI – Пользовательский CSS: Напишите и примените пользовательский CSS в настройках макета Rocket.Chat (Custom CSS) для переопределения стандартных стилей. Сосредоточьтесь на:

Перестилизации сообщений в современные чат-пузыри.

Настройке шрифтов и типографики.

Изменении стилей боковой панели, заголовка и полей ввода.

Используйте переменные темизации Rocket.Chat. См. [5, 6].

Пользовательский JavaScript (опционально): При необходимости реализуйте пользовательский JavaScript в разделе Custom Script for Logged In Users для специфических поведений UI. См. [5].

Проверка: Визуально осмотрите встроенный чат. Убедитесь, что дизайн соответствует стандартам UI «БЕСЕДКА» и является отзывчивым.

Отчет: Задокументируйте примененные настройки CSS/JS и предоставьте скриншоты нового внешнего вида.

IV. Управление приватными комнатами для админ-панели
Цель: Позволить владельцу «БЕСЕДКИ» создавать приватные чат-комнаты и управлять доступом к ним непосредственно из своей админ-панели.

Предварительные условия: Развернутый экземпляр Rocket.Chat, токены доступа API для бэкенда «БЕСЕДКИ».

Шаги к выполнению:

Генерация ключа API: Сгенерируйте ключ API для бэкенд-системы «БЕСЕДКИ» для безопасного взаимодействия с API Rocket.Chat. Убедитесь, что ключ имеет необходимые разрешения (create-p, add-user-to-any-p-room). См. [10, 28].

Интеграция API создания приватных комнат: Интегрируйте метод Realtime API createPrivateGroup в админ-панель «БЕСЕДКИ» для создания приватных чатов. См. [34].

Интеграция API приглашения пользователей: Интегрируйте REST API /api/v1/channels.invite в админ-панель «БЕСЕДКИ» для добавления/удаления пользователей из приватных комнат по их ID. См. [36].

Разработка UI админ-панели: Модифицируйте UI админ-панели «БЕСЕДКИ», чтобы включить:

Форму для создания новых приватных комнат.

Список существующих приватных комнат.

Функциональность для просмотра/добавления/удаления участников приватной комнаты.

Проверка: Проверьте функциональность создания приватных комнат из админ-панели, их создание в Rocket.Chat, а также корректность добавления/удаления пользователей и доступа.

Отчет: Предоставьте фрагменты кода для интеграции API и описание новых функций управления приватным чатом в админ-панели.

V. План обновления документации
Цель: Обновить ключевые проектные документы «БЕСЕДКИ» для отражения миграции Rocket.Chat, обеспечивая перекрестные ссылки и сохраняя документ о ролях/полномочиях.

Предварительные условия: Доступ ко всем файлам проектной документации «БЕСЕДКИ».

Шаги к выполнению:

Обновление Мастер-документации: Добавьте новый раздел об интеграции Rocket.Chat (архитектура Kubernetes/микросервисы, компоненты, поток данных, обзор безопасности, план масштабирования, точки интеграции). Удалите устаревшую информацию о старом чате.

Обновление Стандартов UI «БЕСЕДКА»: Добавьте подраздел для интерфейса чата, детализирующий стилизацию элементов UI Rocket.Chat (пузырьки сообщений, поля ввода, списки пользователей) с использованием пользовательских CSS и темизации Rocket.Chat для соответствия визуальным рекомендациям «БЕСЕДКИ». Включите примеры сопоставленных переменных цвета и типографики. См. [5, 6].

Обновление Единого источника истины (SSOT): Обновите SSOT, включив основные компоненты UI Rocket.Chat и их токены/переменные дизайна. Явно сопоставьте переменные темизации Rocket.Chat (например, primary-background-color) с определениями системы дизайна «БЕСЕДКИ». См. [6, 7].

Реализация перекрестных ссылок: Внедрите четкие перекрестные ссылки (гиперссылки или явные ссылки) между обновленной Мастер-документацией, Стандартами UI и SSOT.

Обработка документа о ролях и полномочиях: Подтвердите, что документ «БЕСЕДКИ» о ролях и полномочиях остается НЕИЗМЕННЫМ. Добавьте явные ссылки в обновленную Мастер-документацию на этот документ как на авторитетный источник логики доступа, объясняя, как RBAC Rocket.Chat настроен для его отражения.

Проверка и валидация: Проверьте все обновленные документы на точность, согласованность и полноту. Убедитесь, что устаревший контент удален или помечен.

Отчет: Предоставьте сводку всех изменений в документах.