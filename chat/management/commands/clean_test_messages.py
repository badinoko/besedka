import re
from django.core.management.base import BaseCommand
from django.db import transaction
from chat.models import Message

class Command(BaseCommand):
    help = '–û—á–∏—â–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "–¢–ï–°–¢" –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']

        self.stdout.write(
            self.style.SUCCESS('üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ "–¢–ï–°–¢"...')
        )

        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–¢–ï–°–¢"
        test_messages = Message.objects.filter(
            content__icontains='–¢–ï–°–¢',
            is_deleted=False
        ).select_related('author', 'room')

        if not test_messages.exists():
            self.stdout.write(
                self.style.WARNING('üì≠ –°–æ–æ–±—â–µ–Ω–∏—è —Å "–¢–ï–°–¢" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            )
            return

        self.stdout.write(
            self.style.WARNING(f'üìä –ù–∞–π–¥–µ–Ω–æ {test_messages.count()} —Å–æ–æ–±—â–µ–Ω–∏–π —Å "–¢–ï–°–¢"')
        )

        cleaned_count = 0

        for message in test_messages:
            original_content = message.content

            # –û—á–∏—â–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            cleaned_content = original_content

            # –£–±–∏—Ä–∞–µ–º "–¢–ï–°–¢" –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            patterns_to_remove = [
                r'^\s*–¢–ï–°–¢\s*$',  # –°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ "–¢–ï–°–¢"
                r'^\s*—Ç–µ—Å—Ç\s*$',  # –°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ "—Ç–µ—Å—Ç"
                r'^\s*Test\s*$',  # –°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ "Test"
                r'^\s*test\s*$',  # –°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ "test"
                r'\[–¢–ï–°–¢\]',      # –í –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                r'\[—Ç–µ—Å—Ç\]',
                r'\(–¢–ï–°–¢\)',      # –í –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                r'\(—Ç–µ—Å—Ç\)',
                r'–¢–ï–°–¢:\s*',      # –° –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                r'—Ç–µ—Å—Ç:\s*',
                r'^–¢–ï–°–¢\s+',      # –í –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–æ–º
                r'^—Ç–µ—Å—Ç\s+',
                r'\b–¢–ï–°–¢\b(?=\s|$)',  # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–µ–ª–æ–º
                r'\b—Ç–µ—Å—Ç\b(?=\s|$)',
            ]

            for pattern in patterns_to_remove:
                cleaned_content = re.sub(pattern, '', cleaned_content, flags=re.IGNORECASE)

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleaned_content = re.sub(r'\n\s*\n', '\n', cleaned_content)  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            cleaned_content = re.sub(r'^\s+', '', cleaned_content, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            cleaned_content = cleaned_content.strip()

            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
            if cleaned_content != original_content and cleaned_content:
                if dry_run:
                    self.stdout.write(
                        f'üìù [DRY RUN] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ {message.room.name}:'
                    )
                    self.stdout.write(f'   ‚ùå –ë—ã–ª–æ: "{original_content[:100]}..."')
                    self.stdout.write(f'   ‚úÖ –ë—É–¥–µ—Ç: "{cleaned_content[:100]}..."')
                    self.stdout.write('')
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message.content = cleaned_content
                    message.save()

                    self.stdout.write(
                        f'‚úÖ –û—á–∏—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –æ—Ç {message.author.display_name}'
                    )

                cleaned_count += 1

            elif not cleaned_content:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
                if dry_run:
                    self.stdout.write(
                        f'üóëÔ∏è [DRY RUN] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ (–ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)'
                    )
                else:
                    message.is_deleted = True
                    message.content = "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]"
                    message.save()

                    self.stdout.write(
                        f'üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ (–±—ã–ª–æ –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)'
                    )

                cleaned_count += 1

        if dry_run:
            self.stdout.write(
                self.style.WARNING(f'üìä [DRY RUN] –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cleaned_count} —Å–æ–æ–±—â–µ–Ω–∏–π')
            )
            self.stdout.write(
                self.style.SUCCESS('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cleaned_count} —Å–æ–æ–±—â–µ–Ω–∏–π!')
            )

            if cleaned_count > 0:
                self.stdout.write(
                    self.style.SUCCESS('üéâ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "–¢–ï–°–¢" —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!')
                )
