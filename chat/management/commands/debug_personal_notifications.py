from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from chat.models import Room, Message, UserChatPosition
from django.utils import timezone

User = get_user_model()

class Command(BaseCommand):
    help = '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'

    def add_arguments(self, parser):
        parser.add_argument('--room', type=str, default='general', help='–ò–º—è –∫–æ–º–Ω–∞—Ç—ã (general/vip)')
        parser.add_argument('--username', type=str, default='owner', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')

    def handle(self, *args, **options):
        room_name = options['room']
        username = options['username']

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–Ω–∞—Ç—É
            user = User.objects.get(username=username)
            room = Room.objects.get(name=room_name)
            position = UserChatPosition.objects.get(user=user, room=room)

            self.stdout.write(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
            self.stdout.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ({user.display_name})")
            self.stdout.write(f"–ö–æ–º–Ω–∞—Ç–∞: {room.name}")
            self.stdout.write(f"last_visit_at: {position.last_visit_at}")
            self.stdout.write(f"last_read_at: {position.last_read_at}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ last_visit_at
            if position.last_visit_at:
                messages_after_visit = Message.objects.filter(
                    room=room,
                    created_at__gt=position.last_visit_at,
                    is_deleted=False
                ).exclude(author=user).order_by('created_at')
            else:
                self.stdout.write("\n‚ùå last_visit_at –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return

            self.stdout.write(f"\n–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ last_visit_at: {messages_after_visit.count()}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            personal_count = 0
            for msg in messages_after_visit:
                is_personal = msg.is_personal_notification_for(user)
                is_reply = msg.parent and msg.parent.author == user
                is_mention = msg.mentions_user(user)

                self.stdout.write(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ #{msg.id}")
                self.stdout.write(f"  –ê–≤—Ç–æ—Ä: {msg.author.display_name}")
                self.stdout.write(f"  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {msg.content[:50]}...")
                self.stdout.write(f"  –Ø–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {is_reply}")
                self.stdout.write(f"  –£–ø–æ–º–∏–Ω–∞–µ—Ç –º–µ–Ω—è: {is_mention}")
                self.stdout.write(f"  –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {is_personal}")

                if is_personal:
                    personal_count += 1

            self.stdout.write(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            self.stdout.write(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–∏–∑–∏—Ç–∞: {messages_after_visit.count()}")
            self.stdout.write(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ—Å—á–∏—Ç–∞–Ω–æ): {personal_count}")
            self.stdout.write(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ): {position.personal_notifications_count}")
            self.stdout.write(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∞–∫—Ç—É–∞–ª—å–Ω–æ): {position.get_personal_notifications_count()}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É mentions_user –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
            self.stdout.write(f"\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –£–ü–û–ú–ò–ù–ê–ù–ò–ô:")
            self.stdout.write(f"–ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}:")
            self.stdout.write(f"  @{user.username}")
            self.stdout.write(f"  @{user.display_name}")
            if user.name:
                self.stdout.write(f"  @{user.name}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å @owner
            owner_mentions = Message.objects.filter(
                room=room,
                content__icontains='@owner',
                is_deleted=False
            ).order_by('-created_at')[:5]

            self.stdout.write(f"\nüìù –ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô –° @owner:")
            for msg in owner_mentions:
                mentions_me = msg.mentions_user(user)
                self.stdout.write(f"  '{msg.content}' - —É–ø–æ–º–∏–Ω–∞–µ—Ç –º–µ–Ω—è: {mentions_me}")

        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        except Room.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'–ö–æ–º–Ω–∞—Ç–∞ {room_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
        except UserChatPosition.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'–ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ –∫–æ–º–Ω–∞—Ç–µ {room_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}'))
