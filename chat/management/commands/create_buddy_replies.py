from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from chat.models import Room, Message
from django.utils import timezone
from datetime import timedelta
import random

User = get_user_model()

class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Buddy'

    def add_arguments(self, parser):
        parser.add_argument('--room', type=str, default='general', help='–ò–º—è –∫–æ–º–Ω–∞—Ç—ã (general/vip)')
        parser.add_argument('--count', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ')

    def handle(self, *args, **options):
        room_name = options['room']
        count = options['count']

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            buddy = User.objects.get(username='owner')  # Buddy = owner
            test_user = User.objects.get(username='test_user')
        except User.DoesNotExist:
            self.stdout.write(
                self.style.ERROR('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ owner –∏–ª–∏ test_user')
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room, created = Room.objects.get_or_create(name=room_name)

        # –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Buddy
        buddy_messages = Message.objects.filter(
            room=room,
            author=buddy,
            is_deleted=False
        ).order_by('created_at')

        if not buddy_messages.exists():
            self.stdout.write(
                self.style.ERROR('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Buddy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤')
            )
            return

        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ {buddy_messages.count()} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Buddy')

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Buddy
        created_replies = 0
        now = timezone.now()

        # –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
        reply_templates = [
            "–û—Ç–ª–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            "–°–æ–≥–ª–∞—Å–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é! –£ –º–µ–Ω—è —Ç–∞–∫–æ–π –∂–µ –æ–ø—ã—Ç.",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É—é –ø—Ä–∏–º–µ–Ω–∏—Ç—å.",
            "Buddy, –∞ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏?",
            "–≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —è –∏—Å–∫–∞–ª! –ë–ª–∞–≥–æ–¥–∞—Ä—é.",
            "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É—é.",
            "–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–∞–∫ –≤—Å–µ–≥–¥–∞!",
            "Buddy, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.",
            "–ö—Ä—É—Ç–æ! –ù–µ –∑–Ω–∞–ª –æ–± —ç—Ç–æ–º.",
            "–û—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞, —Å–ø–∞—Å–∏–±–æ!"
        ]

        for i, buddy_msg in enumerate(buddy_messages[:count]):
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç test_user –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Buddy
            reply_content = random.choice(reply_templates)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–æ—Ç 1 –¥–æ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
            reply_time = buddy_msg.created_at + timedelta(minutes=random.randint(1, 10))

            reply = Message.objects.create(
                room=room,
                author=test_user,
                content=reply_content,
                parent=buddy_msg,
                created_at=reply_time
            )

            created_replies += 1
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "{buddy_msg.content[:50]}..."')

        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ @Buddy
        mention_templates = [
            "@Buddy –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–º–µ–Ω–∞–º–∏?",
            "@Buddy –ú–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è?",
            "@Buddy –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–≤–µ—Ç—ã!",
            "@Buddy –ö–∞–∫ –¥—É–º–∞–µ—à—å, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≥–∏–¥—Ä–æ–ø–æ–Ω–∏–∫—É?",
            "@Buddy –¢–≤–æ–π —Å–æ–≤–µ—Ç –ø–æ –æ—Å–≤–µ—â–µ–Ω–∏—é –æ—á–µ–Ω—å –ø–æ–º–æ–≥!"
        ]

        mentions_created = 0
        for i, template in enumerate(mention_templates[:3]):  # –°–æ–∑–¥–∞–µ–º 3 —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            mention_time = now + timedelta(minutes=i * 2)

            mention = Message.objects.create(
                room=room,
                author=test_user,
                content=template,
                created_at=mention_time
            )

            mentions_created += 1
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "{template}"')

        self.stdout.write(
            self.style.SUCCESS(
                f'üéâ –°–æ–∑–¥–∞–Ω–æ {created_replies} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Buddy '
                f'–∏ {mentions_created} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —á–∞—Ç–µ {room_name}'
            )
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_messages = Message.objects.filter(room=room, is_deleted=False).count()
        replies_to_buddy = Message.objects.filter(
            room=room,
            parent__author=buddy,
            is_deleted=False
        ).count()
        mentions_of_buddy = Message.objects.filter(
            room=room,
            content__icontains='@Buddy',
            is_deleted=False
        ).count()

        self.stdout.write(f'\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–ê {room_name.upper()}:')
        self.stdout.write(f'‚îú‚îÄ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}')
        self.stdout.write(f'‚îú‚îÄ –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Buddy: {replies_to_buddy}')
        self.stdout.write(f'‚îî‚îÄ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π @Buddy: {mentions_of_buddy}')

        self.stdout.write(f'\nüéØ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:')
        self.stdout.write(f'1. –ó–∞–π–¥–∏—Ç–µ –≤ —á–∞—Ç –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Buddy')
        self.stdout.write(f'2. –î–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        self.stdout.write(f'3. –ö–ª–∏–∫ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º, —Ç—Ä–µ–±—É—é—â–∏–º –≤–Ω–∏–º–∞–Ω–∏—è')
