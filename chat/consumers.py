import json
import logging
from datetime import datetime
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.core.paginator import Paginator
from asgiref.sync import async_to_sync
from channels.generic.websocket import WebsocketConsumer
from channels.db import database_sync_to_async

from .models import Room, Message, Thread, DiscussionRoom, GlobalChatRoom, VIPChatRoom, ChatReaction

User = get_user_model()
logger = logging.getLogger(__name__)


class BaseChatConsumer(WebsocketConsumer):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç-–∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤"""

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        self.user = self.scope["user"]

        if not self.user.is_authenticated:
            self.close()
            return

        self.accept()
        logger.info(f"User {self.user.username} connected to chat")

    def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if hasattr(self, 'room_group_name'):
            async_to_sync(self.channel_layer.group_discard)(
                self.room_group_name,
                self.channel_name
            )
        logger.info(f"User {self.user.username} disconnected from chat")

    def receive(self, text_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            data = json.loads(text_data)
            message_type = data.get('type', 'message')

            if message_type == 'message':
                self.handle_message(data)
            elif message_type == 'typing':
                self.handle_typing(data)
            elif message_type == 'fetch_messages':
                self.handle_fetch_messages(data)
            elif message_type == 'fetch_online_users':
                self.handle_fetch_online_users(data)
            elif message_type == 'reaction':
                self.handle_reaction(data)

        except json.JSONDecodeError:
            logger.error(f"Invalid JSON received: {text_data}")
        except Exception as e:
            logger.error(f"Error processing message: {e}")

    def handle_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        content = data.get('message', '').strip()
        reply_to_id = data.get('reply_to_id')

        if not content:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self.create_message(content, reply_to_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': self.message_to_json(message)
            }
        )

    def handle_typing(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        is_typing = data.get('is_typing', False)

        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name,
            {
                'type': 'typing_indicator',
                'user': self.user.username,
                'is_typing': is_typing
            }
        )

    def handle_fetch_messages(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        page = data.get('page', 1)
        messages = self.get_messages(page)

        self.send(text_data=json.dumps({
            'type': 'messages_history',
            'messages': messages
        }))

    def handle_fetch_online_users(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        online_users = self.get_online_users()

        self.send(text_data=json.dumps({
            'type': 'online_users',
            'users': online_users,
            'count': len(online_users)
        }))

    def handle_reaction(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        reaction = data.get('reaction', '')
        message_id = data.get('message_id', '')

        if not reaction or not message_id:
            return

        try:
            from .models import ChatReaction  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

            message = get_object_or_404(Message, id=message_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            existing = ChatReaction.objects.filter(message=message, user=self.user).first()
            if existing:
                # –†–µ–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äë –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (—Ä–µ–∞–∫—Ü–∏–∏ –±–µ–∑–æ—Ç–∑—ã–≤–Ω—ã–µ)
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é (like / dislike)
            if reaction not in dict(ChatReaction.REACTION_CHOICES):
                return

            ChatReaction.objects.create(message=message, user=self.user, reaction_type=reaction)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            likes = message.likes_count()
            dislikes = message.dislikes_count()

            # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name,
                {
                    'type': 'reaction_update',
                    'message_id': message_id,
                    'likes': likes,
                    'dislikes': dislikes,
                }
            )
        except Exception as e:
            logger.error(f"Error handling reaction: {e}")

    def create_message(self, content, reply_to_id=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        raise NotImplementedError

    def get_messages(self, page=1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        raise NotImplementedError

    def get_online_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        return []

    def message_to_json(self, message):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON"""
        return {
            'id': message.id,
            'author': message.author.username,
            'author_name': message.author.display_name,
            'author_role': message.author.role if hasattr(message.author, 'role') else 'user',
            'author_role_icon': message.author.get_role_icon if hasattr(message.author, 'get_role_icon') else 'üë§',
            'author_display_name_with_icon': message.author.display_name_with_icon if hasattr(message.author, 'display_name_with_icon') else f"üë§ {message.author.display_name}",
            'content': message.content,
            'created': message.created.isoformat(),
            'is_own': message.author == self.user,
            'likes_count': message.likes_count(),
            'dislikes_count': message.dislikes_count(),
            'reply_to': {
                'id': message.reply_to.id,
                'author_name': message.reply_to.author.display_name if message.reply_to else None,
                'content_snippet': message.reply_to.content[:120] if message.reply_to else None,
            } if message.reply_to else None,
            'is_reply_to_me': bool(message.reply_to and message.reply_to.author == self.user),
        }

    def user_to_json(self, user):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON"""
        return {
            'id': user.id,
            'username': user.username,
            'display_name': user.display_name,
            'role': user.role if hasattr(user, 'role') else 'user',
            'role_icon': user.get_role_icon if hasattr(user, 'get_role_icon') else 'üë§',
            'display_name_with_icon': user.display_name_with_icon if hasattr(user, 'display_name_with_icon') else f"üë§ {user.display_name}",
            'is_staff': user.is_staff if hasattr(user, 'is_staff') else False,
            'is_superuser': user.is_superuser if hasattr(user, 'is_superuser') else False,
        }

    # WebSocket event handlers
    def chat_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        self.send(text_data=json.dumps({
            'type': 'new_message',
            'message': event['message']
        }))

    def typing_indicator(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        if event['user'] != self.user.username:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
            self.send(text_data=json.dumps({
                'type': 'typing',
                'user': event['user'],
                'is_typing': event['is_typing']
            }))

    def user_joined(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if event['user']['username'] != self.user.username:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
            self.send(text_data=json.dumps({
                'type': 'user_joined',
                'user': event['user']
            }))

    def user_left(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if event['user']['username'] != self.user.username:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
            self.send(text_data=json.dumps({
                'type': 'user_left',
                'user': event['user']
            }))

    def reaction_update(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–∫—Ü–∏–∏"""
        self.send(text_data=json.dumps({
            'type': 'reaction_update',
            'message_id': event['message_id'],
            'likes': event['likes'],
            'dislikes': event['dislikes'],
        }))


class GeneralChatConsumer(BaseChatConsumer):
    """–ö–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""

    def connect(self):
        super().connect()
        if self.user.is_authenticated:
            self.room_group_name = 'general_chat'

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ –æ–±—â–µ–≥–æ —á–∞—Ç–∞
            async_to_sync(self.channel_layer.group_add)(
                self.room_group_name,
                self.channel_name
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —á–∞—Ç
            self.global_chat = GlobalChatRoom.get_or_create_default()
            self.room = self.global_chat.room

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ
            self.room.connect(self.user)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name,
                {
                    'type': 'user_joined',
                    'user': self.user_to_json(self.user)
                }
            )

    def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""
        if hasattr(self, 'room') and self.room:
            self.room.disconnect(self.user)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hasattr(self, 'room_group_name'):
                async_to_sync(self.channel_layer.group_send)(
                    self.room_group_name,
                    {
                        'type': 'user_left',
                        'user': self.user_to_json(self.user)
                    }
                )

        super().disconnect(close_code)

    def create_message(self, content, reply_to_id=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ"""
        return Message.objects.create(
            author=self.user,
            room=self.room,
            content=content,
            reply_to_id=reply_to_id
        )

    def get_messages(self, page=1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""
        messages = Message.objects.filter(room=self.room).order_by('-created')
        paginator = Paginator(messages, 20)
        page_obj = paginator.get_page(page)

        return [self.message_to_json(msg) for msg in page_obj.object_list]

    def get_online_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""
        online_users = self.room.connected_clients.all()
        return [self.user_to_json(user) for user in online_users]


class PrivateChatConsumer(BaseChatConsumer):
    """–ö–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤"""

    def connect(self):
        super().connect()
        if self.user.is_authenticated:
            self.thread_id = self.scope['url_route']['kwargs']['thread_id']

            try:
                self.thread = get_object_or_404(Thread, id=self.thread_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if self.user not in [self.thread.user1, self.thread.user2]:
                    self.close()
                    return

                self.room = self.thread.room
                self.room_group_name = f'private_chat_{self.thread_id}'

                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                async_to_sync(self.channel_layer.group_add)(
                    self.room_group_name,
                    self.channel_name
                )

            except Thread.DoesNotExist:
                self.close()

    def create_message(self, content, reply_to_id=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
        return Message.objects.create(
            author=self.user,
            room=self.room,
            content=content,
            reply_to_id=reply_to_id
        )

    def get_messages(self, page=1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        messages = Message.objects.filter(room=self.room).order_by('-created')
        paginator = Paginator(messages, 20)
        page_obj = paginator.get_page(page)

        return [self.message_to_json(msg) for msg in page_obj.object_list]


class DiscussionChatConsumer(BaseChatConsumer):
    """–ö–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""

    def connect(self):
        self.discussion_id = self.scope['url_route']['kwargs']['discussion_id']

        super().connect()

        if self.user.is_authenticated:
            self.room_group_name = f'discussion_{self.discussion_id}'

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            async_to_sync(self.channel_layer.group_add)(
                self.room_group_name,
                self.channel_name
            )

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            try:
                self.discussion_room = DiscussionRoom.objects.get(id=self.discussion_id)
                self.room = self.discussion_room.room

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ
                self.room.connect(self.user)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async_to_sync(self.channel_layer.group_send)(
                    self.room_group_name,
                    {
                        'type': 'user_joined',
                        'user': self.user_to_json(self.user)
                    }
                )
            except DiscussionRoom.DoesNotExist:
                self.close()

    def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        if hasattr(self, 'room') and self.room:
            self.room.disconnect(self.user)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hasattr(self, 'room_group_name'):
                async_to_sync(self.channel_layer.group_send)(
                    self.room_group_name,
                    {
                        'type': 'user_left',
                        'user': self.user_to_json(self.user)
                    }
                )

        super().disconnect(close_code)

    def create_message(self, content, reply_to_id=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        return Message.objects.create(
            author=self.user,
            room=self.room,
            content=content,
            reply_to_id=reply_to_id
        )

    def get_messages(self, page=1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        messages = Message.objects.filter(room=self.room).order_by('-created')
        paginator = Paginator(messages, 20)
        page_obj = paginator.get_page(page)

        return [self.message_to_json(msg) for msg in page_obj.object_list]

    def get_online_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        online_users = self.room.connected_clients.all()
        return [self.user_to_json(user) for user in online_users]


class VIPChatConsumer(BaseChatConsumer):
    """–ö–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è VIP —á–∞—Ç–∞"""

    def connect(self):
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ self.user
        super().connect()

        if not self.user.is_authenticated:
            self.close()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ VIP —á–∞—Ç—É
        # (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP —Å—Ç–∞—Ç—É—Å–∞)

        self.room_group_name = 'vip_chat'

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ VIP —á–∞—Ç–∞
        async_to_sync(self.channel_layer.group_add)(
            self.room_group_name,
            self.channel_name
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º VIP —á–∞—Ç
        self.vip_chat = VIPChatRoom.get_or_create_default(created_by=self.user)
        self.room = self.vip_chat.room

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        self.room.connect(self.user)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name,
            {
                'type': 'user_joined',
                'user': self.user_to_json(self.user)
            }
        )

    def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VIP —á–∞—Ç–∞"""
        if hasattr(self, 'room') and self.room:
            self.room.disconnect(self.user)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hasattr(self, 'room_group_name'):
                async_to_sync(self.channel_layer.group_send)(
                    self.room_group_name,
                    {
                        'type': 'user_left',
                        'user': self.user_to_json(self.user)
                    }
                )

        super().disconnect(close_code)

    def create_message(self, content, reply_to_id=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ VIP —á–∞—Ç–µ"""
        return Message.objects.create(
            author=self.user,
            room=self.room,
            content=content,
            reply_to_id=reply_to_id
        )

    def get_messages(self, page=1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π VIP —á–∞—Ç–∞"""
        messages = Message.objects.filter(room=self.room).order_by('-created')
        paginator = Paginator(messages, 20)
        page_obj = paginator.get_page(page)

        return [self.message_to_json(msg) for msg in page_obj.object_list]

    def get_online_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π VIP —á–∞—Ç–∞"""
        online_users = self.room.connected_clients.all()
        return [self.user_to_json(user) for user in online_users]
