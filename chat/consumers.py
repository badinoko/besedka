import json
import logging
from datetime import datetime
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.core.paginator import Paginator
from asgiref.sync import async_to_sync
from channels.generic.websocket import WebsocketConsumer, AsyncWebsocketConsumer
from channels.db import database_sync_to_async

from .models import Room, Message

User = get_user_model()
logger = logging.getLogger(__name__)


class BaseChatConsumer(WebsocketConsumer):
    """–ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∞—Ç–∞ "–ë–µ—Å–µ–¥–∫–∞" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤"""

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        self.room_name = self.scope["url_route"]["kwargs"]["room_name"]
        self.room_group_name = f"chat_{self.room_name}"
        self.user = self.scope["user"]

        if not self.user.is_authenticated:
            self.close()
            return

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ –∫–æ–º–Ω–∞—Ç—ã
        async_to_sync(self.channel_layer.group_add)(
            self.room_group_name, self.channel_name
        )

        self.accept()
        logger.info(f"User {self.user.username} connected to room {self.room_name}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name, {
                "type": "user_joined",
                "user": self.user_to_json(self.user)
            }
        )

    def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if hasattr(self, 'room_group_name'):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "user_left",
                    "user": self.user_to_json(self.user)
                }
            )

            async_to_sync(self.channel_layer.group_discard)(
                self.room_group_name, self.channel_name
            )
        logger.info(f"User {self.user.username} disconnected from room {self.room_name}")

    def receive(self, text_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
        try:
            data = json.loads(text_data)
            message_type = data.get('type', 'message')

            if message_type == 'message':
                self.handle_chat_message(data)
            elif message_type == 'fetch_messages':
                self.send_message_history(data.get('page', 1))
            elif message_type == 'fetch_online_users':
                self.send_online_users()
            elif message_type == 'typing':
                self.handle_typing(data)
            elif message_type == 'reaction':
                self.handle_reaction(data)
            elif message_type == 'edit_message':
                self.handle_edit_message(data)
            elif message_type == 'delete_message':
                self.handle_delete_message(data)
            elif message_type == 'forward_message':
                self.handle_forward_message(data)
            elif message_type == 'pin_message':
                self.handle_pin_message(data)
            elif message_type == 'unpin_message':
                self.handle_unpin_message(data)
            else:
                logger.warning(f"Unknown message type: {message_type}")

        except json.JSONDecodeError:
            logger.error(f"Invalid JSON received: {text_data}")
        except Exception as e:
            logger.error(f"Error processing message: {e}")

    def handle_chat_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
        content = data.get('message', '').strip()
        reply_to_id = data.get('reply_to_id')

        if not content:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room, created = Room.objects.get_or_create(name=self.room_name)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        parent_message = None
        if reply_to_id:
            try:
                parent_message = Message.objects.get(id=reply_to_id, room=room)
            except Message.DoesNotExist:
                logger.warning(f"Reply target message {reply_to_id} not found")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message.objects.create(
            room=room,
            author=self.user,
            content=content,
            parent=parent_message
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name, {
                "type": "new_message",
                "message": self.message_to_json(message)
            }
        )

    def send_message_history(self, page=1):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            room, created = Room.objects.get_or_create(name=self.room_name)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π —Å related –¥–∞–Ω–Ω—ã–º–∏ (–ò–°–ö–õ–Æ–ß–ê–ï–ú –£–î–ê–õ–ï–ù–ù–´–ï!)
            messages = Message.objects.filter(room=room, is_deleted=False).select_related(
                'author', 'parent', 'parent__author'
            ).order_by('-created_at')[:50]

            # –û–±—Ä–∞—â–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            messages_data = [
                self.message_to_json(msg, is_history=True)
                for msg in reversed(messages)
            ]

            self.send(text_data=json.dumps({
                "type": "messages_history",
                "messages": messages_data
            }))

        except Exception as e:
            logger.error(f"Error sending message history: {e}")

    def send_online_users(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å Redis
        online_users = [
            self.user_to_json(self.user)
        ]

        self.send(text_data=json.dumps({
            "type": "online_users",
            "users": online_users,
            "count": len(online_users)
        }))

    def handle_typing(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        is_typing = data.get('is_typing', False)

        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name, {
                "type": "typing_indicator",
                "user": self.user.username,
                "is_typing": is_typing
            }
        )

    def handle_reaction(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–π –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
        message_id = data.get('message_id')
        reaction = data.get('reaction')
        logger.info(f"Reaction {reaction} on message {message_id} by {self.user.username}")

    def handle_edit_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')
        new_content = data.get('new_content', '').strip()

        if not message_id or not new_content:
            self.send_error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
            can_edit = self.can_edit_message(message)
            if not can_edit:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            original_content = message.content

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.content = new_content
            message.is_edited = True
            message.edited_by = self.user
            message.edited_at = timezone.now()
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_edited",
                    "message": self.message_to_json(message),
                    "editor": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} edited by {self.user.username}. " +
                       f"Original: '{original_content[:50]}...' -> New: '{new_content[:50]}...'")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error editing message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_delete_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
            can_delete = self.can_delete_message(message)
            if not can_delete:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message.is_deleted = True
            message.content = "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]"
            message.edited_by = self.user
            message.edited_at = timezone.now()
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_deleted",
                    "message_id": str(message_id),
                    "deleted_by": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} deleted by {self.user.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error deleting message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_forward_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        message_id = data.get('message_id')
        target_room = data.get('target_room', self.room_name)
        custom_message = data.get('custom_message', '').strip()

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            source_room, _ = Room.objects.get_or_create(name=self.room_name)
            original_message = Message.objects.get(id=message_id, room=source_room, is_deleted=False)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            target_room_obj, _ = Room.objects.get_or_create(name=target_room)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∞–≤—Ç–æ—Ä–∞
            clean_content = self.extract_clean_content(original_message.content)
            original_author = self.extract_original_author(original_message.content, original_message.author.display_name)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if self.room_name == "general":
                source_room_display = "–ë–µ—Å–µ–¥–∫–∞"
            elif self.room_name == "vip":
                source_room_display = "–ë–µ—Å–µ–¥–∫–∞ - VIP"
            elif self.room_name == "moderators":
                source_room_display = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã"
            else:
                # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–Ω–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                source_room_display = f"–ß–∞—Ç ¬´{self.room_name.title()}¬ª"

            # üí¨ –°–û–ó–î–ê–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–ï–†–ï–°–´–õ–ö–ï
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            original_author_with_icon = f"{original_message.author.get_role_icon} {original_message.author.display_name}"

            if custom_message:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ü–∏—Ç–∞—Ç–æ–π
                forwarded_content = f"""{custom_message}

üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ ¬´{source_room_display}¬ª ‚Ä¢ {self.user.get_role_icon} {self.user.display_name}
{original_author_with_icon}
{clean_content}"""
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                forwarded_content = f"""üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ ¬´{source_room_display}¬ª ‚Ä¢ {self.user.get_role_icon} {self.user.display_name}
{original_author_with_icon}
{clean_content}"""

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_message = Message.objects.create(
                room=target_room_obj,
                author=self.user,
                content=forwarded_content,
                is_forwarded=True,
                original_message_id=str(message_id)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –¶–ï–õ–ï–í–û–ì–û –ß–ê–¢–ê
            target_group_name = f"chat_{target_room}"
            async_to_sync(self.channel_layer.group_send)(
                target_group_name, {
                    "type": "message_forwarded",
                    "message": self.message_to_json(forwarded_message),
                    "forwarder": self.user_to_json(self.user)
                }
            )

            if custom_message:
                logger.info(f"Message {message_id} forwarded by {self.user.username} to {target_room} with custom message")
            else:
                logger.info(f"Message {message_id} forwarded by {self.user.username} to {target_room}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error forwarding message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_pin_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –ù–ê –ó–ê–ö–†–ï–ü–õ–ï–ù–ò–ï
            can_pin = self.can_pin_message(message)
            if not can_pin:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return

            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.is_pinned = True
            message.pinned_by = self.user
            message.pinned_at = timezone.now()
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_pinned",
                    "message_id": str(message_id),
                    "pinner": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} pinned by {self.user.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error pinning message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_unpin_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –ù–ê –û–¢–ö–†–ï–ü–õ–ï–ù–ò–ï
            can_pin = self.can_pin_message(message)
            if not can_pin:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return

            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.is_pinned = False
            message.pinned_by = None
            message.pinned_at = None
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_unpinned",
                    "message_id": str(message_id),
                    "unpinner": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} unpinned by {self.user.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error unpinning message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def can_edit_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_role = self.user.role
        message_author_role = message.author.role

        # üëë Owner –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_role == 'owner':
            return True
        # üé≠ Moderator/Admin –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ö–†–û–ú–ï owner
        elif user_role in ['moderator', 'admin']:
            return message_author_role != 'owner'
        # üë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            return message.author == self.user

    def can_delete_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_role = self.user.role
        message_author_role = message.author.role

        # üëë Owner –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_role == 'owner':
            return True
        # üé≠ Moderator/Admin –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –ö–†–û–ú–ï owner
        elif user_role in ['moderator', 'admin']:
            return message_author_role != 'owner'
        # üë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            return message.author == self.user

    def can_pin_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_role = self.user.role

        # üëë Owner –∏ üé≠ Moderator/Admin –º–æ–≥—É—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_role in ['owner', 'moderator', 'admin']:
            return True
        # üë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å
        else:
            return False

    def extract_clean_content(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        lines = content.strip().split('\n')

        if len(lines) < 3:
            return content

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ—Ä–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å emoji –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è)
        for i, line in enumerate(lines):
            if i > 0 and line.strip() and not line.startswith('–ü–µ—Ä–µ—Å–ª–∞–Ω–æ') and not line.startswith('üì§'):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∞
                return '\n'.join(lines[i+1:]).strip()

        return content

    def extract_original_author(self, content, fallback_author):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        lines = content.strip().split('\n')

        if len(lines) < 2:
            return fallback_author

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ—Ä–æ–º (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        for i, line in enumerate(lines):
            if i > 0 and line.strip() and not line.startswith('–ü–µ—Ä–µ—Å–ª–∞–Ω–æ') and not line.startswith('üì§'):
                return line.strip()

        return fallback_author

    def send_error(self, error_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–ª–∏–µ–Ω—Ç—É"""
        self.send(text_data=json.dumps({
            "type": "error",
            "message": error_message
        }))

    def message_to_json(self, message, is_history=False):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
        reply_data = None
        if message.parent:
            reply_data = {
                'id': str(message.parent.id),
                'author_name': message.parent.author.display_name,
                'author_role_icon': message.parent.author.get_role_icon,
                'content_snippet': message.parent.content[:100] + ('...' if len(message.parent.content) > 100 else '')
            }

        return {
            'id': str(message.id),
            'content': message.content,
            'author_name': message.author.display_name,
            'author_role': message.author.role,
            'author_role_icon': message.author.get_role_icon,
            'created': message.created_at.isoformat(),
            'is_own': message.author == self.user,
            'reply_to': reply_data,
            'is_reply_to_me': bool(message.parent and message.parent.author == self.user),
            'likes_count': 0,  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
            'dislikes_count': 0,  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
            'is_edited': message.is_edited,
            'edited_by': message.edited_by.display_name if message.edited_by else None,
            'edited_by_role': message.edited_by.role if message.edited_by else None,
            'edited_at': message.edited_at.isoformat() if message.edited_at else None,
            'is_pinned': message.is_pinned,
            'pinned_by': message.pinned_by.display_name if message.pinned_by else None,
            'pinned_at': message.pinned_at.isoformat() if message.pinned_at else None,
            'is_forwarded': getattr(message, 'is_forwarded', False),
            'original_message_id': getattr(message, 'original_message_id', None),
        }

    def user_to_json(self, user):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON"""
        return {
            'username': user.username,
            'display_name': user.display_name,
            'role': user.role,
            'role_icon': user.get_role_icon,
        }

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã
    def new_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        self.send(text_data=json.dumps({
            "type": "new_message",
            "message": event["message"]
        }))

    def user_joined(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.send(text_data=json.dumps({
            "type": "user_joined",
            "user": event["user"]
        }))

    def user_left(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.send(text_data=json.dumps({
            "type": "user_left",
            "user": event["user"]
        }))

    def typing_indicator(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
        if event["user"] != self.user.username:
            self.send(text_data=json.dumps({
                "type": "typing",
                "user": event["user"],
                "is_typing": event["is_typing"]
            }))

    def message_edited(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_edited",
            "message": event["message"],
            "editor": event["editor"]
        }))

    def message_deleted(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_deleted",
            "message_id": event["message_id"],
            "deleted_by": event["deleted_by"]
        }))

    def message_forwarded(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_forwarded",
            "message": event["message"],
            "forwarder": event["forwarder"]
        }))

    def message_pinned(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_pinned",
            "message_id": event["message_id"],
            "pinner": event["pinner"]
        }))

    def message_unpinned(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_unpinned",
            "message_id": event["message_id"],
            "unpinner": event["unpinner"]
        }))


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class ChatConsumer(BaseChatConsumer):
    """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    pass
