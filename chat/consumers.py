import json
import logging
from datetime import datetime
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.core.paginator import Paginator
from asgiref.sync import async_to_sync
from channels.generic.websocket import WebsocketConsumer, AsyncWebsocketConsumer
from channels.db import database_sync_to_async

from .models import Room, Message, UserChatPosition

User = get_user_model()
logger = logging.getLogger(__name__)


class BaseChatConsumer(WebsocketConsumer):
    """–ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–∞—Ç–∞ "–ë–µ—Å–µ–¥–∫–∞" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤"""

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        self.room_name = self.scope["url_route"]["kwargs"]["room_name"]
        self.room_group_name = f"chat_{self.room_name}"
        self.user = self.scope["user"]

        if self.user.is_anonymous:
            self.close()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —á–∞—Ç–∞
        async_to_sync(self.channel_layer.group_add)(
            self.room_group_name,
            self.channel_name
        )

        self.accept()

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        room, _ = Room.objects.get_or_create(name=self.room_name)
        position = UserChatPosition.get_or_create_for_user(self.user, room)

        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        # –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ unread_info, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition
        if not position.last_read_at:
            position.mark_as_read()  # –û—Ç–º–µ—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            logger.info(f"First visit: marked all existing messages as read for {self.user.username} in {self.room_name}")
            # –û–±–Ω–æ–≤–ª—è–µ–º position –ø–æ—Å–ª–µ mark_as_read
            position.refresh_from_db()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (—É–∂–µ –ø–æ—Å–ª–µ mark_as_read)
        self.send_unread_info(position)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name, {
                "type": "user_joined",
                "user": self.user_to_json(self.user)
            }
        )

        logger.info(f"User {self.user.username} connected to chat {self.room_name}")

    def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket"""
        if hasattr(self, 'room_group_name'):
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "user_left",
                    "user": self.user_to_json(self.user)
                }
            )

            async_to_sync(self.channel_layer.group_discard)(
                self.room_group_name, self.channel_name
            )
        logger.info(f"User {self.user.username} disconnected from room {self.room_name}")

    def receive(self, text_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
        try:
            data = json.loads(text_data)
            message_type = data.get('type', 'message')

            if message_type == 'message':
                self.handle_chat_message(data)
            elif message_type == 'fetch_messages':
                self.send_message_history(data.get('page', 1))
            elif message_type == 'fetch_online_users':
                self.send_online_users()
            elif message_type == 'typing':
                self.handle_typing(data)
            elif message_type == 'reaction':
                self.handle_reaction(data)
            elif message_type == 'edit_message':
                self.handle_edit_message(data)
            elif message_type == 'delete_message':
                self.handle_delete_message(data)
            elif message_type == 'forward_message':
                self.handle_forward_message(data)
            elif message_type == 'pin_message':
                self.handle_pin_message(data)
            elif message_type == 'unpin_message':
                self.handle_unpin_message(data)
            elif message_type == 'mark_as_read':
                self.handle_mark_as_read(data)
            elif message_type == 'load_more_messages':
                self.handle_load_more_messages(data)
            else:
                logger.warning(f"Unknown message type: {message_type}")

        except json.JSONDecodeError:
            logger.error(f"Invalid JSON received: {text_data}")
        except Exception as e:
            logger.error(f"Error processing message: {e}")

    def handle_chat_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
        content = data.get('message', '').strip()
        reply_to_id = data.get('reply_to_id')

        if not content:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room, created = Room.objects.get_or_create(name=self.room_name)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        parent_message = None
        if reply_to_id:
            try:
                parent_message = Message.objects.get(id=reply_to_id, room=room)
            except Message.DoesNotExist:
                logger.warning(f"Reply target message {reply_to_id} not found")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message.objects.create(
            room=room,
            author=self.user,
            content=content,
            parent=parent_message
        )

        # üö´ –£–î–ê–õ–ï–ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–í–¢–û–û–¢–ú–ï–¢–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –°–û–û–ë–©–ï–ù–ò–Ø
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—á—Ç–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞!

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name, {
                "type": "new_message",
                "message": self.message_to_json(message)
            }
        )

    def send_message_history(self, page=1):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            room, created = Room.objects.get_or_create(name=self.room_name)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            user_position = UserChatPosition.get_or_create_for_user(self.user, room)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π —Å related –¥–∞–Ω–Ω—ã–º–∏ (–ò–°–ö–õ–Æ–ß–ê–ï–ú –£–î–ê–õ–ï–ù–ù–´–ï!)
            messages = Message.objects.filter(room=room, is_deleted=False).select_related(
                'author', 'parent', 'parent__author'
            ).order_by('-created_at')[:100]

            # –û–±—Ä–∞—â–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            messages_data = []
            for msg in reversed(messages):
                message_json = self.message_to_json(msg, is_history=True)

                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏
                if user_position.last_read_at:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ—Å–µ—â–∞–ª —á–∞—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å last_read_at
                    message_json['is_read'] = msg.created_at <= user_position.last_read_at
                else:
                    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
                    # (—ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ connect(), –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    message_json['is_read'] = True

                messages_data.append(message_json)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            self.send(text_data=json.dumps({
                "type": "messages_history",
                "messages": messages_data
            }))

        except Exception as e:
            logger.error(f"Error sending message history: {e}")

    def send_online_users(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º"""
        from django.contrib.auth import get_user_model
        User = get_user_model()

        # üë• –ü–û–î–°–ß–ï–¢ –û–ë–©–ï–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –î–û–°–¢–£–ü–û–ú –ö –ß–ê–¢–£
        if self.room_name == 'vip':
            # VIP —á–∞—Ç - —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
            total_users_count = User.objects.filter(
                role__in=['owner', 'store_owner', 'store_admin']
            ).count()
        elif self.room_name == 'moderators':
            # –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã
            total_users_count = User.objects.filter(
                role__in=['owner', 'moderator']
            ).count()
        else:
            # –û–±—â–∏–π —á–∞—Ç - –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            total_users_count = User.objects.filter(is_active=True).count()

        # üîç –í–†–ï–ú–ï–ù–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –û–ù–õ–ê–ô–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        # TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É
        online_users = [
            self.user_to_json(self.user)
        ]

        self.send(text_data=json.dumps({
            "type": "online_users",
            "users": online_users,
            "count": len(online_users),
            "total_count": total_users_count  # üìä –ù–û–í–û–ï –ü–û–õ–ï - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –¥–æ—Å—Ç—É–ø–æ–º
        }))

    def handle_typing(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        is_typing = data.get('is_typing', False)

        async_to_sync(self.channel_layer.group_send)(
            self.room_group_name, {
                "type": "typing_indicator",
                "user": self.user.username,
                "is_typing": is_typing
            }
        )

    def handle_reaction(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        message_id = data.get('message_id')
        reaction_type = data.get('reaction')  # 'like' –∏–ª–∏ 'dislike'

        if not message_id or not reaction_type:
            self.send_error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏")
            return

        if reaction_type not in ['like', 'dislike']:
            self.send_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.author == self.user:
                self.send_error("–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Ä–µ–∞–∫—Ü–∏–π
            from .models import MessageReaction

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_reaction = MessageReaction.objects.filter(
                message=message,
                user=self.user
            ).first()

            if existing_reaction:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
                self.send_error("–í—ã —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
            new_reaction = MessageReaction.objects.create(
                message=message,
                user=self.user,
                reaction_type=reaction_type
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
            likes_count = message.likes_count
            dislikes_count = message.dislikes_count

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "reaction_updated",
                    "message_id": str(message_id),
                    "likes_count": likes_count,
                    "dislikes_count": dislikes_count,
                    "user": self.user_to_json(self.user),
                    "reaction_type": reaction_type
                }
            )

            logger.info(f"NEW REACTION: {self.user.username} {reaction_type}d message {message_id} by {message.author.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error processing reaction {reaction_type} on message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏")

    def handle_edit_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')
        new_content = data.get('new_content', '').strip()

        if not message_id or not new_content:
            self.send_error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
            can_edit = self.can_edit_message(message)
            if not can_edit:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            original_content = message.content

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.content = new_content
            message.is_edited = True
            message.edited_by = self.user
            message.edited_at = timezone.now()
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_edited",
                    "message": self.message_to_json(message),
                    "editor": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} edited by {self.user.username}. " +
                       f"Original: '{original_content[:50]}...' -> New: '{new_content[:50]}...'")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error editing message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_delete_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
            can_delete = self.can_delete_message(message)
            if not can_delete:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

            # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message.is_deleted = True
            message.content = "[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]"
            message.edited_by = self.user
            message.edited_at = timezone.now()
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_deleted",
                    "message_id": str(message_id),
                    "deleted_by": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} deleted by {self.user.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error deleting message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_forward_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        message_id = data.get('message_id')
        target_room = data.get('target_room', self.room_name)
        custom_message = data.get('custom_message', '').strip()

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            source_room, _ = Room.objects.get_or_create(name=self.room_name)
            original_message = Message.objects.get(id=message_id, room=source_room, is_deleted=False)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            target_room_obj, _ = Room.objects.get_or_create(name=target_room)

            # üéØ –ö–ê–°–ö–ê–î–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–ï–†–ï–°–´–õ–ö–ò: –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
            if original_message.is_forwarded:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —É–∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                clean_content = self.extract_clean_content(original_message.content)
                # –ê–≤—Ç–æ—Ä –≠–¢–û–ì–û –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–ª), –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                original_author_with_icon = f"{original_message.author.get_role_icon} {original_message.author.display_name}"
            else:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –±–µ—Ä–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –µ—Å—Ç—å
                clean_content = original_message.content
                original_author_with_icon = f"{original_message.author.get_role_icon} {original_message.author.display_name}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if self.room_name == "general":
                source_room_display = "–ë–µ—Å–µ–¥–∫–∞"
            elif self.room_name == "vip":
                source_room_display = "–ë–µ—Å–µ–¥–∫–∞ - VIP"
            elif self.room_name == "moderators":
                source_room_display = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã"
            else:
                # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–Ω–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                source_room_display = f"–ß–∞—Ç ¬´{self.room_name.title()}¬ª"

            # üí¨ –°–û–ó–î–ê–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ù–ê–õ–ò–ß–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
            if custom_message:
                # üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ
                forwarded_content = f"""{custom_message}

üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ ¬´{source_room_display}¬ª ‚Ä¢ {original_author_with_icon}
{original_author_with_icon}
{clean_content}"""
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                forwarded_content = f"""üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ ¬´{source_room_display}¬ª ‚Ä¢ {original_author_with_icon}
{original_author_with_icon}
{clean_content}"""

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_message = Message.objects.create(
                room=target_room_obj,
                author=self.user,
                content=forwarded_content,
                is_forwarded=True,
                original_message_id=str(message_id)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –¶–ï–õ–ï–í–û–ì–û –ß–ê–¢–ê
            target_group_name = f"chat_{target_room}"
            async_to_sync(self.channel_layer.group_send)(
                target_group_name, {
                    "type": "message_forwarded",
                    "message": self.message_to_json(forwarded_message),
                    "forwarder": self.user_to_json(self.user)
                }
            )

            if custom_message:
                logger.info(f"Message {message_id} forwarded by {self.user.username} to {target_room} with custom message")
            else:
                logger.info(f"Message {message_id} forwarded by {self.user.username} to {target_room}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error forwarding message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_pin_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –ù–ê –ó–ê–ö–†–ï–ü–õ–ï–ù–ò–ï
            can_pin = self.can_pin_message(message)
            if not can_pin:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return

            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.is_pinned = True
            message.pinned_by = self.user
            message.pinned_at = timezone.now()
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_pinned",
                    "message_id": str(message_id),
                    "pinner": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} pinned by {self.user.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error pinning message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_unpin_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        message_id = data.get('message_id')

        if not message_id:
            self.send_error("ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            room, _ = Room.objects.get_or_create(name=self.room_name)
            message = Message.objects.get(id=message_id, room=room, is_deleted=False)

            # üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –ù–ê –û–¢–ö–†–ï–ü–õ–ï–ù–ò–ï
            can_pin = self.can_pin_message(message)
            if not can_pin:
                self.send_error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
                return

            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message.is_pinned = False
            message.pinned_by = None
            message.pinned_at = None
            message.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ
            async_to_sync(self.channel_layer.group_send)(
                self.room_group_name, {
                    "type": "message_unpinned",
                    "message_id": str(message_id),
                    "unpinner": self.user_to_json(self.user)
                }
            )

            logger.info(f"Message {message_id} unpinned by {self.user.username}")

        except Message.DoesNotExist:
            self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"Error unpinning message {message_id}: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def handle_mark_as_read(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
        message_id = data.get('message_id')
        up_to_time = data.get('up_to_time')

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            room, _ = Room.objects.get_or_create(name=self.room_name)
            position = UserChatPosition.get_or_create_for_user(self.user, room)

            if message_id:
                # –û—Ç–º–µ—á–∞–µ–º –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    message = Message.objects.get(id=message_id, room=room, is_deleted=False)
                    position.mark_as_read(up_to_message=message)
                    logger.info(f"User {self.user.username} marked messages as read up to {message_id}")
                except Message.DoesNotExist:
                    self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
            elif up_to_time:
                # –û—Ç–º–µ—á–∞–µ–º –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                position.mark_as_read(up_to_time=timezone.datetime.fromisoformat(up_to_time))
                logger.info(f"User {self.user.username} marked messages as read up to {up_to_time}")
            else:
                # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                position.mark_as_read()
                logger.info(f"User {self.user.username} marked all messages as read in {self.room_name}")

            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            position.unread_count = position.get_unread_messages_count()
            position.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            self.send_unread_info(position)

        except Exception as e:
            logger.error(f"Error marking messages as read: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö")

    def get_user_position(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ"""
        try:
            room, _ = Room.objects.get_or_create(name=self.room_name)
            return UserChatPosition.get_or_create_for_user(self.user, room)
        except Exception as e:
            logger.error(f"Error getting user position: {e}")
            return None

    def send_unread_info(self, position):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô —Å—á–µ—Ç—á–∏–∫, –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π!
            actual_unread_count = position.get_unread_messages_count()
            first_unread = position.get_first_unread_message()

            self.send(text_data=json.dumps({
                "type": "unread_info",
                "unread_count": actual_unread_count,  # ‚ö° –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ô –°–ß–ï–¢–ß–ò–ö
                "first_unread_message_id": str(first_unread.id) if first_unread else None,
                "last_read_at": position.last_read_at.isoformat() if position.last_read_at else None,
                # üêõ DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                "debug_cached_count": position.unread_count,
                "debug_actual_count": actual_unread_count
            }))

            # üîß –û–ë–ù–û–í–õ–Ø–ï–ú –ö–ï–®–ò–†–û–í–ê–ù–ù–´–ô –°–ß–ï–¢–ß–ò–ö –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
            if position.unread_count != actual_unread_count:
                position.unread_count = actual_unread_count
                position.save()
                logger.info(f"Updated cached unread_count for {self.user.username} in {self.room_name}: {actual_unread_count}")

        except Exception as e:
            logger.error(f"Error sending unread info: {e}")

    def handle_load_more_messages(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)"""
        before_message_id = data.get('before_message_id')

        try:
            room, _ = Room.objects.get_or_create(name=self.room_name)

            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if before_message_id:
                try:
                    before_message = Message.objects.get(id=before_message_id, room=room, is_deleted=False)
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º 50 —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
                    messages = Message.objects.filter(
                        room=room,
                        is_deleted=False,
                        created_at__lt=before_message.created_at
                    ).select_related(
                        'author', 'parent', 'parent__author'
                    ).order_by('-created_at')[:50]
                except Message.DoesNotExist:
                    self.send_error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = Message.objects.filter(
                    room=room,
                    is_deleted=False
                ).select_related(
                    'author', 'parent', 'parent__author'
                ).order_by('created_at')[:50]

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON (–≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ)
            messages_data = []
            for msg in reversed(messages) if before_message_id else messages:
                message_json = self.message_to_json(msg, is_history=True)
                messages_data.append(message_json)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.send(text_data=json.dumps({
                "type": "more_messages",
                "messages": messages_data,
                "has_more": len(messages) == 50,  # –ï—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                "before_message_id": before_message_id
            }))

            logger.info(f"Loaded {len(messages_data)} more messages for {self.user.username} in {self.room_name}")

        except Exception as e:
            logger.error(f"Error loading more messages: {e}")
            self.send_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

    def can_edit_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_role = self.user.role
        message_author_role = message.author.role

        # üëë Owner –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_role == 'owner':
            return True
        # üé≠ Moderator/Admin –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ö–†–û–ú–ï owner
        elif user_role in ['moderator', 'admin']:
            return message_author_role != 'owner'
        # üë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            return message.author == self.user

    def can_delete_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_role = self.user.role
        message_author_role = message.author.role

        # üëë Owner –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_role == 'owner':
            return True
        # üé≠ Moderator/Admin –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –ö–†–û–ú–ï owner
        elif user_role in ['moderator', 'admin']:
            return message_author_role != 'owner'
        # üë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            return message.author == self.user

    def can_pin_message(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_role = self.user.role

        # üëë Owner –∏ üé≠ Moderator/Admin –º–æ–≥—É—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_role in ['owner', 'moderator', 'admin']:
            return True
        # üë§ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å
        else:
            return False

    def extract_clean_content(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        lines = content.strip().split('\n')

        if len(lines) < 3:
            return content

        # üéØ –ö–ê–°–ö–ê–î–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –î–û —Å–µ–∫—Ü–∏–∏ "–ü–µ—Ä–µ—Å–ª–∞–Ω–æ"
        forwarded_section_start = -1

        # –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–∫—Ü–∏—è "üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ"
        for i, line in enumerate(lines):
            if line.strip().startswith('üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ') or line.strip().startswith('–ü–µ—Ä–µ—Å–ª–∞–Ω–æ'):
                forwarded_section_start = i
                break

        if forwarded_section_start > 0:
            # –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –î–û —Å–µ–∫—Ü–∏–∏ "–ü–µ—Ä–µ—Å–ª–∞–Ω–æ"
            user_comment_lines = lines[:forwarded_section_start]
            user_comment = '\n'.join(user_comment_lines).strip()
            if user_comment:
                return user_comment

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        # –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∞ (–ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É, –Ω–µ —Ü–∏—Ç–∞—Ç—É)
        if forwarded_section_start >= 0 and forwarded_section_start + 2 < len(lines):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É "üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ..." –∏ —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ—Ä–æ–º
            main_content_start = forwarded_section_start + 2
            if main_content_start < len(lines):
                main_content = lines[main_content_start].strip()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if main_content and not main_content.startswith('üì§'):
                    return main_content

        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        for line in lines:
            line = line.strip()
            if line and not line.startswith('üì§') and not line.startswith('–ü–µ—Ä–µ—Å–ª–∞–Ω–æ'):
                return line

        return content

    def extract_original_author(self, content, fallback_author):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        lines = content.strip().split('\n')

        if len(lines) < 2:
            return fallback_author

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ—Ä–æ–º (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        for i, line in enumerate(lines):
            if i > 0 and line.strip() and not line.startswith('–ü–µ—Ä–µ—Å–ª–∞–Ω–æ') and not line.startswith('üì§'):
                return line.strip()

        return fallback_author

    def send_error(self, error_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–ª–∏–µ–Ω—Ç—É"""
        self.send(text_data=json.dumps({
            "type": "error",
            "message": error_message
        }))

    def message_to_json(self, message, is_history=False):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
        reply_data = None
        if message.parent:
            reply_data = {
                'id': str(message.parent.id),
                'author_name': message.parent.author.display_name,
                'author_role_icon': message.parent.author.get_role_icon,
                'content_snippet': message.parent.content[:100] + ('...' if len(message.parent.content) > 100 else '')
            }

        return {
            'id': str(message.id),
            'content': message.content,
            'author_name': message.author.display_name,
            'author_role': message.author.role,
            'author_role_icon': message.author.get_role_icon,
            'created': message.created_at.isoformat(),
            'is_own': message.author == self.user,
            'reply_to': reply_data,
            'is_reply_to_me': bool(message.parent and message.parent.author == self.user),
            'likes_count': message.likes_count,
            'dislikes_count': message.dislikes_count,
            'user_reaction': message.get_user_reaction(self.user),  # 'like', 'dislike' –∏–ª–∏ None
            'is_edited': message.is_edited,
            'edited_by': message.edited_by.display_name if message.edited_by else None,
            'edited_by_role': message.edited_by.role if message.edited_by else None,
            'edited_at': message.edited_at.isoformat() if message.edited_at else None,
            'is_pinned': message.is_pinned,
            'pinned_by': message.pinned_by.display_name if message.pinned_by else None,
            'pinned_at': message.pinned_at.isoformat() if message.pinned_at else None,
            'is_forwarded': getattr(message, 'is_forwarded', False),
            'original_message_id': getattr(message, 'original_message_id', None),
        }

    def user_to_json(self, user):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON"""
        return {
            'username': user.username,
            'display_name': user.display_name,
            'role': user.role,
            'role_icon': user.get_role_icon,
        }

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã
    def new_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        self.send(text_data=json.dumps({
            "type": "new_message",
            "message": event["message"]
        }))

    def user_joined(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.send(text_data=json.dumps({
            "type": "user_joined",
            "user": event["user"]
        }))

    def user_left(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.send(text_data=json.dumps({
            "type": "user_left",
            "user": event["user"]
        }))

    def typing_indicator(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
        if event["user"] != self.user.username:
            self.send(text_data=json.dumps({
                "type": "typing",
                "user": event["user"],
                "is_typing": event["is_typing"]
            }))

    def message_edited(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_edited",
            "message": event["message"],
            "editor": event["editor"]
        }))

    def message_deleted(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_deleted",
            "message_id": event["message_id"],
            "deleted_by": event["deleted_by"]
        }))

    def message_forwarded(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_forwarded",
            "message": event["message"],
            "forwarder": event["forwarder"]
        }))

    def message_pinned(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_pinned",
            "message_id": event["message_id"],
            "pinner": event["pinner"]
        }))

    def message_unpinned(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send(text_data=json.dumps({
            "type": "message_unpinned",
            "message_id": event["message_id"],
            "unpinner": event["unpinner"]
        }))

    def reaction_updated(self, event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.send(text_data=json.dumps({
            "type": "reaction_updated",
            "message_id": event["message_id"],
            "likes_count": event["likes_count"],
            "dislikes_count": event["dislikes_count"],
            "user": event["user"],
            "reaction_type": event["reaction_type"]
        }))


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class ChatConsumer(BaseChatConsumer):
    """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    pass
