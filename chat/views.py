# Rocket.Chat Integration Views
# –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 22 –∏—é–Ω—è 2025 –≥., 03:15 MSK
# –°—Ç–∞—Ç—É—Å: –í—Å–µ —Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç, OAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.views.generic import DetailView, CreateView, TemplateView
from django.http import JsonResponse
from django.views import View
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from django.urls import reverse_lazy
from django.db.models import Q
from .models import Room, Message, Thread, DiscussionRoom, Tag, GlobalChatRoom, VIPChatRoom
from .forms import MessageForm, DiscussionRoomForm
from django.db.models import Count
from core.base_views import UnifiedListView
from django.conf import settings
import pymongo
from pymongo import MongoClient
from datetime import datetime

User = get_user_model()


class ChatHomeView(LoginRequiredMixin, TemplateView):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Rocket.Chat"""

    def dispatch(self, request, *args, **kwargs):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Rocket.Chat
        messages.info(request, 'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—ã–π —á–∞—Ç –Ω–∞ –±–∞–∑–µ Rocket.Chat!')
        return redirect('chat:rocketchat_integrated')

    def get_context_data(self, **kwargs):
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        context = super().get_context_data(**kwargs)
        user = self.request.user

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
        private_threads = Thread.objects.filter(
            Q(user1=user) | Q(user2=user)
        ).select_related('room', 'user1', 'user2')[:5]

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        active_discussions = DiscussionRoom.objects.filter(
            members=user
        ).select_related('room', 'owner')[:5]

        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        trending_discussions = DiscussionRoom.objects.get_trendings()[:5]

        context.update({
            'private_threads': private_threads,
            'active_discussions': active_discussions,
            'trending_discussions': trending_discussions,
        })
        return context


class PrivateChatsView(LoginRequiredMixin, UnifiedListView):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    model = Thread
    paginate_by = 20

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–¥–∏–Ω–æ–π hero-—Å–µ–∫—Ü–∏–∏
    section_title = "–õ–∏—á–Ω—ã–µ —á–∞—Ç—ã"
    section_subtitle = "–í–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"
    section_hero_class = "chat-hero"
    card_type = "chat"

    def get_queryset(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
        user = self.request.user
        return (
            Thread.objects.filter(Q(user1=user) | Q(user2=user))
            .select_related('room', 'user1', 'user2')
            .order_by('-room__modified')
        )

    # --- HERO ---
    def get_hero_stats(self):
        user = self.request.user
        qs = self.get_queryset()
        unread_total = 0
        for thread in qs:
            unread_total += thread.room.unread_count(user)
        return [
            {'value': qs.count(), 'label': '–í—Å–µ–≥–æ —á–∞—Ç–æ–≤'},
            {'value': unread_total, 'label': '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö'},
        ]

    def get_filter_list(self):
        # –ü–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []

    def get_unified_cards(self, page_obj):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã Thread –≤ —Ñ–æ—Ä–º–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."""
        cards = []
        current_user = self.request.user
        for thread in page_obj:
            partner = thread.get_partner(current_user)

            # –ê–≤–∞—Ç–∞—Ä –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
            if partner and getattr(partner, 'avatar', None):
                avatar_url = partner.avatar.url
            else:
                avatar_url = '/static/images/default_avatar.svg'

            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_msg = thread.room.latest_message()
            last_msg_text = last_msg.content if last_msg else '–ï—â–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'

            unread_count = thread.room.unread_count(current_user)

            cards.append({
                'id': str(thread.id),
                'type': 'chat',
                'title': partner.username if partner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                'description': last_msg_text[:120],
                'image_url': avatar_url,
                'detail_url': reverse_lazy('chat:private_thread', kwargs={'thread_id': thread.id}),
                'author': {
                    'name': partner.username if partner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                    'avatar': avatar_url,
                },
                'stats': (
                    [{'icon': 'fa-envelope', 'count': unread_count, 'css': 'unread'}]
                    if unread_count else []
                ),
                'created_at': thread.room.modified,
            })
        return cards


class PrivateThreadView(LoginRequiredMixin, DetailView):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    model = Thread
    # –£–¥–∞–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω private_thread.html –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –æ–±—â–∏–π —à–∞–±–ª–æ–Ω —á–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è 500 –æ—à–∏–±–æ–∫
    template_name = 'chat/general_chat.html'
    context_object_name = 'thread'
    pk_url_kwarg = 'thread_id'

    def get_object(self):
        thread = get_object_or_404(Thread, id=self.kwargs['thread_id'])
        user = self.request.user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if user not in [thread.user1, thread.user2]:
            raise PermissionError(_('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É'))

        return thread

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        thread = self.object
        user = self.request.user

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_messages = thread.room.get_messages().select_related('author')[:50]

        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        thread.room.unread_messages(user).update(unread=False)

        # –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ —á–∞—Ç—É
        partner = thread.get_partner(user)

        context.update({
            'chat_messages': chat_messages,
            'partner': partner,
            'room': thread.room,
            'message_form': MessageForm(),
        })
        return context


class StartPrivateChatView(LoginRequiredMixin, View):
    """–ù–∞—á–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    def get(self, request, user_id):
        partner = get_object_or_404(User, id=user_id)

        if partner == request.user:
            messages.error(request, _('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π'))
            return redirect('chat:private_chats')

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
        thread, created = Thread.objects.new_or_get(request.user, partner)

        if created:
            messages.success(request, _('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω'))

        return redirect('chat:private_thread', thread_id=thread.id)


class DiscussionsView(LoginRequiredMixin, UnifiedListView):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""

    model = DiscussionRoom
    paginate_by = 20

    section_title = "–ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
    section_subtitle = "–û–±—Å—É–∂–¥–∞–π—Ç–µ —Ç–µ–º—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö"
    section_hero_class = "chat-hero"
    card_type = "discussion"

    def dispatch(self, request, *args, **kwargs):
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —á–∞—Ç
        messages.warning(request, _('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–∏–π —á–∞—Ç "–ë–µ—Å–µ–¥–∫–∞".'))
        return redirect('chat:general')

    def get_queryset(self):
        queryset = DiscussionRoom.objects.select_related('room', 'owner').prefetch_related('tags', 'members')

        # –ü–æ–∏—Å–∫
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.search(search)

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
        tag_slug = self.request.GET.get('tag')
        if tag_slug:
            queryset = queryset.filter(tags__slug=tag_slug)

        return queryset.order_by('-modified')

    def get_filter_list(self):
        return []

    def get_hero_stats(self):
        qs = self.get_queryset()
        return [
            {'value': qs.count(), 'label': '–í—Å–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π'},
            {'value': qs.aggregate(total_members=Count('members'))['total_members'] or 0, 'label': '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'},
        ]

    def get_unified_cards(self, page_obj):
        cards = []
        for discussion in page_obj:
            owner = discussion.owner
            avatar_url = owner.avatar.url if getattr(owner, 'avatar', None) else '/static/images/default_avatar.svg'
            last_msg = discussion.room.latest_message()
            last_msg_text = last_msg.content if last_msg else discussion.description[:120] if discussion.description else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'
            cards.append({
                'id': discussion.id,
                'type': 'discussion',
                'title': discussion.headline,
                'description': last_msg_text[:120],
                'image_url': avatar_url,
                'detail_url': reverse_lazy('chat:discussion_detail', kwargs={'pk': discussion.pk}),
                'author': {'name': owner.username, 'avatar': avatar_url},
                'stats': [
                    {'icon': 'fa-users', 'count': discussion.members.count(), 'css': 'members'},
                    {'icon': 'fa-comment', 'count': discussion.room.room_messages.count(), 'css': 'messages'},
                ],
                'created_at': discussion.modified,
            })
        return cards


class CreateDiscussionView(LoginRequiredMixin, CreateView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
    model = DiscussionRoom
    form_class = DiscussionRoomForm
    # Fallback –Ω–∞ –µ–¥–∏–Ω—ã–π —à–∞–±–ª–æ–Ω —á–∞—Ç–∞; —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–¥–Ω–µ–µ –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    template_name = 'chat/general_chat.html'
    success_url = reverse_lazy('chat:discussions')

    def dispatch(self, request, *args, **kwargs):
        # –í–†–ï–ú–ï–ù–ù–û –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        messages.warning(request, _('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–∏–π —á–∞—Ç "–ë–µ—Å–µ–¥–∫–∞".'))
        return redirect('chat:general')

    def form_valid(self, form):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        room = Room.objects.create(is_discussion=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∫–æ–º–Ω–∞—Ç—É
        form.instance.owner = self.request.user
        form.instance.room = room

        response = super().form_valid(form)

        messages.success(self.request, _('–û–±—Å—É–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'))
        return response


class DiscussionDetailView(LoginRequiredMixin, DetailView):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
    model = DiscussionRoom
    # –í—Ä–µ–º–µ–Ω–Ω—ã–π fallback –¥–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    template_name = 'chat/general_chat.html'
    context_object_name = 'discussion'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        discussion = self.object
        user = self.request.user

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_messages = discussion.room.get_messages().select_related('author')[:50]

        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        discussion.room.unread_messages(user).update(unread=False)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if user not in discussion.members.all():
            discussion.members.add(user)

        context.update({
            'chat_messages': chat_messages,
            'room': discussion.room,
            'message_form': MessageForm(),
            'is_member': user in discussion.members.all(),
        })
        return context


class RoomView(LoginRequiredMixin, DetailView):
    """–û–±—â–∏–π –≤–∏–¥ –∫–æ–º–Ω–∞—Ç—ã (–¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)"""
    model = Room
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–æ–º–Ω–∞—Ç—ã –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –æ–±—â–∏–π —à–∞–±–ª–æ–Ω —á–∞—Ç–∞
    template_name = 'chat/general_chat.html'
    context_object_name = 'room'
    pk_url_kwarg = 'room_id'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        room = self.object
        user = self.request.user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ
        has_access = False

        if room.is_private and hasattr(room, 'room_thread'):
            thread = room.room_thread
            has_access = user in [thread.user1, thread.user2]
        elif room.is_discussion and hasattr(room, 'discussion_room'):
            discussion = room.discussion_room
            has_access = user in discussion.members.all()

        if not has_access:
            raise PermissionError(_('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ'))

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_messages = room.get_messages().select_related('author')[:50]

        context.update({
            'chat_messages': chat_messages,
            'message_form': MessageForm(),
        })
        return context


# AJAX Views

class SendMessageAjaxView(LoginRequiredMixin, View):
    """AJAX –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    def post(self, request):
        room_id = request.POST.get('room_id')
        content = request.POST.get('content', '').strip()
        reply_to_id = request.POST.get('reply_to')

        if not content:
            return JsonResponse({'error': _('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')}, status=400)

        try:
            room = Room.objects.get(id=room_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
            user = request.user
            has_access = False

            if room.is_private and hasattr(room, 'room_thread'):
                thread = room.room_thread
                has_access = user in [thread.user1, thread.user2]
            elif room.is_discussion and hasattr(room, 'discussion_room'):
                discussion = room.discussion_room
                has_access = user in discussion.members.all()

            if not has_access:
                return JsonResponse({'error': _('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ')}, status=403)

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply_to = None
            if reply_to_id:
                try:
                    reply_to = Message.objects.get(id=reply_to_id, room=room)
                except Message.DoesNotExist:
                    pass

            message = Message.objects.create(
                author=user,
                room=room,
                content=content,
                reply_to=reply_to
            )

            return JsonResponse({
                'success': True,
                'message': {
                    'id': message.id,
                    'content': message.content,
                    'author': message.author.username,
                    'created': message.created.isoformat(),
                    'reply_to': reply_to.id if reply_to else None,
                }
            })

        except Room.DoesNotExist:
            return JsonResponse({'error': _('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}, status=404)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)


class MarkMessagesReadAjaxView(LoginRequiredMixin, View):
    """AJAX –æ—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""

    def post(self, request):
        room_id = request.POST.get('room_id')

        try:
            room = Room.objects.get(id=room_id)
            unread_count = room.unread_messages(request.user).update(unread=False)

            return JsonResponse({
                'success': True,
                'marked_count': unread_count
            })

        except Room.DoesNotExist:
            return JsonResponse({'error': _('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}, status=404)


class LoadMessagesAjaxView(LoginRequiredMixin, View):
    """AJAX –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def get(self, request):
        room_id = request.GET.get('room_id')
        offset = int(request.GET.get('offset', 0))
        limit = int(request.GET.get('limit', 20))

        try:
            room = Room.objects.get(id=room_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
            user = request.user
            has_access = False

            if room.is_private and hasattr(room, 'room_thread'):
                thread = room.room_thread
                has_access = user in [thread.user1, thread.user2]
            elif room.is_discussion and hasattr(room, 'discussion_room'):
                discussion = room.discussion_room
                has_access = user in discussion.members.all()

            if not has_access:
                return JsonResponse({'error': _('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ')}, status=403)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = room.get_messages().select_related('author')[offset:offset+limit]

            messages_data = []
            for msg in messages:
                messages_data.append({
                    'id': msg.id,
                    'content': msg.content,
                    'author': msg.author.username,
                    'created': msg.created.isoformat(),
                    'reply_to': msg.reply_to.id if msg.reply_to else None,
                })

            return JsonResponse({
                'success': True,
                'messages': messages_data,
                'has_more': len(messages) == limit
            })

        except Room.DoesNotExist:
            return JsonResponse({'error': _('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}, status=404)


class GeneralChatView(LoginRequiredMixin, TemplateView):
    """–û–±—â–∏–π —á–∞—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Rocket.Chat"""

    def dispatch(self, request, *args, **kwargs):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Rocket.Chat
        messages.info(request, 'üöÄ –û–±—â–∏–π —á–∞—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Rocket.Chat!')
        return redirect('chat:rocketchat_integrated')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —á–∞—Ç
        global_chat = GlobalChatRoom.get_or_create_default()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_messages = Message.objects.filter(
            room=global_chat.room
        ).select_related('author').order_by('-created')[:50]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        online_count = global_chat.room.connected_clients.count()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        online_users = global_chat.room.connected_clients.all()[:20]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_general_messages = Message.objects.filter(room=global_chat.room).count()
        total_general_users = User.objects.filter(is_active=True).count()

        # –î–ê–ù–ù–´–ï –î–õ–Ø –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ì–û –ó–ê–ì–û–õ–û–í–ö–ê
        user = self.request.user

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_meta = [
            {
                'icon': 'fa-users',
                'text': f'–û–Ω–ª–∞–π–Ω: {online_count}'
            },
            {
                'icon': 'fa-globe',
                'text': '–û—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç'
            },
            {
                'icon': 'fa-shield-alt',
                'text': '–ú–æ–¥–µ—Ä–∏—Ä—É–µ—Ç—Å—è'
            }
        ]

        context.update({
            'global_chat': global_chat,
            'chat_messages': chat_messages,
            'online_count': online_count,
            'online_users': online_users,
            'total_general_messages': total_general_messages,
            'total_general_users': total_general_users,
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            'header_theme': 'chat',
            'header_title': '–ß–∞—Ç –ë–µ—Å–µ–¥–∫–∞',
            'header_icon': 'fa-comments',
            'header_meta': header_meta,
        })
        return context


class VIPChatView(LoginRequiredMixin, TemplateView):
    """VIP-—á–∞—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Rocket.Chat"""

    def dispatch(self, request, *args, **kwargs):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VIP-—á–∞—Ç—É –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º"""
        user = request.user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP –¥–æ—Å—Ç—É–ø
        user_has_vip_access = (
            user.is_staff or
            user.role == 'owner' or
            hasattr(user, 'vip_memberships') and
            user.vip_memberships.filter(is_active=True).exists()
        )

        if not user_has_vip_access:
            messages.error(request, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ VIP-—á–∞—Ç—É')
            return redirect('chat:rocketchat_integrated')

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ VIP –¥–æ—Å—Ç—É–ø–µ
        messages.success(request, 'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP-—á–∞—Ç –Ω–∞ Rocket.Chat!')
        return redirect('chat:rocketchat_integrated')


# üöÄ ROCKET.CHAT –ú–ò–ì–†–ê–¶–ò–Ø - –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê

from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.shortcuts import redirect
from django.urls import reverse
from urllib.parse import urlencode
from django.http import HttpResponseRedirect
import logging

logger = logging.getLogger(__name__)


@method_decorator(login_required, name='dispatch')
class RocketChatOAuthView(View):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π OAuth view –¥–ª—è Rocket.Chat.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ—Ç OAuth –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    def get(self, request, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º authorization code –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º"""
        client_id = request.GET.get('client_id')
        redirect_uri = request.GET.get('redirect_uri')
        response_type = request.GET.get('response_type')
        scope = request.GET.get('scope', 'read')
        state = request.GET.get('state', '')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç Rocket.Chat
        if client_id != 'BesedkaRocketChat2025':
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OAuth view
            from oauth2_provider.views import AuthorizationView
            return AuthorizationView.as_view()(request, *args, **kwargs)

        logger.info(f"RocketChat OAuth request from {request.user.username}")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
        from oauth2_provider.models import Application, Grant
        from django.utils import timezone
        from datetime import timedelta
        import secrets

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.objects.get(client_id=client_id)

            # –°–æ–∑–¥–∞–µ–º authorization grant (–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            code = secrets.token_urlsafe(30)

            grant = Grant.objects.create(
                user=request.user,
                application=application,
                code=code,
                expires=timezone.now() + timedelta(seconds=60),
                redirect_uri=redirect_uri,
                scope=scope
            )

            logger.info(f"Created authorization code for {request.user.username}: {code[:10]}...")

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å –∫–æ–¥–æ–º
            params = {
                'code': code,
                'state': state
            }

            # –ü–∞—Ä—Å–∏–º redirect_uri –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if '?' in redirect_uri:
                full_redirect_url = f"{redirect_uri}&{urlencode(params)}"
            else:
                full_redirect_url = f"{redirect_uri}?{urlencode(params)}"

            logger.info(f"Redirecting to: {full_redirect_url}")

            return HttpResponseRedirect(full_redirect_url)

        except Application.DoesNotExist:
            logger.error(f"OAuth application not found: {client_id}")
            # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π view
            from oauth2_provider.views import AuthorizationView
            return AuthorizationView.as_view()(request, *args, **kwargs)
        except Exception as e:
            logger.error(f"OAuth auto-auth error: {str(e)}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π view
            from oauth2_provider.views import AuthorizationView
            return AuthorizationView.as_view()(request, *args, **kwargs)

# –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ chat/views.py –¥–æ–±–∞–≤—å—Ç–µ:

class RocketChatIntegratedView(LoginRequiredMixin, TemplateView):
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π view –¥–ª—è Rocket.Chat —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    template_name = 'chat/rocketchat_integrated.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user

        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í ROCKET.CHAT
        try:
            import requests
            import json

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Rocket.Chat
            admin_login_data = {
                "username": "owner",
                "password": "owner123secure"
            }

            admin_response = requests.post(
                'http://127.0.0.1:3000/api/v1/login',
                json=admin_login_data,
                timeout=5
            )

            if admin_response.status_code == 200:
                admin_token = admin_response.json()['data']['authToken']
                admin_user_id = admin_response.json()['data']['userId']

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Rocket.Chat
                user_data = {
                    "username": user.username,
                    "email": user.email or f"{user.username}@besedka.local",
                    "name": getattr(user, 'name', user.username),
                    "password": f"auto_{user.id}_{user.username}",  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –ø–∞—Ä–æ–ª—å
                    "active": True,
                    "verified": True,
                    "sendWelcomeEmail": False
                }

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                check_user_response = requests.get(
                    f'http://127.0.0.1:3000/api/v1/users.info?username={user.username}',
                    headers={
                        'X-Auth-Token': admin_token,
                        'X-User-Id': admin_user_id
                    },
                    timeout=5
                )

                if check_user_response.status_code == 200:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
                    rocketchat_user_id = check_user_response.json()['user']['_id']

                    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π access token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    token_response = requests.post(
                        f'http://127.0.0.1:3000/api/v1/users.createToken',
                        json={"username": user.username},
                        headers={
                            'X-Auth-Token': admin_token,
                            'X-User-Id': admin_user_id
                        },
                        timeout=5
                    )

                    if token_response.status_code == 200:
                        user_token = token_response.json()['data']['authToken']

                        # –°–æ–∑–¥–∞–µ–º URL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
                        auto_login_url = f'http://127.0.0.1:3000/channel/general?layout=embedded&resumeToken={user_token}'
                        context['rocketchat_url'] = auto_login_url
                        context['auto_login_success'] = True
                    else:
                        context['rocketchat_url'] = 'http://127.0.0.1:3000'
                        context['auto_login_error'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'

                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º
                    create_user_response = requests.post(
                        'http://127.0.0.1:3000/api/v1/users.create',
                        json=user_data,
                        headers={
                            'X-Auth-Token': admin_token,
                            'X-User-Id': admin_user_id
                        },
                        timeout=5
                    )

                    if create_user_response.status_code == 200:
                        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        token_response = requests.post(
                            f'http://127.0.0.1:3000/api/v1/users.createToken',
                            json={"username": user.username},
                            headers={
                                'X-Auth-Token': admin_token,
                                'X-User-Id': admin_user_id
                            },
                            timeout=5
                        )

                        if token_response.status_code == 200:
                            user_token = token_response.json()['data']['authToken']
                            auto_login_url = f'http://127.0.0.1:3000/channel/general?layout=embedded&resumeToken={user_token}'
                            context['rocketchat_url'] = auto_login_url
                            context['auto_login_success'] = True
                        else:
                            context['rocketchat_url'] = 'http://127.0.0.1:3000'
                            context['auto_login_error'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    else:
                        context['rocketchat_url'] = 'http://127.0.0.1:3000'
                        context['auto_login_error'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Rocket.Chat'
            else:
                context['rocketchat_url'] = 'http://127.0.0.1:3000'
                context['auto_login_error'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

        except Exception as e:
            # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π Rocket.Chat –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            context['rocketchat_url'] = 'http://127.0.0.1:3000'
            context['auto_login_error'] = f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}'

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
        def user_has_vip_access():
            return user.role == 'owner'

        context['user_has_vip_access'] = user_has_vip_access()
        return context


class RocketChatAuthAPIView(LoginRequiredMixin, View):
    """API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Rocket.Chat"""

    def post(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            user = request.user

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è Rocket.Chat
            return JsonResponse({
                'success': True,
                'user': {
                    'username': user.username,
                    'email': user.email,
                    'role': user.role,
                    'is_staff': user.is_staff,
                    'display_name': user.get_full_name() or user.username
                },
                'message': 'User authenticated successfully'
            })

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)

    def get(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            user = request.user

            return JsonResponse({
                'authenticated': True,
                'user': {
                    'username': user.username,
                    'role': user.role,
                    'is_staff': user.is_staff
                }
            })

        except Exception as e:
            return JsonResponse({
                'authenticated': False,
                'error': str(e)
            }, status=500)


class TestMessageInputView(LoginRequiredMixin, TemplateView):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Rocket.Chat –∫–∞–Ω–∞–ª—ã"""
    template_name = 'chat/test_message_input.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user

        context.update({
            'user_id': str(user.id),
            'rocketchat_url': f"http://127.0.0.1:3000",
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        return context

    def post(self, request, *args, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MongoDB –Ω–∞–ø—Ä—è–º—É—é"""
        channel = request.POST.get('channel', 'general')
        message_text = request.POST.get('message', '').strip()

        if not message_text:
            test_result = {
                'status': 'error',
                'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }
        else:
            test_result = self._send_message_to_mongodb(request.user, channel, message_text)

        context = self.get_context_data(**kwargs)
        context['test_result'] = test_result

        return self.render_to_response(context)

    def _send_message_to_mongodb(self, user, channel_id, message_text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ MongoDB"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
            client = MongoClient('mongodb://127.0.0.1:27017/')
            db = client.rocketchat

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            channel = db.rocketchat_room.find_one({'_id': channel_id})
            if not channel:
                return {
                    'status': 'error',
                    'message': f'–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB'
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
            subscription = db.rocketchat_subscription.find_one({
                'u.username': user.username,
                'rid': channel_id
            })

            if not subscription:
                return {
                    'status': 'error',
                    'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}',
                    'details': f'–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel["name"]} ({channel["fname"]}), –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç'
                }

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Rocket.Chat
            rocket_user = db.users.find_one({'username': user.username})
            if not rocket_user:
                return {
                    'status': 'error',
                    'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Rocket.Chat'
                }

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            from bson.objectid import ObjectId
            message_doc = {
                '_id': ObjectId(),
                'rid': channel_id,
                'msg': message_text,
                'ts': datetime.utcnow(),
                'u': {
                    '_id': rocket_user['_id'],
                    'username': user.username,
                    'name': rocket_user.get('name', user.username)
                },
                't': None,
                'groupable': False,
                '_updatedAt': datetime.utcnow()
            }

            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
            result = db.rocketchat_message.insert_one(message_doc)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
            db.rocketchat_room.update_one(
                {'_id': channel_id},
                {
                    '$inc': {'msgs': 1},
                    '$set': {'lm': datetime.utcnow()}
                }
            )

            return {
                'status': 'success',
                'message': f'–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel["fname"]}',
                'details': f'Message ID: {result.inserted_id}',
                'mongo_result': f'–ö–∞–Ω–∞–ª: {channel["name"]} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}'
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}',
                'details': f'MongoDB connection error –∏–ª–∏ –¥—Ä—É–≥–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞'
            }
        finally:
            try:
                client.close()
            except:
                pass


# üîê OAuth API Views –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rocket.Chat

class RocketChatOAuthTokenView(View):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞ –æ—Ç Rocket.Chat"""

    def post(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç Rocket.Chat OAuth"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth
            client_id = request.POST.get('client_id')
            client_secret = request.POST.get('client_secret')
            grant_type = request.POST.get('grant_type')
            code = request.POST.get('code')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Client ID –∏ Secret
            if client_id != 'BesedkaRocketChat2025' or client_secret != 'SecureSecretKey2025BesedkaRocketChatSSO':
                return JsonResponse({'error': 'invalid_client'}, status=401)

            if grant_type != 'authorization_code':
                return JsonResponse({'error': 'unsupported_grant_type'}, status=400)

            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è OAuth –ª–æ–≥–∏–∫–∞
            access_token = 'besedka_access_token_' + str(datetime.now().timestamp())

            return JsonResponse({
                'access_token': access_token,
                'token_type': 'Bearer',
                'expires_in': 3600,
                'refresh_token': 'besedka_refresh_token',
                'scope': 'read'
            })

        except Exception as e:
            return JsonResponse({'error': 'server_error', 'details': str(e)}, status=500)


class RocketChatOAuthUserView(View):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    def get(self, request):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è Rocket.Chat"""
        try:
            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Django
            if not request.user.is_authenticated:
                return JsonResponse({
                    'error': 'unauthorized',
                    'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Django'
                }, status=401)

            user = request.user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not hasattr(user, 'role'):
                return JsonResponse({
                    'error': 'user_incomplete',
                    'message': '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–ª—è role'
                }, status=400)

            # –ü—Ä–æ—Å—Ç–æ–π –º–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –¥–ª—è Rocket.Chat
            role_mapping = {
                'owner': ['admin', 'vip', 'user'],
                'moderator': ['admin', 'user'],
                'store_owner': ['user'],
                'store_admin': ['user'],
                'user': ['user']
            }

            rocket_roles = role_mapping.get(user.role, ['user'])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
            channels = ['general']  # –í—Å–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±—â–∏–π –∫–∞–Ω–∞–ª
            if user.role == 'owner':
                channels.extend(['vip', 'moderators'])
            elif user.role == 'moderator':
                channels.append('moderators')

            # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ avatar –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
            avatar_url = '/static/images/default_avatar.svg'

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            user_data = {
                'id': str(user.id),
                'username': user.username,
                'email': getattr(user, 'email', ''),
                'name': user.username,  # –£–ø—Ä–æ—â–∞–µ–º - –ø—Ä–æ—Å—Ç–æ username
                'role': user.role,
                'roles': rocket_roles,
                'channels': channels,
                'avatar': avatar_url,
                'active': True,
                'verified': True
            }

            logger.info(f"‚úÖ RocketChat OAuth user data for {user.username}: {user_data}")
            return JsonResponse(user_data)

        except Exception as e:
            logger.error(f"‚ùå RocketChat OAuth user error: {str(e)}")
            return JsonResponse({
                'error': 'server_error',
                'message': str(e),
                'debug_info': f'User: {request.user}, Authenticated: {request.user.is_authenticated}'
            }, status=500)

    def post(self, request):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return self.get(request)



