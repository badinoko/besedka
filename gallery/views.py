from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from .models import Photo, PhotoComment
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.urls import reverse, reverse_lazy
from django.http import JsonResponse, HttpResponseForbidden, Http404, HttpResponse
from django.db.models import Q, F, Count, Prefetch
from django.utils import timezone
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import json
import io
import random
from PIL import Image, ImageDraw, ImageFont
from django.core.files.base import ContentFile
from .forms import PhotoUploadForm, PhotoCommentForm, PhotoSearchForm
from core.models import ActionLog
from users.models import Notification
from django.contrib.auth import get_user_model
from django.template.loader import render_to_string

def photo_list(request):
    """Display list of photos."""
    photos = Photo.objects.filter(is_public=True).select_related('author')
    return render(request, "gallery/list.html", {"photos": photos})

def photo_detail(request, pk):
    """Display photo details."""
    photo = get_object_or_404(Photo, pk=pk)
    if not photo.is_public and photo.author != request.user:
        messages.error(request, _("You don't have permission to view this photo."))
        return redirect("gallery:list")
    comments = photo.comments.all().select_related('author')
    return render(request, "gallery/detail.html", {
        "photo": photo,
        "comments": comments
    })

@login_required
def photo_upload(request):
    """Upload new photo."""
    # Placeholder for form handling
    return render(request, "gallery/upload.html")

class GalleryView(ListView):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è —Å Masonry —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π"""
    model = Photo
    template_name = 'gallery/gallery_modern.html'
    context_object_name = 'photos'
    paginate_by = 24

    def get_queryset(self):
        queryset = Photo.objects.filter(is_public=True, is_active=True).annotate(
            likes_count=Count('likes'),
            comments_count=Count('comments')
        )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É
        author = self.request.GET.get('author')
        if author:
            print(f"üîç DEBUG: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É: {author}")
            User = get_user_model()
            try:
                author_user = User.objects.get(username=author)
                print(f"‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {author_user.username}")
                queryset = queryset.filter(author=author_user)
                print(f"üìä DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∞–≤—Ç–æ—Ä–∞: {queryset.count()}")
            except User.DoesNotExist:
                print(f"‚ùå DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {author} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                queryset = queryset.none()
        else:
            print("üåê DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–≤—Ç–æ—Ä–∞)")

        # –ü–æ–∏—Å–∫
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(title__icontains=search) |
                Q(description__icontains=search) |
                Q(author__username__icontains=search) |
                Q(growlog__title__icontains=search)
            )

        # –§–∏–ª—å—Ç—Ä—ã –æ—Ç —Ç–∞–±–æ–≤
        filter_by = self.request.GET.get('filter')
        if filter_by == 'popular':
            queryset = queryset.order_by('-likes_count', '-created_at')
        elif filter_by == 'commented':
            queryset = queryset.order_by('-comments_count', '-created_at')
        elif filter_by == 'growlog':
            queryset = queryset.filter(growlog__isnull=False).order_by('-created_at')
        else: # newest –∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            queryset = queryset.order_by('-created_at')

        return queryset.select_related('author', 'growlog').prefetch_related('likes', 'comments')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['page_type'] = 'gallery' # –§–ª–∞–≥ –¥–ª—è —à–∞–±–ª–æ–Ω–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.request.user.is_authenticated:
            liked_photos = self.request.user.liked_photos.values_list('id', flat=True)
            context['user_liked_photos'] = list(liked_photos)
        else:
            context['user_liked_photos'] = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∞–≤—Ç–æ—Ä—É
        author_username = self.request.GET.get('author')
        context['current_author'] = None
        if author_username:
            User = get_user_model()
            try:
                context['current_author'] = User.objects.get(username=author_username)
            except User.DoesNotExist:
                pass

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è hero —Å–µ–∫—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä –∞–≤—Ç–æ—Ä–∞)
        if context['current_author']:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
            author_photos = Photo.objects.filter(
                author=context['current_author'],
                is_public=True,
                is_active=True
            )
            context['total_photos'] = author_photos.count()
            context['total_authors'] = 1  # –û–¥–∏–Ω –∞–≤—Ç–æ—Ä
            context['total_likes'] = author_photos.aggregate(
                total_likes=Count('likes')
            )['total_likes'] or 0
        else:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            context['total_photos'] = Photo.objects.filter(is_public=True, is_active=True).count()
            context['total_authors'] = Photo.objects.filter(is_public=True, is_active=True).values('author').distinct().count()
            context['total_likes'] = Photo.objects.filter(is_public=True, is_active=True).aggregate(
                total_likes=Count('likes')
            )['total_likes'] or 0

        # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
        context['search_form'] = PhotoSearchForm(self.request.GET or None)
        context['search_query'] = self.request.GET.get('search', '')
        context['current_sort'] = self.request.GET.get('sort', '-created_at')
        context['current_filter'] = self.request.GET.get('filter', 'newest')

        return context

    def get(self, request, *args, **kwargs):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if request.headers.get('x-requested-with') == 'XMLHttpRequest':
            self.object_list = self.get_queryset()
            context = self.get_context_data()
            return render(request, 'gallery/partials/photo_cards.html', context)
        return super().get(request, *args, **kwargs)

class MyPhotosView(LoginRequiredMixin, ListView):
    """–ú–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –ò–°–ü–û–õ–¨–ó–£–ï–¢ –¢–û–¢ –ñ–ï –®–ê–ë–õ–û–ù, –ß–¢–û –ò –ì–ê–õ–ï–†–ï–Ø"""
    model = Photo
    template_name = 'gallery/gallery_modern.html' # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –®–ê–ë–õ–û–ù
    context_object_name = 'photos'
    paginate_by = 24

    def get_queryset(self):
        queryset = Photo.objects.filter(
            author=self.request.user,
            is_active=True
        )

        # –§–∏–ª—å—Ç—Ä—ã –æ—Ç —Ç–∞–±–æ–≤
        filter_by = self.request.GET.get('filter')
        if filter_by == 'public':
            queryset = queryset.filter(is_public=True)
        elif filter_by == 'private':
            queryset = queryset.filter(is_public=False)

        return queryset.order_by('-created_at').select_related('growlog').prefetch_related('likes', 'comments')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['page_type'] = 'my_photos' # –§–ª–∞–≥ –¥–ª—è —à–∞–±–ª–æ–Ω–∞

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        base_queryset = Photo.objects.filter(author=self.request.user, is_active=True)
        context['total_photos'] = base_queryset.count()
        context['total_public_photos'] = base_queryset.filter(is_public=True).count()
        context['total_private_photos'] = base_queryset.filter(is_public=False).count()
        context['total_likes'] = base_queryset.aggregate(total_likes=Count('likes'))['total_likes'] or 0
        context['current_filter'] = self.request.GET.get('filter', 'all')

        return context

    # AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ filter_gallery_ajax

class PhotoDetailView(DetailView):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    model = Photo
    template_name = 'gallery/photo_detail.html'
    context_object_name = 'photo'

    def get_object(self):
        obj = super().get_object()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not obj.is_public and obj.author != self.request.user:
            raise Http404("Photo not found")

        return obj

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        comments = self.object.comments.select_related('author').order_by('created_at')
        paginator = Paginator(comments, 10)
        page = self.request.GET.get('page')

        try:
            comments_page = paginator.page(page)
        except PageNotAnInteger:
            comments_page = paginator.page(1)
        except EmptyPage:
            comments_page = paginator.page(paginator.num_pages)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_liked = False
        if self.request.user.is_authenticated:
            user_liked = self.object.likes.filter(id=self.request.user.id).exists()

        context.update({
            'comments': comments_page,
            'comment_form': PhotoCommentForm(),
            'can_edit': self.object.author == self.request.user,
            'user_liked': user_liked,
            'likes_count': self.object.likes.count(),
            'comments_count': self.object.comments.count(),
        })
        return context

    def post(self, request, *args, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        self.object = self.get_object()
        form = PhotoCommentForm(request.POST)

        if form.is_valid() and request.user.is_authenticated:
            comment = form.save(commit=False)
            comment.author = request.user
            comment.photo = self.object
            comment.save()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É —Ñ–æ—Ç–æ
            if self.object.author != request.user:
                Notification.objects.create(
                    recipient=self.object.author,
                    sender=request.user,
                    notification_type='comment',
                    title='–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ',
                    message=f'{request.user.username} –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—à–µ —Ñ–æ—Ç–æ "{self.object.title}"'
                )

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            ActionLog.objects.create(
                user=request.user,
                action_type='comment_added',
                model_name='Photo',
                object_id=self.object.pk,
                object_repr=str(self.object),
                details=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ #{self.object.pk}'
            )

            messages.success(request, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!')
            return redirect('gallery:photo_detail', pk=self.object.pk)

        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        context = self.get_context_data()
        context['comment_form'] = form
        return render(request, self.template_name, context)

class PhotoUploadView(LoginRequiredMixin, CreateView):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    model = Photo
    form_class = PhotoUploadForm
    template_name = 'gallery/photo_form.html'

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        form.instance.author = self.request.user
        response = super().form_valid(form)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        ActionLog.objects.create(
            user=self.request.user,
            action_type='photo_uploaded',
            model_name='Photo',
            object_id=form.instance.pk,
            object_repr=str(form.instance),
            details=f'Uploaded photo: {form.instance.title}'
        )

        messages.success(self.request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        return response

    def get_success_url(self):
        return reverse('gallery:photo_detail', kwargs={'pk': self.object.pk})

def toggle_like_photo(request, pk):
    """AJAX –ª–∞–π–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–ù–ï–û–ë–†–ê–¢–ò–ú–´–ô –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä–º—ã)"""
    if not request.user.is_authenticated:
        return JsonResponse({'error': 'Authentication required'}, status=401)

    if request.method != 'POST':
        return JsonResponse({'error': 'Method not allowed'}, status=405)

    photo = get_object_or_404(Photo, pk=pk)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ù–ï–û–ë–†–ê–¢–ò–ú–´–ï –õ–ê–ô–ö–ò)
    if photo.likes.filter(id=request.user.id).exists():
        # –õ–∞–π–∫ —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞
        return JsonResponse({
            'success': True,
            'status': 'ok',
            'likes_count': photo.likes.count(),
            'liked': True,
            'action': 'already_liked',
            'message': '–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
        })
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ)
        photo.likes.add(request.user)
        liked = True
        action = 'liked'

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–Ω —Å–∞–º)
        if photo.author != request.user:
            Notification.objects.create(
                recipient=photo.author,
                sender=request.user,
                notification_type='like',
                title='–ù–æ–≤—ã–π –ª–∞–π–∫',
                message=f'{request.user.username} –ª–∞–π–∫–Ω—É–ª –≤–∞—à–µ —Ñ–æ—Ç–æ "{photo.title}"'
            )

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    ActionLog.objects.create(
        user=request.user,
        action_type=action,
        model_name='Photo',
        object_id=photo.pk,
        object_repr=str(photo),
        details=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} {action.capitalize()} —Ñ–æ—Ç–æ #{photo.pk}'
    )

    return JsonResponse({
        'success': True,
        'status': 'ok',
        'likes_count': photo.likes.count(),
        'liked': liked,
        'action': action,
        'message': '–õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É'
    })

class PhotoUpdateView(LoginRequiredMixin, UpdateView):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    model = Photo
    form_class = PhotoUploadForm
    template_name = 'gallery/edit.html'

    def dispatch(self, request, *args, **kwargs):
        photo = self.get_object()
        if photo.author != request.user:
            return HttpResponseForbidden("You can only edit your own photos")
        return super().dispatch(request, *args, **kwargs)

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        ActionLog.objects.create(
            user=self.request.user,
            action_type='photo_updated',
            model_name='Photo',
            object_id=form.instance.pk,
            object_repr=str(form.instance),
            details=f'Updated photo: {form.instance.title}'
        )

        messages.success(self.request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
        return super().form_valid(form)

    def get_success_url(self):
        return reverse('gallery:photo_detail', kwargs={'pk': self.object.pk})

class PhotoDeleteView(LoginRequiredMixin, DeleteView):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    model = Photo
    template_name = 'gallery/delete_confirm.html'
    success_url = reverse_lazy('gallery:my_photos')

    def dispatch(self, request, *args, **kwargs):
        photo = self.get_object()
        if photo.author != request.user:
            return HttpResponseForbidden("You can only delete your own photos")
        return super().dispatch(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        photo = self.get_object()
        photo_title = photo.title

        # Soft delete
        photo.is_active = False
        photo.save()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        ActionLog.objects.create(
            user=request.user,
            action_type='photo_deleted',
            model_name='Photo',
            object_id=photo.pk,
            object_repr=str(photo),
            details=f'Deleted photo: {photo_title}'
        )

        messages.success(request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞!')
        return redirect(self.success_url)

def load_more_photos(request):
    """AJAX –ø–æ–¥–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
    page = request.GET.get('page', 1)
    search = request.GET.get('search', '')
    sort = request.GET.get('sort', '-created_at')

    queryset = Photo.objects.filter(is_public=True, is_active=True)

    if search:
        queryset = queryset.filter(
            Q(title__icontains=search) |
            Q(description__icontains=search) |
            Q(author__username__icontains=search)
        )

    if sort == 'popular':
        queryset = queryset.annotate(likes_count=Count('likes')).order_by('-likes_count', '-created_at')
    else:
        queryset = queryset.order_by(sort)

    paginator = Paginator(queryset.select_related('author').prefetch_related('likes'), 24)

    try:
        photos = paginator.page(page)
    except (PageNotAnInteger, EmptyPage):
        return JsonResponse({'photos': [], 'has_next': False})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    photos_data = []
    for photo in photos:
        photos_data.append({
            'id': photo.id,
            'title': photo.title,
            'image_url': photo.image.url,
            'author': photo.author.username,
            'author_url': reverse('users:detail', kwargs={'username': photo.author.username}),
            'detail_url': reverse('gallery:photo_detail', kwargs={'pk': photo.pk}),
            'likes_count': photo.likes.count(),
            'created_at': photo.created_at.strftime('%d.%m.%Y'),
        })

    return JsonResponse({
        'photos': photos_data,
        'has_next': photos.has_next(),
        'next_page': photos.next_page_number() if photos.has_next() else None
    })

def filter_gallery_ajax(request):
    """AJAX-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–∞–ª–µ—Ä–µ–∏ (–ü–û –≠–¢–ê–õ–û–ù–£ –ù–û–í–û–°–¢–ï–ô)"""

    try:
        filter_type = request.GET.get('filter', 'newest')
        page = request.GET.get('page', 1)
        section = request.GET.get('section', 'gallery')  # gallery –∏–ª–∏ my_photos
        author = request.GET.get('author')  # –ü–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ—Ä–∞

        if section == 'my_photos':
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–ú–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
            if not request.user.is_authenticated:
                return JsonResponse({'error': 'Authentication required'}, status=401)

            queryset = Photo.objects.filter(
                author=request.user,
                is_active=True
            ).annotate(
                likes_count=Count('likes'),
                comments_count=Count('comments')
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–æ–∏—Ö —Ñ–æ—Ç–æ
            if filter_type == 'public':
                queryset = queryset.filter(is_public=True)
            elif filter_type == 'private':
                queryset = queryset.filter(is_public=False)
            # –ï—Å–ª–∏ filter_type == 'all' - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ (–ø—É–±–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)

        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏
            queryset = Photo.objects.filter(is_public=True, is_active=True).annotate(
                likes_count=Count('likes'),
                comments_count=Count('comments')
            )

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É
            if author:
                User = get_user_model()
                try:
                    author_user = User.objects.get(username=author)
                    queryset = queryset.filter(author=author_user)
                except User.DoesNotExist:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    queryset = queryset.none()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
            if filter_type == 'popular':
                queryset = queryset.order_by('-likes_count', '-created_at')
            elif filter_type == 'commented':
                queryset = queryset.order_by('-comments_count', '-created_at')
            elif filter_type == 'growlog':
                queryset = queryset.filter(growlog__isnull=False).order_by('-created_at')
            else:  # newest
                queryset = queryset.order_by('-created_at')

        if section == 'my_photos':
            queryset = queryset.order_by('-created_at')

        queryset = queryset.select_related('author', 'growlog').prefetch_related('likes', 'comments')

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        paginator = Paginator(queryset, 24)
        try:
            photos_page = paginator.page(page)
        except:
            photos_page = paginator.page(1)

        # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos_html = render_to_string('gallery/partials/photo_cards.html', {
            'photos': photos_page,
            'user': request.user,
            'page_type': section,  # –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            'current_filter': filter_type,  # –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        })

        # –†–µ–Ω–¥–µ—Ä–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        pagination_html = ''
        if photos_page.has_other_pages():
            pagination_html = render_to_string('gallery/partials/pagination.html', {
                'photos': photos_page,
                'current_filter': filter_type,
                'section': section
            })

        return JsonResponse({
            'success': True,
            'photos_html': photos_html,
            'pagination_html': pagination_html,
            'photos_count': photos_page.paginator.count
        })

    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

class PhotoCommentCreateView(LoginRequiredMixin, CreateView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ñ–æ—Ç–æ"""
    model = PhotoComment
    form_class = PhotoCommentForm
    template_name = 'gallery/comment_form.html'

    def dispatch(self, request, *args, **kwargs):
        self.photo = get_object_or_404(Photo, pk=kwargs['photo_pk'])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ
        if not self.photo.is_public and self.photo.author != request.user:
            raise Http404("Photo not found")
        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        form.instance.author = self.request.user
        form.instance.photo = self.photo

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        ActionLog.objects.create(
            user=self.request.user,
            action='comment_create',
            details=f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ "{self.photo.title}"'
        )

        messages.success(self.request, _('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'))
        return super().form_valid(form)

    def get_success_url(self):
        return self.photo.get_absolute_url()

class CommentUpdateView(LoginRequiredMixin, UpdateView):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    model = PhotoComment
    fields = ['text']
    template_name = 'gallery/comment_edit.html'

    def dispatch(self, request, *args, **kwargs):
        comment = self.get_object()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # –í–ê–ñ–ù–û: –î–∞–∂–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
        if request.user.is_superuser:
            messages.error(request, _("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø—Ä—è–º—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."))
            return redirect('gallery:photo_detail', pk=comment.photo.pk)
        if not (request.user.is_staff or request.user.groups.filter(name__in=['Moderators', 'Administrators']).exists()):
            messages.error(request, _("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."))
            return redirect('gallery:photo_detail', pk=comment.photo.pk)
        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        ActionLog.objects.create(
            user=self.request.user,
            action_type='comment_updated',
            model_name='PhotoComment',
            object_id=form.instance.pk,
            object_repr=str(form.instance),
            details=f'Updated comment on photo: {form.instance.photo.title}'
        )

        messages.success(self.request, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!')
        return super().form_valid(form)

    def get_success_url(self):
        return reverse('gallery:photo_detail', kwargs={'pk': self.object.photo.pk})

class CommentDeleteView(LoginRequiredMixin, DeleteView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    model = PhotoComment
    template_name = 'gallery/comment_delete_confirm.html'

    def dispatch(self, request, *args, **kwargs):
        comment = self.get_object()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # –í–ê–ñ–ù–û: –î–∞–∂–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
        if request.user.is_superuser:
            messages.error(request, _("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø—Ä—è–º—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."))
            return redirect('gallery:photo_detail', pk=comment.photo.pk)
        if not (request.user.is_staff or request.user.groups.filter(name__in=['Moderators', 'Administrators']).exists()):
            messages.error(request, _("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."))
            return redirect('gallery:photo_detail', pk=comment.photo.pk)
        return super().dispatch(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        comment = self.get_object()
        photo_pk = comment.photo.pk

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        ActionLog.objects.create(
            user=request.user,
            action_type='comment_deleted',
            model_name='PhotoComment',
            object_id=comment.pk,
            object_repr=str(comment),
            details=f'Deleted comment on photo: {comment.photo.title}'
        )

        messages.success(request, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω!')
        return super().delete(request, *args, **kwargs)

    def get_success_url(self):
        return reverse('gallery:photo_detail', kwargs={'pk': self.object.photo.pk})

# ============= –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò =============

@login_required
def create_test_data_view(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –∏ –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç–æ–≤ - –¢–û–õ–¨–ö–û –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è owner/admin)
    if not (hasattr(request.user, 'role') and request.user.role in ['owner', 'admin']):
        messages.error(request, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        return redirect('gallery:gallery')

    if request.method == 'POST':
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = generate_test_data()

            messages.success(request, f"""
                ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!
                üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {result['photos_created']}
                üå± –ì—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç–æ–≤: {result['growlogs_created']}
                üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {result['notifications_created']}
            """)

        except Exception as e:
            messages.error(request, f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from growlogs.models import GrowLog

    context = {
        'total_photos': Photo.objects.count(),
        'total_growlogs': GrowLog.objects.count(),
        'total_users': get_user_model().objects.count(),
        'total_notifications': Notification.objects.count(),
    }

    return render(request, 'gallery/create_test_data.html', context)


def generate_test_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    from growlogs.models import GrowLog, GrowLogComment

    User = get_user_model()

    # –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    plant_names = [
        'White Widow', 'Northern Lights', 'Blue Dream', 'AK-47',
        'Purple Haze', 'Jack Herer', 'Sour Diesel', 'OG Kush',
        'Super Skunk', 'Amnesia Haze', 'Cheese', 'Critical'
    ]

    # –¶–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    plant_colors = [
        '#2ECC71', '#27AE60', '#16A085', '#1ABC9C',
        '#3498DB', '#2980B9', '#9B59B6', '#8E44AD',
        '#F39C12', '#E67E22', '#E74C3C', '#C0392B'
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = list(User.objects.filter(is_active=True))
    if not users:
        raise Exception('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

    photos_created = 0
    growlogs_created = 0
    notifications_created = 0

    # –°–æ–∑–¥–∞–µ–º 12 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for i in range(12):
        # –°–ª—É—á–∞–π–Ω—ã–π –∞–≤—Ç–æ—Ä
        author = random.choice(users)

        # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
        plant_name = random.choice(plant_names)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = create_test_image(plant_name, random.choice(plant_colors))

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ
        photo = Photo.objects.create(
            title=f'{plant_name} - –î–µ–Ω—å {random.randint(1, 120)}',
            description=generate_photo_description(plant_name),
            author=author,
            is_public=True
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_file = ContentFile(image.getvalue())
        photo.image.save(f'test_photo_{i+1}.png', img_file, save=True)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–∞–π–∫–∏
        like_users = random.sample(users, k=random.randint(0, min(5, len(users))))
        for like_user in like_users:
            if like_user != author:  # –ê–≤—Ç–æ—Ä –Ω–µ –ª–∞–π–∫–∞–µ—Ç —Å–µ–±—è
                photo.likes.add(like_user)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comment_users = random.sample(users, k=random.randint(0, 3))
        for comment_user in comment_users:
            if comment_user != author:
                PhotoComment.objects.create(
                    photo=photo,
                    author=comment_user,
                    text=generate_photo_comment()
                )

        photos_created += 1

    # –°–æ–∑–¥–∞–µ–º 3 –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç–∞
    for i in range(3):
        # –°–ª—É—á–∞–π–Ω—ã–π –∞–≤—Ç–æ—Ä
        grower = random.choice(users)

        # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
        plant_name = random.choice(plant_names)

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç
        growlog = GrowLog.objects.create(
            title=f'–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ {plant_name} #{i+1}',
            description=generate_growlog_description(plant_name),
            grower=grower,
            environment=random.choice(['indoor', 'outdoor', 'greenhouse']),
            medium=random.choice(['soil', 'hydro', 'coco', 'aero']),
            current_stage=random.choice(['seed', 'germination', 'seedling', 'vegetative', 'flowering', 'harvest']),
            is_public=True,
            strain_custom=plant_name
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–∞–π–∫–∏
        like_users = random.sample(users, k=random.randint(0, min(7, len(users))))
        for like_user in like_users:
            if like_user != grower:
                growlog.likes.add(like_user)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comment_users = random.sample(users, k=random.randint(0, 4))
        for comment_user in comment_users:
            if comment_user != grower:
                GrowLogComment.objects.create(
                    growlog=growlog,
                    author=comment_user,
                    content=generate_growlog_comment()
                )

        growlogs_created += 1

    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–∞–π–∫–∞—Ö
    for photo in Photo.objects.filter(title__startswith='White Widow'):
        for like_user in photo.likes.all()[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 2 –ª–∞–π–∫–µ—Ä–æ–≤
            if like_user != photo.author:
                Notification.objects.create(
                    recipient=photo.author,
                    sender=like_user,
                    title='–ù–æ–≤—ã–π –ª–∞–π–∫ –≤ –≥–∞–ª–µ—Ä–µ–µ!',
                    message=f'{like_user.username} –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é "{photo.title}"',
                    notification_type='like',
                    content_object=photo
                )
                notifications_created += 1

    return {
        'photos_created': photos_created,
        'growlogs_created': growlogs_created,
        'notifications_created': notifications_created
    }


def create_test_image(plant_name, color):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x400
    img = Image.new('RGB', (400, 400), color=color)
    draw = ImageDraw.Draw(img)

    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–º–∏—Ç–∞—Ü–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è
    # –°—Ç–µ–±–µ–ª—å
    draw.rectangle([190, 200, 210, 380], fill='#8B4513')

    # –õ–∏—Å—Ç—å—è
    for i in range(3):
        y = 150 + i * 60
        # –õ–µ–≤—ã–π –ª–∏—Å—Ç
        draw.ellipse([120, y, 190, y + 40], fill='#228B22')
        # –ü—Ä–∞–≤—ã–π –ª–∏—Å—Ç
        draw.ellipse([210, y, 280, y + 40], fill='#228B22')

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        font = ImageFont.load_default()
    except:
        font = None

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
    if font:
        text_bbox = draw.textbbox((0, 0), plant_name, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        draw.text((200 - text_width // 2, 50), plant_name, fill='white', font=font)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    img_io = io.BytesIO()
    img.save(img_io, format='PNG')
    img_io.seek(0)
    return img_io


def generate_photo_description(plant_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    descriptions = [
        f'–ú–æ–π {plant_name} –Ω–∞ {random.randint(20, 80)} –¥–µ–Ω—å —Ü–≤–µ—Ç–µ–Ω–∏—è. –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!',
        f'–ö—Ä–∞—Å–∏–≤—ã–µ —à–∏—à–∫–∏ {plant_name}. –ó–∞–ø–∞—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π!',
        f'{plant_name} –¥–µ–Ω—å {random.randint(1, 120)}. –†–∞—Å—Ç–µ—Ç –∫–∞–∫ –Ω–∞ –¥—Ä–æ–∂–∂–∞—Ö!',
        f'–ü–µ—Ä–≤—ã–π –æ–ø—ã—Ç –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è {plant_name}. –ü–æ–∫–∞ –≤—Å–µ –∏–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.',
        f'–•–∞—Ä–≤–µ—Å—Ç {plant_name} –±–ª–∏–∑–∫–æ! –ñ–¥—É –Ω–µ –¥–æ–∂–¥—É—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.',
        f'–ú–æ–π –ª—é–±–∏–º—ã–π —Å–æ—Ä—Ç - {plant_name}. –í—Å–µ–≥–¥–∞ —Ä–∞–¥—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ–º.',
    ]
    return random.choice(descriptions)


def generate_growlog_description(plant_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç–∞"""
    descriptions = [
        f'–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è {plant_name}. –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç —Å —ç—Ç–∏–º —Å–æ—Ä—Ç–æ–º.',
        f'–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å {plant_name} –≤ –≥–∏–¥—Ä–æ–ø–æ–Ω–∏–∫–µ. –î–µ–ª—é—Å—å –æ–ø—ã—Ç–æ–º –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏.',
        f'–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ {plant_name} –≤ –ø–æ—á–≤–µ. –ó–∞–ø–∏—Å—ã–≤–∞—é –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–∑–≤–∏—Ç–∏—è.',
        f'–í—Ç–æ—Ä–æ–π –≥—Ä–æ–≤ {plant_name}. –í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π, –ø–æ–≤—Ç–æ—Ä—è—é.',
        f'–°—Ä–∞–≤–Ω–∏–≤–∞—é —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞ {plant_name}. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä–∞–∑–Ω–∏—Ü—É.',
    ]
    return random.choice(descriptions)


def generate_photo_comment():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ñ–æ—Ç–æ"""
    comments = [
        '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëç',
        '–ö—Ä–∞—Å–∏–≤—ã–µ —à–∏—à–∫–∏! –ö–∞–∫–æ–π –∑–∞–ø–∞—Ö?',
        '–í–∞—É! –û—á–µ–Ω—å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!',
        '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ü–≤–µ—Ç–µ–Ω–∏—è?',
        '–ö–∞–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?',
        '–®–∏–∫–∞—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üî•',
        '–ö–∞–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –æ–∂–∏–¥–∞–µ—Ç—Å—è?',
        '–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –≤–∏–∂—É —Ç–∞–∫—É—é –∫—Ä–∞—Å–æ—Ç—É!',
        '–ü–æ–¥–µ–ª–∏—Å—å —Å–µ–∫—Ä–µ—Ç–æ–º —É—Å–ø–µ—Ö–∞!',
        '–§–æ—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! üì∏',
    ]
    return random.choice(comments)


def generate_growlog_comment():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≥—Ä–æ—É—Ä–µ–ø–æ—Ä—Ç–∞"""
    comments = [
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥! –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º.',
        '–ö–∞–∫–æ–π —Å–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?',
        '–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç! –£–¥–∞—á–∏ –≤ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏!',
        '–û—á–µ–Ω—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–µ—Ç–∞–ª–∏.',
        '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! üëÄ',
        '–ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –±–æ–∫—Å–µ?',
        '–°–∫–æ–ª—å–∫–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?',
        '–ö—Ä—É—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞! –°–∞–º —Ç–∞–∫—É—é —Ö–æ—á—É.',
        '–ö–∞–∫–æ–π —Å–∏–¥–±–∞–Ω–∫ —É —Å–µ–º—è–Ω?',
        '–ñ–¥—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è! –û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!',
    ]
    return random.choice(comments)
